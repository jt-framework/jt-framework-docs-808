import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c as r,b as e,d as a,e as t,w as c,a as s}from"./app-cuoTE0Qt.js";const l={},p=s('<h1 id="aware接口" tabindex="-1"><a class="header-anchor" href="#aware接口"><span>Aware接口</span></a></h1><p>首先声明这种 <code>Aware</code> 接口是从 <code>Spring</code> 中借鉴(抄袭)的 😂😂😂😂😂😂。</p><p>所以你要是知道 <code>Spring</code> 中的诸如 <code>ApplicationContextAware</code>、<code>EnvironmentAware</code> 等就几乎没必要看本小节了。</p><h2 id="为什么会提供" tabindex="-1"><a class="header-anchor" href="#为什么会提供"><span>为什么会提供？</span></a></h2><p>在用注解解析映射请求报文到实体类的时候，字段长度等的计算可能会依赖于消息头中的一些属性。</p><p>所以在基于注解的实体类映射时，你可以给实体类实现这些接口以自动注入一些其他信息。</p>',6),u={class:"hint-container caution"},v=e("p",{class:"hint-container-title"},"注意",-1),m=e("code",null,"请求体消息实体类",-1),h=s(`<h2 id="requestmsgheaderaware" tabindex="-1"><a class="header-anchor" href="#requestmsgheaderaware"><span>RequestMsgHeaderAware</span></a></h2><p>每次消息处理时为实体类注入 <code>RequestMsgHeader</code> 实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RequestMsgHeaderAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setRequestMsgHeader</span><span class="token punctuation">(</span><span class="token class-name">RequestMsgHeader</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="requestmsgmetadataaware" tabindex="-1"><a class="header-anchor" href="#requestmsgmetadataaware"><span>RequestMsgMetadataAware</span></a></h2><p>每次消息处理时为实体类注入 <code>RequestMsgMetadata</code> 实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RequestMsgMetadataAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setRequestMsgMetadata</span><span class="token punctuation">(</span><span class="token class-name">RequestMsgMetadata</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bytesencoderaware" tabindex="-1"><a class="header-anchor" href="#bytesencoderaware"><span>BytesEncoderAware</span></a></h2>`,7),k={class:"hint-container tip"},g=e("p",{class:"hint-container-title"},"提示",-1),b=e("code",null,"BytesEncoder",-1),_=s(`<ul><li><code>MsgHandler</code> 中可以实现该接口以注入 <code>BytesEncoder</code> 给处理器实例。</li><li>当然如果是自定义的 <code>MsgHandler</code>（接口实现类），完全可以使用 <code>Spring</code> 的依赖注入的方式来使用 <code>BytesEncoder</code> 实例。</li><li>内置的 <code>MsgHandler</code> 都实现了该接口。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BytesEncoderAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setBytesEncoder</span><span class="token punctuation">(</span><span class="token class-name">BytesEncoder</span> bytesEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function w(f,y){const n=o("RouterLink");return i(),r("div",null,[p,e("div",u,[v,e("p",null,[a("目前为止，这些Aware接口只能在 "),t(n,{to:"/v1/jt-808/guide/more/src/v1/jt-808/guide/annotation-based-dev/req-msg-mapping.html"},{default:c(()=>[a("基于注解处理请求消息映射")]),_:1}),a(" 时用于 "),m,a(" 中。")])]),h,e("div",k,[g,e("p",null,[a("有关 "),b,a(" 的内容，"),t(n,{to:"/v1/jt-808/guide/more/src/v1/jt-808/guide/customization/escape-config.html"},{default:c(()=>[a("请移步此处")]),_:1}),a("。")])]),_])}const q=d(l,[["render",w],["__file","aware-interface.html.vue"]]);export{q as default};

import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o,c as d,b as a,d as e,e as i,w as r,a as n}from"./app-cuoTE0Qt.js";const p={},l=n('<h1 id="aware接口" tabindex="-1"><a class="header-anchor" href="#aware接口"><span>Aware接口</span></a></h1><p>这种 <code>Aware</code> 接口是从 <code>Spring</code> 中借鉴(抄袭)的 😂😂😂😂😂😂。</p><p>所以你要是知道 <code>Spring</code> 中的诸如 <code>ApplicationContextAware</code>、<code>EnvironmentAware</code> 等就几乎没必要看本小节了。</p><h2 id="为什么会提供" tabindex="-1"><a class="header-anchor" href="#为什么会提供"><span>为什么会提供？</span></a></h2><p>在用注解解析映射请求报文到实体类的时候，字段长度等的计算可能会依赖于消息头中的一些属性。</p><p>所以在基于注解的实体类映射时，你可以给实体类实现这些接口以自动注入一些其他信息。</p>',6),u={class:"hint-container caution"},v=a("p",{class:"hint-container-title"},"注意",-1),h=a("strong",null,"Aware",-1),m=a("code",null,"请求体消息实体类",-1),k=n(`<h2 id="jt808requestheaderaware" tabindex="-1"><a class="header-anchor" href="#jt808requestheaderaware"><span>Jt808RequestHeaderAware</span></a></h2><p>每次消息处理时为实体类注入 <code>Jt808RequestHeader</code> 实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808RequestHeaderAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">Jt808RequestHeader</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jt808requestaware" tabindex="-1"><a class="header-anchor" href="#jt808requestaware"><span>Jt808RequestAware</span></a></h2><p>每次消息处理时为实体类注入 <code>Jt808Request</code> 实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808RequestAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setRequest</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function _(w,b){const s=c("RouterLink");return o(),d("div",null,[l,a("div",u,[v,a("p",null,[e("目前为止，这些"),h,e("接口只能在 "),i(s,{to:"/v2/jt-808/guide/annotation-based-dev/req-msg-mapping.html#jt808requestbody"},{default:r(()=>[e("基于注解处理请求消息映射")]),_:1}),e(" 时用于 "),m,e(" 中。")])]),k])}const g=t(p,[["render",_],["__file","aware-interface.html.vue"]]);export{g as default};

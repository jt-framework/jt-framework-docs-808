import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as r,c as p,b as e,d as a,e as n,w as c,a as s}from"./app-cuoTE0Qt.js";const h={},u=e("h1",{id:"_808服务配置-v1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_808服务配置-v1"},[e("span",null,"808服务配置(v1)")])],-1),m=e("p",null,"本小节会介绍808服务的配置选项。",-1),b=e("br",null,null,-1),v={href:"https://github.com/hylexus/jt-framework/tree/master/jt-808-server-spring-boot-stater/src/main/resources/META-INF/default-jt808-server-config.yml",target:"_blank",rel:"noopener noreferrer"},g=e("br",null,null,-1),k=e("br",null,null,-1),f=e("code",null,"Spring",-1),x=e("code",null,"PropertySources",-1),_=e("code",null,"default-jt808-server-config",-1),y={class:""},j=["src"],q=s(`<h2 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项"><span>配置项</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">jt808</span><span class="token punctuation">:</span>
  <span class="token key atrule">print-component-statistics</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
  <span class="token key atrule">entity-scan</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
  <span class="token key atrule">handler-scan</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
  <span class="token key atrule">exception-handler-scan</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
  <span class="token key atrule">msg-processor</span><span class="token punctuation">:</span>
    <span class="token key atrule">thread-pool</span><span class="token punctuation">:</span>
      <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="protocol" tabindex="-1"><a class="header-anchor" href="#protocol"><span>protocol</span></a></h2><h3 id="version" tabindex="-1"><a class="header-anchor" href="#version"><span>version</span></a></h3><ul><li>类型：<code>enum</code></li><li>默认值：<code>auto_detection</code></li></ul><p>808协议版本，可选值位于：<code>io.github.hylexus.jt.config.Jt808ProtocolVersion</code> 。</p><h3 id="max-frame-length" tabindex="-1"><a class="header-anchor" href="#max-frame-length"><span>max-frame-length</span></a></h3><p>对应 <code>io.netty.handler.codec.DelimiterBasedFrameDecoder</code> 的 <code>maxFrameLength</code> 属性。默认值：<code>1024</code>。</p><h2 id="server" tabindex="-1"><a class="header-anchor" href="#server"><span>server</span></a></h2><h3 id="port" tabindex="-1"><a class="header-anchor" href="#port"><span>port</span></a></h3><ul><li>类型：<code>int</code></li><li>默认值：<code>6808</code></li></ul><p><code>Netty</code> 服务器的TCP端口。</p><h3 id="boss-thread-count" tabindex="-1"><a class="header-anchor" href="#boss-thread-count"><span>boss-thread-count</span></a></h3><ul><li>类型：<code>int</code></li><li>默认值：<code>0</code></li></ul><p>默认值 <code>0</code> 表示交由 <code>Netty</code> 处理。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span>bossThreadCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="worker-thread-count" tabindex="-1"><a class="header-anchor" href="#worker-thread-count"><span>worker-thread-count</span></a></h3><ul><li>类型：<code>int</code></li><li>默认值：<code>0</code></li></ul><p>默认值 <code>0</code> 表示交由 <code>Netty</code> 处理。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span>workThreadCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="idle-state-handler" tabindex="-1"><a class="header-anchor" href="#idle-state-handler"><span>idle-state-handler</span></a></h3><p>该配置项对应 <code>io.netty.handler.timeout.IdleStateHandler</code> 的 三个属性：<code>readerIdleTime</code>、 <code>writerIdleTime</code> 、<code>allIdelTime</code>。 默认值都是 <code>20m</code>;</p><p>如果你的项目不需要 <code>IdleStateHandler</code> 的话，将 <code>jt808.server.idle-state-handler.enabled</code> 配置为 <code>false</code> 即可。</p><h2 id="entity-scan" tabindex="-1"><a class="header-anchor" href="#entity-scan"><span>entity-scan</span></a></h2><h3 id="enabled" tabindex="-1"><a class="header-anchor" href="#enabled"><span>enabled</span></a></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li></ul><p>是否启用实体扫描功能。启用后，请求报文可以自动映射到使用 <code>@Jt808ReqMsgBody</code> 标记的 <code>请求消息体实体类</code> 。</p>`,27),w=e("code",null,"请求体消息实体类",-1),E=s('<h3 id="enable-builtin-entity" tabindex="-1"><a class="header-anchor" href="#enable-builtin-entity"><span>enable-builtin-entity</span></a></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li></ul><p>是否自动注册内置的 <code>请求消息体实体类</code>。<br> 内置的 <code>请求消息体实体类</code> 包括：</p><ul><li><code>AuthRequestMsgBody</code> : 鉴权消息 <code>请求消息体实体类</code>。</li><li><code>EmptyRequestBody</code> : 一个空的 <code>请求消息体实体类</code>。</li></ul><h3 id="base-packages" tabindex="-1"><a class="header-anchor" href="#base-packages"><span>base-packages</span></a></h3><ul><li>类型：<code>String</code></li><li>默认值：<code>&quot;&quot;</code></li></ul><p><code>请求消息体实体类</code> 所在的包名，多个以逗号分隔。</p><h3 id="register-builtin-request-msg-converters" tabindex="-1"><a class="header-anchor" href="#register-builtin-request-msg-converters"><span>register-builtin-request-msg-converters</span></a></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li></ul><p>是否自动注册内置的 <code>RequestMsgBodyConverter</code>。</p><h2 id="handler-scan" tabindex="-1"><a class="header-anchor" href="#handler-scan"><span>handler-scan</span></a></h2><h3 id="enabled-1" tabindex="-1"><a class="header-anchor" href="#enabled-1"><span>enabled</span></a></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li></ul><p>是否启用基于注解的MsgHandler功能。启用后，消息处理可以用 <code>@Jt808RequestMsgHandlerMapping</code> 来处理。</p>',14),z=e("code",null,"MsgHandler",-1),S=s('<h3 id="base-packages-1" tabindex="-1"><a class="header-anchor" href="#base-packages-1"><span>base-packages</span></a></h3><ul><li>类型：<code>String</code></li><li>默认值：<code>&quot;&quot;</code></li></ul><p>基于注解的 <code>MsgHandler</code> 所在的包名，多个以逗号分隔。</p><h3 id="register-builtin-msg-handlers" tabindex="-1"><a class="header-anchor" href="#register-builtin-msg-handlers"><span>register-builtin-msg-handlers</span></a></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li></ul><p>是否自动注册内置的 <code>MsgHandler</code> 。</p><h2 id="exception-handler-scan" tabindex="-1"><a class="header-anchor" href="#exception-handler-scan"><span>exception-handler-scan</span></a></h2><h3 id="enabled-2" tabindex="-1"><a class="header-anchor" href="#enabled-2"><span>enabled</span></a></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li></ul><p>是否启用全局异常处理机制。启用后，可以用类似于 <code>Spring</code> 的全局异常处理的方式来处理异常。</p>',10),T=e("code",null,"ExceptionHandler",-1),M=s('<h3 id="base-packages-2" tabindex="-1"><a class="header-anchor" href="#base-packages-2"><span>base-packages</span></a></h3><ul><li>类型：<code>String</code></li><li>默认值：<code>&quot;&quot;</code></li></ul><p>基于注解的 <code>ExceptionHandler</code> 所在的包名，多个以逗号分隔。</p><h3 id="register-builtin-exception-handlers" tabindex="-1"><a class="header-anchor" href="#register-builtin-exception-handlers"><span>register-builtin-exception-handlers</span></a></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li></ul><p>是否自动注册内置的 <code>ExceptionHandler</code> 。</p><h2 id="msg-processor-thread-pool" tabindex="-1"><a class="header-anchor" href="#msg-processor-thread-pool"><span>msg-processor.thread-pool</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此处为 <code>消息处理线程池</code> 相关的配置。其实就是 <code>Java线程池</code> 几个关键参数的配置。</p></div><h3 id="core-pool-size" tabindex="-1"><a class="header-anchor" href="#core-pool-size"><span>core-pool-size</span></a></h3><ul><li>类型：<code>int</code></li><li>默认值：<code>Runtime.getRuntime().availableProcessors() + 1</code></li></ul><p>消息处理线程池的核心线程数，即 <code>java.util.concurrent.ThreadPoolExecutor.corePoolSize</code>。</p><h3 id="maximum-pool-size" tabindex="-1"><a class="header-anchor" href="#maximum-pool-size"><span>maximum-pool-size</span></a></h3><ul><li>类型：<code>int</code></li><li>默认值：<code>2 * corePoolSize</code></li></ul><p>同 <code>java.util.concurrent.ThreadPoolExecutor.maximumPoolSize</code> 。</p><h3 id="keep-alive-time" tabindex="-1"><a class="header-anchor" href="#keep-alive-time"><span>keep-alive-time</span></a></h3><ul><li>类型：<code>Duration</code></li><li>默认值：<code>60s</code></li></ul><p>同 <code>java.util.concurrent.ThreadPoolExecutor.keepAliveTime</code> 。</p><h3 id="blocking-queue-size" tabindex="-1"><a class="header-anchor" href="#blocking-queue-size"><span>blocking-queue-size</span></a></h3><ul><li>类型：<code>int</code></li><li>默认值：<code>20</code></li></ul><p><code>java.util.concurrent.ThreadPoolExecutor.workQueue</code> 的 <code>size()</code> 。</p><h3 id="thread-name-format" tabindex="-1"><a class="header-anchor" href="#thread-name-format"><span>thread-name-format</span></a></h3><ul><li>类型：<code>String</code></li><li>默认值：<code>808-msg-processor-%d</code></li></ul><p>线程池中线程的命名格式。</p><h2 id="其他配置" tabindex="-1"><a class="header-anchor" href="#其他配置"><span>其他配置</span></a></h2><h3 id="print-component-statistics" tabindex="-1"><a class="header-anchor" href="#print-component-statistics"><span>print-component-statistics</span></a></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li></ul><p><code>jt808.print-component-statistics</code> 表示是否开启服务启动完成后显示组件统计信息。</p><p>这些统计信息可以显示已经注册的 <code>MsgConverter</code> 、 <code>MsgHandler</code> 等组件。类似于下图所示：</p>',28),H={class:""},P=["src"];function B(t,N){const l=d("ExternalLinkIcon"),o=d("RouterLink");return r(),p("div",null,[u,m,e("p",null,[a("默认的配置可以在"),b,e("a",v,[a("default-jt808-server-config.yml"),n(l)]),g,a(" 中查看。"),k,a(" 并且已经将默认的配置加入到了 "),f,a(" 的 "),x,a(" 中，并将其置于最后，名称为 "),_,a(" 。")]),e("p",y,[e("img",{src:t.$withBase("/img/default-config-property-source.png"),alt:"default-config-property-source"},null,8,j)]),q,e("p",null,[a("使用基于注解的 "),w,a(),n(o,{to:"/v1/jt-808/config/src/v1/jt-808/guide/annotation-based-dev/req-msg-mapping.html"},{default:c(()=>[a("请参考这里")]),_:1}),a("。")]),E,e("p",null,[a("使用基于注解的 "),z,a(),n(o,{to:"/v1/jt-808/config/src/v1/jt-808/guide/annotation-based-dev/msg-handler-register.html"},{default:c(()=>[a("请参考这里")]),_:1}),a("。")]),S,e("p",null,[a("使用基于注解的 "),T,a(),n(o,{to:"/v1/jt-808/config/src/v1/jt-808/guide/annotation-based-dev/exception-handler.html"},{default:c(()=>[a("请参考这里")]),_:1}),a("。")]),M,e("p",H,[e("img",{src:t.$withBase("/img/print-component-statistics.png"),alt:"print-component-statistics"},null,8,P)])])}const C=i(h,[["render",B],["__file","index.html.vue"]]);export{C as default};

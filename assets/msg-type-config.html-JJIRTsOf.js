import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as e,c,b as n,d as s,e as o,a as l}from"./app-cuoTE0Qt.js";const i={},u=l(`<h1 id="消息类型" tabindex="-1"><a class="header-anchor" href="#消息类型"><span>消息类型</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>各个厂商对808协议都是选择性的实现，同时还有自定义的消息类型。</li><li>所以，并没有内置所有类型的消息，而是定义了一个 <code>MsgType</code> 接口以供用户自行扩展。</li><li>建议实现接口的时候使用枚举</li></ul></div><h2 id="扩展msgtype" tabindex="-1"><a class="header-anchor" href="#扩展msgtype"><span>扩展MsgType</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Jt808MsgType</span> <span class="token keyword">implements</span> <span class="token class-name">MsgType</span> <span class="token punctuation">{</span>
    <span class="token function">CLIENT_AUTH</span><span class="token punctuation">(</span><span class="token number">0x0102</span><span class="token punctuation">,</span> <span class="token string">&quot;终端鉴权&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">CLIENT_LOCATION_INFO_UPLOAD</span><span class="token punctuation">(</span><span class="token number">0x0200</span><span class="token punctuation">,</span> <span class="token string">&quot;位置上报&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> msgId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>

    <span class="token class-name">Jt808MsgType</span><span class="token punctuation">(</span><span class="token keyword">int</span> msgId<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msgId <span class="token operator">=</span> msgId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Jt808MsgType</span><span class="token punctuation">&gt;</span></span> mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Jt808MsgType</span> type <span class="token operator">:</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mapping<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>msgId<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgType</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseFromInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> msgId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>mapping<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>msgId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定制msgtypeparser" tabindex="-1"><a class="header-anchor" href="#定制msgtypeparser"><span>定制MsgTypeParser</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>MsgTypeParser</code> 的返回类型为 <code>java.util.Optional&lt;MsgType&gt;</code> 。</p><p>即便是无法处理的消息也不要返回 <code>null</code> 而应该以 <code>Optional.empty()</code> 代替。</p><p>此时会跳过这种未知类型的消息处理，并会在日志里打印 <code>warn</code> 级别的日志。</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jt808Config</span> <span class="token keyword">extends</span> <span class="token class-name">Jt808ServerConfigurationSupport</span> <span class="token punctuation">{</span> 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MsgTypeParser</span> <span class="token function">supplyMsgTypeParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msgType <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 先使用自定义解析器</span>
            <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgType</span><span class="token punctuation">&gt;</span></span> type <span class="token operator">=</span> <span class="token class-name">Jt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_AUTH</span><span class="token punctuation">.</span><span class="token function">parseFromInt</span><span class="token punctuation">(</span>msgType<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">?</span> type
                    <span class="token comment">// 自定义解析器无法解析,使用内置解析器</span>
                    <span class="token operator">:</span> <span class="token class-name">BuiltinJt808MsgType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_AUTH</span><span class="token punctuation">.</span><span class="token function">parseFromInt</span><span class="token punctuation">(</span>msgType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),r={class:"hint-container tip"},k=n("p",{class:"hint-container-title"},"传送门",-1),d={href:"https://github.com/hylexus/jt-framework/tree/master/samples/jt-808-server-sample-customized",target:"_blank",rel:"noopener noreferrer"};function m(v,g){const a=p("ExternalLinkIcon");return e(),c("div",null,[u,n("div",r,[k,n("p",null,[s("本小节示例可以在 "),n("a",d,[s("samples/jt-808-server-sample-customized"),o(a)]),s(" 找到相关代码。")])])])}const h=t(i,[["render",m],["__file","msg-type-config.html.vue"]]);export{h as default};

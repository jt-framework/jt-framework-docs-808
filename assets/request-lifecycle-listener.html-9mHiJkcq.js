import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e}from"./app-cuoTE0Qt.js";const t={},p=e(`<h1 id="请求生命周期监听器" tabindex="-1"><a class="header-anchor" href="#请求生命周期监听器"><span>请求生命周期监听器</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>一个终端请求的处理，包含下面几个比较关键的步骤：</p><ul><li><code>decode</code>: 将 <code>ByteBuf</code> 初步解码为 <code>Jt808Request</code><ul><li>此时消息整体结构已经解码完成</li><li><code>body</code> (消息体)部分依旧是 <code>ByteBuf</code></li></ul></li><li><code>dispatch1</code>: 将上一步初步解码的 <code>Jt808Request</code> 对象 <strong>分发</strong> 出去 <ul><li>如果是分包请求 <ul><li>在 <code>AbstractJt808RequestMsgQueueListener</code> 里暂存分包</li><li>直到所有子包都到达之后自动合并请求，再次 <code>dispatch</code> 合并后的请求</li></ul></li><li>否则，进行下一步</li></ul></li><li><code>dispatch2</code>: 将请求(包括合并后的分包请求)分发给处理器链 <code>Jt808DispatcherHandler</code><ul><li>调用处理器处理请求</li><li>处理 处理器返回的结果</li><li>回复终端</li></ul></li></ul><p>对应上面描述的处理流程，提供了 <code>Jt808RequestLifecycleListener</code> 以便在消息处理流程的关键步骤:</p><ul><li>加入自己的逻辑</li><li>拦截请求的处理流程</li></ul><details class="hint-container details"><summary>点击展开 Jt808RequestLifecycleListener 接口声明</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jt808RequestLifecycleListener</span> <span class="token keyword">extends</span> <span class="token class-name">OrderedComponent</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">request</span> 尚未解码的原始报文
     * <span class="token keyword">@param</span> <span class="token parameter">channel</span> 当前终端对应的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Channel</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Jt808DispatchChannelHandlerAdapter</span><span class="token punctuation">#</span><span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">beforeDecode</span><span class="token punctuation">(</span><span class="token class-name">ByteBuf</span> request<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">request</span> 初步解码后的请求(请求体尚未解码)
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Jt808RequestMsgDispatcher</span><span class="token punctuation">#</span><span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">beforeDispatch</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span> 请求上下文
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Jt808DispatcherHandler</span><span class="token punctuation">#</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">beforeDispatch</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span> 请求上下文
     * <span class="token keyword">@param</span> <span class="token parameter">handler</span>  处理当前请求的处理器。
     *                 目前内置的处理器有两种:
     *                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>
     *                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>被 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>hylexus<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>jt808<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">Jt808RequestHandler</span></span> @Jt808RequestHandler<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> 注解标记的处理器方法
     *                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>hylexus<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>jt808<span class="token punctuation">.</span>support<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">SimpleJt808RequestHandler</span></span> SimpleJt808RequestHandler<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> 实例
     *                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Jt808DispatcherHandler</span><span class="token punctuation">#</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>hylexus<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>jt808<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">Jt808ServerExchange</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">beforeHandle</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span>      请求上下文
     * <span class="token keyword">@param</span> <span class="token parameter">handlerResult</span> 请求处理器的处理结果
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Jt808HandlerResultHandler</span><span class="token punctuation">#</span><span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span><span class="token punctuation">,</span> <span class="token class-name">Jt808HandlerResult</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">beforeEncode</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Jt808HandlerResult</span> handlerResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span>      请求上下文
     * <span class="token keyword">@param</span> <span class="token parameter">handlerResult</span> 请求处理器的处理结果
     * <span class="token keyword">@param</span> <span class="token parameter">response</span>      回复给客户端的报文
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Jt808HandlerResultHandler</span><span class="token punctuation">#</span><span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span><span class="token punctuation">,</span> <span class="token class-name">Jt808HandlerResult</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">beforeResponse</span><span class="token punctuation">(</span><span class="token class-name">Jt808ServerExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Jt808HandlerResult</span> handlerResult<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h2><p>这里是一个使用 <code>Prometheus</code> 统计请求次数的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrometheusMetricsExporter</span> <span class="token keyword">implements</span> <span class="token class-name">Jt808RequestLifecycleListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MeterRegistry</span> meterRegistry<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">PrometheusMetricsExporter</span><span class="token punctuation">(</span><span class="token class-name">MeterRegistry</span> meterRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>meterRegistry <span class="token operator">=</span> meterRegistry<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">beforeDispatch</span><span class="token punctuation">(</span><span class="token class-name">Jt808Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Counter</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;jt808_request_total_count&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;A counter for JT/T 808 request processed by current server&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span>
                        <span class="token string">&quot;terminal_id&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">terminalId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>meterRegistry<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),c=[p];function l(o,i){return s(),a("div",null,c)}const k=n(t,[["render",l],["__file","request-lifecycle-listener.html.vue"]]);export{k as default};

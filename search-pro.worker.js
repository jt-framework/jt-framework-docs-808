const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:N(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(G),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(G),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":430,\"nextId\":430,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#项目结构\",\"2\":\"v-8daa1a0e#软件版本\",\"3\":\"v-22a39d25\",\"4\":\"v-22a39d25#联系我们\",\"5\":\"v-22a39d25#赞助\",\"6\":\"v-c7e971d2\",\"7\":\"v-c7e971d2#文档\",\"8\":\"v-c7e971d2#开发者\",\"9\":\"v-c7e971d2#jt-t-808-相关资料\",\"10\":\"v-c7e971d2#jt-t-1078-相关资料\",\"11\":\"v-c7e971d2#前端\",\"12\":\"v-c7e971d2#后端\",\"13\":\"v-a198b1d4\",\"14\":\"v-a198b1d4#mac端调试工具\",\"15\":\"v-a198b1d4#linux端调试工具\",\"16\":\"v-a198b1d4#windows端调试工具\",\"17\":\"v-cad9c6a0\",\"18\":\"v-cad9c6a0#章节目录\",\"19\":\"v-56ebe200\",\"20\":\"v-56ebe200#支持哪些版本的协议\",\"21\":\"v-56ebe200#分包报文的处理\",\"22\":\"v-56ebe200#报文加密解密\",\"23\":\"v-5d543bf8\",\"24\":\"v-364bc319\",\"25\":\"v-364bc319#请先读我\",\"26\":\"v-364bc319#章节目录\",\"27\":\"v-773b3ef6\",\"28\":\"v-652e7f8d\",\"29\":\"v-652e7f8d#消息结构\",\"30\":\"v-652e7f8d#消息头\",\"31\":\"v-689830cb\",\"32\":\"v-72d54485\",\"33\":\"v-72d54485#消息结构\",\"34\":\"v-72d54485#消息头\",\"35\":\"v-fd1072d4\",\"36\":\"v-fd1072d4#配置项\",\"37\":\"v-fd1072d4#protocol\",\"38\":\"v-fd1072d4#version\",\"39\":\"v-fd1072d4#max-frame-length\",\"40\":\"v-fd1072d4#server\",\"41\":\"v-fd1072d4#port\",\"42\":\"v-fd1072d4#boss-thread-count\",\"43\":\"v-fd1072d4#worker-thread-count\",\"44\":\"v-fd1072d4#idle-state-handler\",\"45\":\"v-fd1072d4#entity-scan\",\"46\":\"v-fd1072d4#enabled\",\"47\":\"v-fd1072d4#enable-builtin-entity\",\"48\":\"v-fd1072d4#base-packages\",\"49\":\"v-fd1072d4#register-builtin-request-msg-converters\",\"50\":\"v-fd1072d4#handler-scan\",\"51\":\"v-fd1072d4#enabled-1\",\"52\":\"v-fd1072d4#base-packages-1\",\"53\":\"v-fd1072d4#register-builtin-msg-handlers\",\"54\":\"v-fd1072d4#exception-handler-scan\",\"55\":\"v-fd1072d4#enabled-2\",\"56\":\"v-fd1072d4#base-packages-2\",\"57\":\"v-fd1072d4#register-builtin-exception-handlers\",\"58\":\"v-fd1072d4#msg-processor-thread-pool\",\"59\":\"v-fd1072d4#core-pool-size\",\"60\":\"v-fd1072d4#maximum-pool-size\",\"61\":\"v-fd1072d4#keep-alive-time\",\"62\":\"v-fd1072d4#blocking-queue-size\",\"63\":\"v-fd1072d4#thread-name-format\",\"64\":\"v-fd1072d4#其他配置\",\"65\":\"v-fd1072d4#print-component-statistics\",\"66\":\"v-c0101bac\",\"67\":\"v-c0101bac#注意\",\"68\":\"v-c0101bac#章节目录\",\"69\":\"v-fc7bf0f0\",\"70\":\"v-0c59472a\",\"71\":\"v-0c59472a#提示\",\"72\":\"v-0c59472a#章节目录\",\"73\":\"v-6309a475\",\"74\":\"v-6309a475#配置项总览\",\"75\":\"v-6309a475#默认配置\",\"76\":\"v-889f0732\",\"77\":\"v-889f0732#配置项总览\",\"78\":\"v-889f0732#request-filter\",\"79\":\"v-889f0732#program-param-printer\",\"80\":\"v-279b267c\",\"81\":\"v-279b267c#配置项总览\",\"82\":\"v-279b267c#msg-processor-thread-pool\",\"83\":\"v-279b267c#msg-processor-executor-group\",\"84\":\"v-279b267c#thread-count\",\"85\":\"v-279b267c#max-pending-tasks\",\"86\":\"v-279b267c#pool-name\",\"87\":\"v-a5ec187e\",\"88\":\"v-a5ec187e#配置项总览\",\"89\":\"v-a5ec187e#built-components\",\"90\":\"v-a5ec187e#component-statistics-enabled\",\"91\":\"v-a5ec187e#request-handlers-enabled\",\"92\":\"v-a5ec187e#logging\",\"93\":\"v-0a9612ec\",\"94\":\"v-0a9612ec#配置项总览\",\"95\":\"v-0a9612ec#max-frame-length\",\"96\":\"v-a0ecd83e\",\"97\":\"v-a0ecd83e#配置项总览\",\"98\":\"v-a0ecd83e#port\",\"99\":\"v-a0ecd83e#boss-thread-count\",\"100\":\"v-a0ecd83e#worker-thread-count\",\"101\":\"v-a0ecd83e#idle-state-handler\",\"102\":\"v-38097135\",\"103\":\"v-38097135#配置项总览\",\"104\":\"v-38097135#request-sub-package-storage\",\"105\":\"v-38097135#response-sub-package-storage\",\"106\":\"v-050f0790\",\"107\":\"v-73433a1f\",\"108\":\"v-73433a1f#为什么会提供\",\"109\":\"v-73433a1f#requestmsgheaderaware\",\"110\":\"v-73433a1f#requestmsgmetadataaware\",\"111\":\"v-73433a1f#bytesencoderaware\",\"112\":\"v-80ce0eaa\",\"113\":\"v-80ce0eaa#请求消息映射的实现\",\"114\":\"v-80ce0eaa#请求消息的业务处理的实现\",\"115\":\"v-80ce0eaa#引出的问题\",\"116\":\"v-80ce0eaa#orderedcomponent\",\"117\":\"v-40bd1c7a\",\"118\":\"v-40bd1c7a#组件关系图\",\"119\":\"v-40bd1c7a#时序图\",\"120\":\"v-40bd1c7a#msgdispatcher\",\"121\":\"v-40bd1c7a#msgconsumer\",\"122\":\"v-193366d6\",\"123\":\"v-193366d6#jt808requestmsghandleradvice\",\"124\":\"v-193366d6#jt808exceptionhandler\",\"125\":\"v-63098e08\",\"126\":\"v-40c88be0\",\"127\":\"v-40c88be0#十六进制报文\",\"128\":\"v-40c88be0#解析位置基本信息\",\"129\":\"v-40c88be0#关于status字段的解析\",\"130\":\"v-40c88be0#_1-手动解析\",\"131\":\"v-40c88be0#_2-使用-slicedfrom解析\",\"132\":\"v-40c88be0#_3-使用-splittablefield解析\",\"133\":\"v-40c88be0#关于经纬度的解析\",\"134\":\"v-40c88be0#_1-解析为4字节的int\",\"135\":\"v-40c88be0#_2-解析为double\",\"136\":\"v-40c88be0#关于位置附加项的解析\",\"137\":\"v-40c88be0#使用-basicfield解析\",\"138\":\"v-40c88be0#使用-extrafield解析\",\"139\":\"v-18918f02\",\"140\":\"v-18918f02#jt808requestmsghandler\",\"141\":\"v-18918f02#jt808requestmsghandlermapping\",\"142\":\"v-18918f02#参数自动注入\",\"143\":\"v-18918f02#msghandler注入到spring容器\",\"144\":\"v-53574dab\",\"145\":\"v-53574dab#_1-手动下发\",\"146\":\"v-53574dab#_2-使用commandsender下发\",\"147\":\"v-53574dab#实现原理\",\"148\":\"v-53574dab#示例\",\"149\":\"v-a7c7f224\",\"150\":\"v-a7c7f224#jt808reqmsgbody\",\"151\":\"v-a7c7f224#basicfield\",\"152\":\"v-a7c7f224#splittablefield\",\"153\":\"v-a7c7f224#slicedfrom\",\"154\":\"v-a7c7f224#extrafield-extramsgbody\",\"155\":\"v-a6e88a28\",\"156\":\"v-a6e88a28#直接返回respmsgbody\",\"157\":\"v-a6e88a28#不给客户端回复数据\",\"158\":\"v-a6e88a28#jt808respmsgbody\",\"159\":\"v-a6e88a28#示例代码\",\"160\":\"v-a6e88a28#属性解释\",\"161\":\"v-a6e88a28#commandfield\",\"162\":\"v-f60e7346\",\"163\":\"v-701a951e\",\"164\":\"v-45339934\",\"165\":\"v-77d0f850\",\"166\":\"v-50634790\",\"167\":\"v-50634790#手动实现并注册\",\"168\":\"v-50634790#基于注解实现\",\"169\":\"v-588c2662\",\"170\":\"v-588c2662#手动实现并注册\",\"171\":\"v-588c2662#实现\",\"172\":\"v-588c2662#注册自定义msghandler\",\"173\":\"v-588c2662#基于注解实现\",\"174\":\"v-33547414\",\"175\":\"v-33547414#扩展msgtype\",\"176\":\"v-33547414#定制msgtypeparser\",\"177\":\"v-09774fc6\",\"178\":\"v-15fb30fa\",\"179\":\"v-15fb30fa#jt808sessionmanager\",\"180\":\"v-15fb30fa#jt808sessionmanagereventlistener\",\"181\":\"v-010ffd9e\",\"182\":\"v-ed70472a\",\"183\":\"v-6caac496\",\"184\":\"v-6caac496#数据类型\",\"185\":\"v-6caac496#_808协议数据类型\",\"186\":\"v-6caac496#对应java数据类型\",\"187\":\"v-6caac496#消息结构\",\"188\":\"v-6caac496#消息头\",\"189\":\"v-5354d002\",\"190\":\"v-5354d002#创建工程\",\"191\":\"v-5354d002#添加依赖\",\"192\":\"v-5354d002#配置\",\"193\":\"v-5354d002#测试\",\"194\":\"v-5354d002#使用发包工具测试鉴权消息\",\"195\":\"v-7eebc6d6\",\"196\":\"v-7eebc6d6#手动下发\",\"197\":\"v-7eebc6d6#通过commandsender下发\",\"198\":\"v-b3c9f83a\",\"199\":\"v-b3c9f83a#介绍\",\"200\":\"v-b3c9f83a#示例\",\"201\":\"v-d43e5c28\",\"202\":\"v-485133c8\",\"203\":\"v-485133c8#介绍\",\"204\":\"v-485133c8#支持的参数类型\",\"205\":\"v-485133c8#jt808request\",\"206\":\"v-485133c8#jt808response\",\"207\":\"v-485133c8#jt808session\",\"208\":\"v-485133c8#jt808serverexchange\",\"209\":\"v-485133c8#jt808requestheader\",\"210\":\"v-485133c8#jt808requestbody\",\"211\":\"v-485133c8#jt808requestentity\",\"212\":\"v-02f4d005\",\"213\":\"v-02f4d005#介绍\",\"214\":\"v-02f4d005#jt808requesthandlermapping\",\"215\":\"v-02f4d005#介绍-1\",\"216\":\"v-02f4d005#示例\",\"217\":\"v-02f4d005#simplejt808requesthandler\",\"218\":\"v-02f4d005#介绍-2\",\"219\":\"v-02f4d005#示例-1\",\"220\":\"v-a482fda0\",\"221\":\"v-3ff6c82a\",\"222\":\"v-3ff6c82a#分包合并\",\"223\":\"v-3ff6c82a#分包暂存器\",\"224\":\"v-3ff6c82a#内置分包暂存器\",\"225\":\"v-3ff6c82a#示例\",\"226\":\"v-3ff6c82a#分包补传\",\"227\":\"v-d19bab8a\",\"228\":\"v-d19bab8a#说明\",\"229\":\"v-d19bab8a#jt808responsebody\",\"230\":\"v-d19bab8a#说明-1\",\"231\":\"v-d19bab8a#示例\",\"232\":\"v-d19bab8a#jt808response\",\"233\":\"v-d19bab8a#说明-2\",\"234\":\"v-d19bab8a#示例-1\",\"235\":\"v-5797bb40\",\"236\":\"v-5797bb40#分包方式\",\"237\":\"v-5797bb40#jt808response\",\"238\":\"v-5797bb40#jt808responsebody\",\"239\":\"v-5797bb40#示例\",\"240\":\"v-5797bb40#分包补传\",\"241\":\"v-5797bb40#分包暂存器\",\"242\":\"v-5797bb40#内置分包暂存器\",\"243\":\"v-5797bb40#示例-1\",\"244\":\"v-00c0c0df\",\"245\":\"v-6b3daa04\",\"246\":\"v-6b3daa04#为什么会提供\",\"247\":\"v-6b3daa04#jt808requestheaderaware\",\"248\":\"v-6b3daa04#jt808requestaware\",\"249\":\"v-269e4422\",\"250\":\"v-4c0e29e0\",\"251\":\"v-4c0e29e0#为什么要引入别名机制\",\"252\":\"v-4c0e29e0#requestfieldalias\",\"253\":\"v-4c0e29e0#responsefieldalias\",\"254\":\"v-4c0e29e0#faq\",\"255\":\"v-4c0e29e0#兼容性\",\"256\":\"v-4c0e29e0#混合使用\",\"257\":\"v-d7471856\",\"258\":\"v-d7471856#请先读我\",\"259\":\"v-d7471856#示例1-geopoint\",\"260\":\"v-d7471856#目的\",\"261\":\"v-d7471856#定义自己的注解\",\"262\":\"v-d7471856#提供一个转换器\",\"263\":\"v-d7471856#使用自定义注解\",\"264\":\"v-d7471856#示例2-bcddatetime\",\"265\":\"v-d7471856#目的-1\",\"266\":\"v-d7471856#定义自己的注解-1\",\"267\":\"v-d7471856#提供一个转换器-1\",\"268\":\"v-d7471856#使用自定义注解-1\",\"269\":\"v-d7471856#其他说明\",\"270\":\"v-f072a584\",\"271\":\"v-f072a584#相关知识\",\"272\":\"v-f072a584#请先读我\",\"273\":\"v-f072a584#byte\",\"274\":\"v-f072a584#反序列化byte\",\"275\":\"v-f072a584#序列化byte\",\"276\":\"v-f072a584#bytes\",\"277\":\"v-f072a584#反序列化bytes\",\"278\":\"v-f072a584#序列化bytes\",\"279\":\"v-f072a584#word\",\"280\":\"v-f072a584#反序列化word\",\"281\":\"v-f072a584#序列化word\",\"282\":\"v-f072a584#dword\",\"283\":\"v-f072a584#反序列化dword\",\"284\":\"v-f072a584#序列化dword\",\"285\":\"v-f072a584#bcd\",\"286\":\"v-f072a584#反序列化bcd\",\"287\":\"v-f072a584#序列号bcd\",\"288\":\"v-f072a584#string\",\"289\":\"v-f072a584#反序列化string\",\"290\":\"v-f072a584#序列化string\",\"291\":\"v-b1d8377c\",\"292\":\"v-b1d8377c#byte\",\"293\":\"v-b1d8377c#反序列化byte\",\"294\":\"v-b1d8377c#序列化byte\",\"295\":\"v-b1d8377c#bytes\",\"296\":\"v-b1d8377c#反序列化bytes\",\"297\":\"v-b1d8377c#序列化bytes\",\"298\":\"v-b1d8377c#word\",\"299\":\"v-b1d8377c#反序列化word\",\"300\":\"v-b1d8377c#序列化word\",\"301\":\"v-b1d8377c#dword\",\"302\":\"v-b1d8377c#反序列化dword\",\"303\":\"v-b1d8377c#序列化dword\",\"304\":\"v-b1d8377c#bcd\",\"305\":\"v-b1d8377c#反序列化bcd\",\"306\":\"v-b1d8377c#序列号bcd\",\"307\":\"v-b1d8377c#string\",\"308\":\"v-b1d8377c#反序列化string\",\"309\":\"v-b1d8377c#序列化string\",\"310\":\"v-ff593898\",\"311\":\"v-516e7332\",\"312\":\"v-2a443db0\",\"313\":\"v-2a443db0#解析报文到实体类\",\"314\":\"v-2a443db0#测试\",\"315\":\"v-4b690916\",\"316\":\"v-4b690916#解析报文到实体类\",\"317\":\"v-4b690916#测试\",\"318\":\"v-2c7be682\",\"319\":\"v-a55b4c66\",\"320\":\"v-a55b4c66#jt808requesthandler\",\"321\":\"v-a55b4c66#jt808requesthandlermapping\",\"322\":\"v-a55b4c66#属性\",\"323\":\"v-a55b4c66#示例\",\"324\":\"v-a55b4c66#jt808requestbody\",\"325\":\"v-a55b4c66#requestfield\",\"326\":\"v-a55b4c66#属性-1\",\"327\":\"v-a55b4c66#spel\",\"328\":\"v-a55b4c66#示例-1\",\"329\":\"v-a55b4c66#slicedfrom\",\"330\":\"v-a55b4c66#属性-2\",\"331\":\"v-a55b4c66#示例-2\",\"332\":\"v-5bc07826\",\"333\":\"v-5bc07826#jt808responsebody\",\"334\":\"v-5bc07826#属性\",\"335\":\"v-5bc07826#示例\",\"336\":\"v-5bc07826#responsefield\",\"337\":\"v-5bc07826#属性-1\",\"338\":\"v-5bc07826#spel\",\"339\":\"v-5bc07826#示例-1\",\"340\":\"v-6693551c\",\"341\":\"v-6693551c#请先读我\",\"342\":\"v-6693551c#要求\",\"343\":\"v-6693551c#为什么编译源码一定要-jdk17\",\"344\":\"v-6693551c#jdk版本要求\",\"345\":\"v-6693551c#spring-boot版本要求\",\"346\":\"v-6693551c#编译\",\"347\":\"v-6693551c#命令行编译\",\"348\":\"v-6693551c#导入idea\",\"349\":\"v-6693551c#导入eclipse\",\"350\":\"v-386a2741\",\"351\":\"v-386a2741#请先读我\",\"352\":\"v-386a2741#项目模块介绍\",\"353\":\"v-386a2741#jdk\",\"354\":\"v-386a2741#spring-boot\",\"355\":\"v-386a2741#请先读我-1\",\"356\":\"v-386a2741#内置版本\",\"357\":\"v-386a2741#spring-boot-2-x\",\"358\":\"v-386a2741#spring-boot-3-x\",\"359\":\"v-19570bd8\",\"360\":\"v-028f813c\",\"361\":\"v-028f813c#msgtype\",\"362\":\"v-028f813c#jt808msgtypeparser\",\"363\":\"v-62c27d6c\",\"364\":\"v-6d79856f\",\"365\":\"v-6d79856f#创建工程\",\"366\":\"v-6d79856f#添加依赖\",\"367\":\"v-6d79856f#spring-boot-2-x\",\"368\":\"v-6d79856f#spring-boot-3-x\",\"369\":\"v-6d79856f#配置\",\"370\":\"v-6d79856f#测试\",\"371\":\"v-6d79856f#启动项目\",\"372\":\"v-6d79856f#发报文\",\"373\":\"v-6d79856f#服务端\",\"374\":\"v-72bbd1de\",\"375\":\"v-72bbd1de#jt808request\",\"376\":\"v-72bbd1de#jt808response\",\"377\":\"v-72bbd1de#jt808session\",\"378\":\"v-72bbd1de#jt808serverexchange\",\"379\":\"v-7b460ace\",\"380\":\"v-7b460ace#jt808msgbytesprocessor\",\"381\":\"v-7b460ace#jt808msgdecoder\",\"382\":\"v-7b460ace#jt808msgencoder\",\"383\":\"v-06b617e7\",\"384\":\"v-48f34eba\",\"385\":\"v-7a224536\",\"386\":\"v-565b217d\",\"387\":\"v-565b217d#介绍\",\"388\":\"v-565b217d#使用示例\",\"389\":\"v-4fc5d2d9\",\"390\":\"v-4fc5d2d9#jt808session\",\"391\":\"v-4fc5d2d9#jt808sessionmanager\",\"392\":\"v-4fc5d2d9#jt808sessioneventlistener\",\"393\":\"v-4fc5d2d9#jt808flowidgenerator\",\"394\":\"v-05717608\",\"395\":\"v-537758cc\",\"396\":\"v-3d6b512b\",\"397\":\"v-3d6b512b#请先读我\",\"398\":\"v-3d6b512b#依赖升级\",\"399\":\"v-3d6b512b#spring-boot-2-x\",\"400\":\"v-3d6b512b#spring-boot-3-x\",\"401\":\"v-51eef6e5\",\"402\":\"v-51eef6e5#作用\",\"403\":\"v-51eef6e5#场景示例\",\"404\":\"v-51eef6e5#简单使用\",\"405\":\"v-eb90e8fe\",\"406\":\"v-eb90e8fe#作用\",\"407\":\"v-eb90e8fe#场景示例\",\"408\":\"v-eb90e8fe#如何创建实例\",\"409\":\"v-014ea967\",\"410\":\"v-014ea967#作用\",\"411\":\"v-014ea967#场景示例\",\"412\":\"v-014ea967#如何创建实例\",\"413\":\"v-014ea967#注意事项\",\"414\":\"v-169185e0\",\"415\":\"v-2c72a984\",\"416\":\"v-2c72a984#jt808bytereader\",\"417\":\"v-2c72a984#简单示例\",\"418\":\"v-2c72a984#使用jt808bytereader来解析请求体\",\"419\":\"v-2c72a984#jt808bytewriter\",\"420\":\"v-2c72a984#简单示例-1\",\"421\":\"v-2c72a984#使用jt808bytewriter手动编码响应体\",\"422\":\"v-56bd6dfa\",\"423\":\"v-56bd6dfa#entityjt808msgbuilder\",\"424\":\"v-56bd6dfa#bytebufjt808msgbuilder\",\"425\":\"v-53a682f0\",\"426\":\"v-e5881a92\",\"427\":\"v-2d0abf7b\",\"428\":\"v-218061b8\",\"429\":\"v-2d0abf9a\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,50],\"2\":[1,14],\"3\":[1],\"4\":[1,15],\"5\":[1,4],\"6\":[1,8],\"7\":[1,6],\"8\":[1,7],\"9\":[4,10],\"10\":[4,32],\"11\":[1,4],\"12\":[1,5],\"13\":[1],\"14\":[1,14],\"15\":[1,1],\"16\":[1,1],\"17\":[1],\"18\":[1,8],\"19\":[1],\"20\":[2,16],\"21\":[1,4],\"22\":[1,1],\"23\":[6,32],\"24\":[1],\"25\":[1,32],\"26\":[1,6],\"27\":[1,47],\"28\":[1],\"29\":[1,8],\"30\":[1,58],\"31\":[1,4],\"32\":[1],\"33\":[1,8],\"34\":[1,61],\"35\":[3,16],\"36\":[1,15],\"37\":[1],\"38\":[1,14],\"39\":[3,12],\"40\":[1],\"41\":[1,7],\"42\":[3,14],\"43\":[3,14],\"44\":[3,25],\"45\":[2],\"46\":[1,13],\"47\":[3,13],\"48\":[2,7],\"49\":[5,7],\"50\":[2],\"51\":[1,12],\"52\":[2,8],\"53\":[4,7],\"54\":[3],\"55\":[1,12],\"56\":[2,8],\"57\":[4,7],\"58\":[4,8],\"59\":[3,16],\"60\":[3,12],\"61\":[3,11],\"62\":[3,12],\"63\":[3,9],\"64\":[1],\"65\":[3,15],\"66\":[3],\"67\":[1,8],\"68\":[1,27],\"69\":[1],\"70\":[1],\"71\":[1,13],\"72\":[1,28],\"73\":[1],\"74\":[1,16],\"75\":[1,15],\"76\":[4,7],\"77\":[1,12],\"78\":[2,16],\"79\":[3,33],\"80\":[2,16],\"81\":[1,15],\"82\":[1,16],\"83\":[4],\"84\":[2,12],\"85\":[3,4],\"86\":[2,13],\"87\":[1,3],\"88\":[1,22],\"89\":[2],\"90\":[3,18],\"91\":[3,25],\"92\":[1,22],\"93\":[1,7],\"94\":[1,7],\"95\":[3,12],\"96\":[1,7],\"97\":[1,22],\"98\":[1,7],\"99\":[3,12],\"100\":[3,12],\"101\":[3,47],\"102\":[2,5],\"103\":[1],\"104\":[4,21],\"105\":[4,23],\"106\":[1,5],\"107\":[1,14],\"108\":[2,12],\"109\":[1,10],\"110\":[1,10],\"111\":[1,23],\"112\":[1,6],\"113\":[1,8],\"114\":[1,9],\"115\":[1,47],\"116\":[1,40],\"117\":[1],\"118\":[1,4],\"119\":[1],\"120\":[1],\"121\":[1],\"122\":[1,9],\"123\":[2,11],\"124\":[2,21],\"125\":[1,26],\"126\":[1,26],\"127\":[1,9],\"128\":[1,97],\"129\":[1,11],\"130\":[2,38],\"131\":[3,29],\"132\":[3,50],\"133\":[1,6],\"134\":[2,26],\"135\":[2,41],\"136\":[1,29],\"137\":[2,34],\"138\":[2,64],\"139\":[1,13],\"140\":[2,15],\"141\":[2,52],\"142\":[1,32],\"143\":[1,28],\"144\":[1,12],\"145\":[2,51],\"146\":[2],\"147\":[1,4],\"148\":[1,110],\"149\":[1],\"150\":[2,32],\"151\":[2,43],\"152\":[2,14],\"153\":[2,22],\"154\":[3,24],\"155\":[1,38],\"156\":[1,71],\"157\":[1,20],\"158\":[2,9],\"159\":[1,73],\"160\":[1,9],\"161\":[2,22],\"162\":[1,64],\"163\":[1,36],\"164\":[1,38],\"165\":[1,98],\"166\":[1,7],\"167\":[1,77],\"168\":[1,14],\"169\":[1,53],\"170\":[1],\"171\":[1,112],\"172\":[1,24],\"173\":[1,12],\"174\":[1,9],\"175\":[1,43],\"176\":[1,48],\"177\":[1,28],\"178\":[1,10],\"179\":[1,20],\"180\":[1,46],\"181\":[1,31],\"182\":[2,8],\"183\":[1],\"184\":[1],\"185\":[1,24],\"186\":[1,72],\"187\":[1,8],\"188\":[1,62],\"189\":[1,13],\"190\":[1,11],\"191\":[1,37],\"192\":[1,28],\"193\":[1,36],\"194\":[1,26],\"195\":[1],\"196\":[1,68],\"197\":[1,103],\"198\":[1],\"199\":[1,64],\"200\":[1,9],\"201\":[1],\"202\":[1],\"203\":[1,34],\"204\":[1,15],\"205\":[1,20],\"206\":[1,35],\"207\":[1,24],\"208\":[1,35],\"209\":[1,25],\"210\":[2,51],\"211\":[1,51],\"212\":[1],\"213\":[1,19],\"214\":[2],\"215\":[1,14],\"216\":[1,28],\"217\":[1],\"218\":[1,24],\"219\":[1,38],\"220\":[1,15],\"221\":[1],\"222\":[1,9],\"223\":[1,41],\"224\":[1,22],\"225\":[1,77],\"226\":[1,22],\"227\":[1],\"228\":[1,30],\"229\":[2],\"230\":[1,8],\"231\":[1,73],\"232\":[1],\"233\":[1],\"234\":[1,69],\"235\":[1],\"236\":[1,32],\"237\":[1,34],\"238\":[2,19],\"239\":[1,23],\"240\":[1,9],\"241\":[1,38],\"242\":[1,22],\"243\":[1,67],\"244\":[1],\"245\":[1,14],\"246\":[2,12],\"247\":[1,10],\"248\":[1,10],\"249\":[1],\"250\":[4,3],\"251\":[2,108],\"252\":[2,39],\"253\":[2,42],\"254\":[1],\"255\":[1,21],\"256\":[1,20],\"257\":[4],\"258\":[1,7],\"259\":[3],\"260\":[1,37],\"261\":[1,30],\"262\":[1,72],\"263\":[1,41],\"264\":[3],\"265\":[1,41],\"266\":[1,35],\"267\":[1,66],\"268\":[1,48],\"269\":[1,20],\"270\":[5],\"271\":[1,4],\"272\":[1,67],\"273\":[1],\"274\":[1,19],\"275\":[1,18],\"276\":[1],\"277\":[1,16],\"278\":[1,13],\"279\":[1],\"280\":[1,18],\"281\":[1,17],\"282\":[1],\"283\":[1,16],\"284\":[1,15],\"285\":[1],\"286\":[1,14],\"287\":[1,11],\"288\":[1],\"289\":[1,13],\"290\":[1,10],\"291\":[3],\"292\":[1],\"293\":[1,22],\"294\":[1,21],\"295\":[1],\"296\":[1,18],\"297\":[1,16],\"298\":[1],\"299\":[1,20],\"300\":[1,19],\"301\":[1],\"302\":[1,18],\"303\":[1,17],\"304\":[1],\"305\":[1,15],\"306\":[1,13],\"307\":[1],\"308\":[1,15],\"309\":[1,13],\"310\":[1,1],\"311\":[1],\"312\":[1,15],\"313\":[1,78],\"314\":[1,4],\"315\":[1,15],\"316\":[1,131],\"317\":[1,4],\"318\":[1,30],\"319\":[1],\"320\":[2,25],\"321\":[2,9],\"322\":[1,20],\"323\":[1,36],\"324\":[2,15],\"325\":[2],\"326\":[1,48],\"327\":[1,35],\"328\":[1,61],\"329\":[2,12],\"330\":[1,11],\"331\":[1,41],\"332\":[1],\"333\":[2,8],\"334\":[1,21],\"335\":[1,19],\"336\":[2],\"337\":[1,30],\"338\":[1,28],\"339\":[1,42],\"340\":[1],\"341\":[1,23],\"342\":[1],\"343\":[3,19],\"344\":[1,78],\"345\":[2,30],\"346\":[1,6],\"347\":[1,63],\"348\":[1,26],\"349\":[1,24],\"350\":[1],\"351\":[1,32],\"352\":[1,29],\"353\":[1,34],\"354\":[2],\"355\":[1,19],\"356\":[1,30],\"357\":[4,58],\"358\":[4,55],\"359\":[1],\"360\":[1],\"361\":[1,67],\"362\":[1,39],\"363\":[1,16],\"364\":[1,15],\"365\":[1,11],\"366\":[1],\"367\":[4,13],\"368\":[4,12],\"369\":[1,25],\"370\":[1],\"371\":[1,37],\"372\":[1,11],\"373\":[1,10],\"374\":[1,11],\"375\":[1,28],\"376\":[1,47],\"377\":[1,36],\"378\":[1,25],\"379\":[1],\"380\":[1,52],\"381\":[1,66],\"382\":[1,40],\"383\":[1],\"384\":[4,57],\"385\":[1,18],\"386\":[1],\"387\":[1,106],\"388\":[1,47],\"389\":[1],\"390\":[1,28],\"391\":[1,73],\"392\":[1,58],\"393\":[1,57],\"394\":[1,29],\"395\":[1],\"396\":[5],\"397\":[1,71],\"398\":[1],\"399\":[4,26],\"400\":[4,23],\"401\":[4,7],\"402\":[1,18],\"403\":[1,43],\"404\":[1,55],\"405\":[4,7],\"406\":[1,13],\"407\":[1,49],\"408\":[2,76],\"409\":[4,7],\"410\":[1,11],\"411\":[1,81],\"412\":[2,88],\"413\":[1,22],\"414\":[1],\"415\":[1],\"416\":[1,15],\"417\":[1,47],\"418\":[1,57],\"419\":[1,16],\"420\":[1,42],\"421\":[1,59],\"422\":[1,6],\"423\":[1,94],\"424\":[1,83],\"425\":[1],\"426\":[2],\"427\":[1],\"428\":[2],\"429\":[1]},\"averageFieldLength\":[1.4418604651162794,26.515993632979114],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"h\":\"项目结构\",\"t\":[\". ├── build-script # gradle用到的构建脚本和checkstyle配置 ├── docs # 文档 (vue-press) ├── gradle ├── jt-808-server-spring-boot-starter # spring-boot-v3 自动配置 (jdk17+) ├── jt-808-server-spring-boot-starter-boot2 # spring-boot-v2 自动配置 (jdk11+) ├── jt-808-server-support # jt-808的实现 ├── jt-core # 一些公共类(后期可能改名为 jt-common) ├── jt-spring # 和 spring 集成相关的类(2.x不再依赖,后期可能删除) └── samples # 示例项目 ├── jt-808-server-sample-bare # 几乎零配置的示例(spring-boot-2.x) ├── jt-808-server-sample-bare-boot3 # 几乎零配置的示例(spring-boot-3.x) ├── jt-808-server-sample-annotation # 注解相关的示例(spring-boot-2.x) ├── jt-808-server-sample-customized # 定制化示例(spring-boot-2.x) ├── jt-808-client-sample-debug # 开发时用来Debug的项目,请忽略 └── jt-808-server-sample-debug # 开发时用来Debug的项目,请忽略 \"]},\"2\":{\"h\":\"软件版本\",\"t\":[\"提示\",\"JDK : 17+\",\"Netty : 4.7.x\",\"VuePress : 2.0.0-beta.61\",\"Gradle : 7.6\"]},\"3\":{\"h\":\"关于我们\"},\"4\":{\"h\":\"联系我们\",\"t\":[\"GitHub 提交 Issue(推荐) \",\"请尽可能地描述清楚自己的问题\",\"异常信息最好有完整的堆栈记录，以及使用的版本\",\"QQ交流群 : 1072477383\",\"上班时间，(本人)不会回复；有问题群里留言即可，会尽最大可能在非工作时间及时处理\",\"另外拜托群里的各位大佬能解答一下新人的疑问\"]},\"5\":{\"h\":\"赞助\",\"t\":[\"项目的发展离不开你的支持，请作者喝一杯🍺吧！\",\"有钱的捧个钱场 没钱的捧个人场\"]},\"6\":{\"h\":\"致谢\",\"t\":[\"提示\",\"你正在浏览的文档是基于 VuePress 构建的，主题使用的是 VuePress-theme-hope\",\"以下各项条目排名不分先后\"]},\"7\":{\"h\":\"文档\",\"t\":[\"你正在浏览的文档是基于 VuePress 构建的，主题使用的是 VuePress-theme-hope\"]},\"8\":{\"h\":\"开发者\",\"t\":[\"小蒲的大门牙\",\"dferic\",\"zhangxiaobing0926\",\"pruidong\",\"another17\",\"李仁豪\",\"......\"]},\"9\":{\"h\":\"JT/T 808 相关资料\",\"t\":[\"https://github.com/SmallChi/JT808\",\"https://gitee.com/yezhihao/jt808-server\",\"......\"]},\"10\":{\"h\":\"JT/T 1078 相关资料\",\"t\":[\"感谢\",\"在写 1078 的时候 SmallChi 和 matrixy 的项目给了我很大帮助。\",\"H.264官方文档\",\"https://github.com/SmallChi/JT1078\",\"https://gitee.com/matrixy/jtt1078-video-server\",\"Symphonia-Rust版本的音频库\",\"github--jmuxer--h264.js\",\"https://gitee.com/ldming/JT1078\",\"https://github.com/redknotmiaoyuqiao/EyerH264Decoder/blob/59e0a396f0b9c0a4a2c034ba6d44fae22297e979/EyerH264Decoder/NaluPPS.cpp#L11\",\"...\"]},\"11\":{\"h\":\"前端\",\"t\":[\"VuePress\",\"VuePress-Theme-Hope\",\"......\"]},\"12\":{\"h\":\"后端\",\"t\":[\"Netty\",\"Spring-WebFlux\",\"Spring-MVC\",\"......\"]},\"13\":{\"h\":\"调试相关\"},\"14\":{\"h\":\"Mac端调试工具\",\"t\":[\"推荐 sokit 发包工具，详情请参考这位兄台的文章 mac下的socket调试工具---sokit\",\"提示\",\"使用 sokit 工具发送 十六进制 报文，请将报文以 [ 和 ] 包起来。\"]},\"15\":{\"h\":\"Linux端调试工具\",\"t\":[\"TODO\",\"TODO\"]},\"16\":{\"h\":\"Windows端调试工具\",\"t\":[\"下载地址\"]},\"17\":{\"h\":\"FAQ\"},\"18\":{\"h\":\"章节目录\",\"t\":[\"报文解析相关\",\"调试相关\",\"1.x 和 2.x 有什么区别?\"]},\"19\":{\"h\":\"报文解析相关\"},\"20\":{\"h\":\"支持哪些版本的协议?\",\"t\":[\"2.0.0 开始支持 混合 版本。\",\"客户端(不同终端)可以是支持 V2011、V2013 或 V2019 的 808协议 的任意终端。\"]},\"21\":{\"h\":\"分包报文的处理\",\"t\":[\"2.0.0 开始支持。\"]},\"22\":{\"h\":\"报文加密解密\",\"t\":[\"暂时不支持\"]},\"23\":{\"h\":\"1.x 和 2.x 有什么区别?\",\"t\":[\"重写了核心 API(Fluent 风格)\",\"使用 Netty 的 ByteBuf 代替了 1.x 中的 byte[ ]\",\"支持分包\",\"支持混合版本(2011/2013/2019)\",\"注解属性支持 SpEL(Spring-Expression-Language)，不再依赖 XxxAware 接口\",\"替换内置组件不再需要继承指定的类\",\"新增 Jt808HandlerInterceptor\",\"但是\",\"2.x 不向下兼容 1.x\"]},\"24\":{\"h\":\"协议扫盲\"},\"25\":{\"h\":\"请先读我\",\"t\":[\"808协议目前(写jt-framework-2.0文档的时刻即 2021-12-15 01:45:17 ) 就 2011、2013、2019 三个版本。\",\"警告\",\"据官方文档描述 2011 和 2013 在消息整体结构上没任何区别(仅仅是消息体的区别)。\",\"2019 版在 消息体属性 和 终端手机号 之间新增了协议版本号属性。\",\"所以，本项目将 V2011 和 V2013 版统一处理(都叫 V2013 )。\"]},\"26\":{\"h\":\"章节目录\",\"t\":[\"808协议 \",\"v-2019\",\"v-2013\",\"v-2011\",\"类型映射\"]},\"27\":{\"h\":\"类型映射\",\"t\":[\"这里要介绍的是 JT/T 808 协议中定义的 BYTE、WORD、DWORD、BCD、STRING、BYTES 和 java 数据类型的映射关系。\",\"参考下面两个章节：\",\"数据类型转换\",\"数据类型转换(注解别名)\",\"内置消息说明\",\"io.github.hylexus.jt.jt808.spec.builtin.msg.req 包下内置了一些 请求消息 实体类映射示例\",\"io.github.hylexus.jt.jt808.spec.builtin.msg.resp 包下内置了一些 响应消息 实体类映射示例\",\"这些类命名格式都是 BuiltinMsgXxx 或 BuiltinMsgXxxAlias, 以 Alias 结尾的示例是 v2.1.1 开始加入的。\",\"这些类只是个示例，很可能不符合你的需求，你应该复制一份出来修改(不同版本可能有改动)。\"]},\"28\":{\"h\":\"V2011\"},\"29\":{\"h\":\"消息结构\",\"t\":[\"标识位\",\"消息头\",\"消息体\",\"校验码\",\"标识位\",\"1byte(0x7e)\",\"16byte\",\"1byte\",\"1byte(0x7e)\"]},\"30\":{\"h\":\"消息头\",\"t\":[\"分包消息 的消息头长度为 16字节\",\"非分包消息 的消息头长度为 12字节\",\"消息头的结构如下所示：\",\"消息ID[0-2) 消息体属性[2-4) 终端手机号[4-10) 消息流水号[10-12) 消息包封装项[12-16) byte[0-2) 消息ID word(16) byte[2-4) 消息体属性 word(16) bit[0-10) 消息体长度 bit[10-13) 数据加密方式 此三位都为 0,表示消息体不加密 第 10 位为 1,表示消息体经过 RSA 算法加密 其它保留 bit[13] 分包 1: 消息体卫长消息,进行分包发送处理,具体分包信息由消息包封装项决定 0: 则消息头中无消息包封装项字段 bit[14-15] 保留 byte[4-10) 终端手机号或设备ID bcd[6] 根据安装后终端自身的手机号转换 手机号不足12 位,则在前面补 0 byte[10-12) 消息流水号 word(16) 按发送顺序从 0 开始循环累加 byte[12-16) 消息包封装项 如果消息体属性中相关标识位确定消息分包处理,则该项有内容 否则无该项 byte[0-2) 消息包总数(word(16)) 该消息分包后得总包数 byte[2-4) 包序号(word(16)) 从 1 开始 \"]},\"31\":{\"h\":\"V2013\",\"t\":[\"整体消息结构和 v2011 一致。\"]},\"32\":{\"h\":\"V2019\"},\"33\":{\"h\":\"消息结构\",\"t\":[\"标识位\",\"消息头\",\"消息体\",\"校验码\",\"标识位\",\"1byte(0x7e)\",\"16byte\",\"1byte\",\"1byte(0x7e)\"]},\"34\":{\"h\":\"消息头\",\"t\":[\"非分包消息 的消息头长度为 17字节\",\"分包消息 的消息头长度为 21字节\",\"消息头的结构如下所示：\",\"消息ID[0-2) 消息体属性[2-4) 协议版本号[4] 终端手机号[5-15) 消息流水号[15-17) 消息包封装项[17-21) byte[0-2) 消息ID word(16) byte[2-4) 消息体属性 word(16) bit[0-10) 消息体长度 bit[10-13) 数据加密方式 此三位都为 0,表示消息体不加密 第 10 位为 1,表示消息体经过 RSA 算法加密 其它保留 bit[13] 分包 1: 消息体卫长消息,进行分包发送处理,具体分包信息由消息包封装项决定 0: 则消息头中无消息包封装项字段 bit[14] 版本标识 bit[15] 保留 byte[4] 协议版本号 byte[5-15) 终端手机号或设备ID bcd[10] 根据安装后终端自身的手机号转换 手机号不足12 位,则在前面补 0 byte[15-17) 消息流水号 word(16) 按发送顺序从 0 开始循环累加 byte[17-21) 消息包封装项 如果消息体属性中相关标识位确定消息分包处理,则该项有内容 否则无该项 byte[0-2) 消息包总数(word(16)) 该消息分包后得总包数 byte[2-4) 包序号(word(16)) 从 1 开始 \"]},\"35\":{\"h\":\"808服务配置(v1)\",\"t\":[\"本小节会介绍808服务的配置选项。\",\"默认的配置可以在default-jt808-server-config.yml 中查看。 并且已经将默认的配置加入到了 Spring 的 PropertySources 中，并将其置于最后，名称为 default-jt808-server-config 。\"]},\"36\":{\"h\":\"配置项\",\"t\":[\"jt808: print-component-statistics: true server: # ... entity-scan: # ... handler-scan: # ... exception-handler-scan: # ... msg-processor: thread-pool: # ... \"]},\"37\":{\"h\":\"protocol\"},\"38\":{\"h\":\"version\",\"t\":[\"类型：enum\",\"默认值：auto_detection\",\"808协议版本，可选值位于：io.github.hylexus.jt.config.Jt808ProtocolVersion 。\"]},\"39\":{\"h\":\"max-frame-length\",\"t\":[\"对应 io.netty.handler.codec.DelimiterBasedFrameDecoder 的 maxFrameLength 属性。默认值：1024。\"]},\"40\":{\"h\":\"server\"},\"41\":{\"h\":\"port\",\"t\":[\"类型：int\",\"默认值：6808\",\"Netty 服务器的TCP端口。\"]},\"42\":{\"h\":\"boss-thread-count\",\"t\":[\"类型：int\",\"默认值：0\",\"默认值 0 表示交由 Netty 处理。\",\"this.bossGroup = new NioEventLoopGroup(bossThreadCount); \"]},\"43\":{\"h\":\"worker-thread-count\",\"t\":[\"类型：int\",\"默认值：0\",\"默认值 0 表示交由 Netty 处理。\",\"this.workerGroup = new NioEventLoopGroup(workThreadCount); \"]},\"44\":{\"h\":\"idle-state-handler\",\"t\":[\"该配置项对应 io.netty.handler.timeout.IdleStateHandler 的 三个属性：readerIdleTime、 writerIdleTime 、allIdelTime。 默认值都是 20m;\",\"如果你的项目不需要 IdleStateHandler 的话，将 jt808.server.idle-state-handler.enabled 配置为 false 即可。\"]},\"45\":{\"h\":\"entity-scan\"},\"46\":{\"h\":\"enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否启用实体扫描功能。启用后，请求报文可以自动映射到使用 @Jt808ReqMsgBody 标记的 请求消息体实体类 。\",\"使用基于注解的 请求体消息实体类请参考这里。\"]},\"47\":{\"h\":\"enable-builtin-entity\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否自动注册内置的 请求消息体实体类。 内置的 请求消息体实体类 包括：\",\"AuthRequestMsgBody : 鉴权消息 请求消息体实体类。\",\"EmptyRequestBody : 一个空的 请求消息体实体类。\"]},\"48\":{\"h\":\"base-packages\",\"t\":[\"类型：String\",\"默认值：\\\"\\\"\",\"请求消息体实体类 所在的包名，多个以逗号分隔。\"]},\"49\":{\"h\":\"register-builtin-request-msg-converters\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否自动注册内置的 RequestMsgBodyConverter。\"]},\"50\":{\"h\":\"handler-scan\"},\"51\":{\"h\":\"enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否启用基于注解的MsgHandler功能。启用后，消息处理可以用 @Jt808RequestMsgHandlerMapping 来处理。\",\"使用基于注解的 MsgHandler请参考这里。\"]},\"52\":{\"h\":\"base-packages\",\"t\":[\"类型：String\",\"默认值：\\\"\\\"\",\"基于注解的 MsgHandler 所在的包名，多个以逗号分隔。\"]},\"53\":{\"h\":\"register-builtin-msg-handlers\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否自动注册内置的 MsgHandler 。\"]},\"54\":{\"h\":\"exception-handler-scan\"},\"55\":{\"h\":\"enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否启用全局异常处理机制。启用后，可以用类似于 Spring 的全局异常处理的方式来处理异常。\",\"使用基于注解的 ExceptionHandler请参考这里。\"]},\"56\":{\"h\":\"base-packages\",\"t\":[\"类型：String\",\"默认值：\\\"\\\"\",\"基于注解的 ExceptionHandler 所在的包名，多个以逗号分隔。\"]},\"57\":{\"h\":\"register-builtin-exception-handlers\",\"t\":[\"类型：boolean\",\"默认值：true\",\"是否自动注册内置的 ExceptionHandler 。\"]},\"58\":{\"h\":\"msg-processor.thread-pool\",\"t\":[\"提示\",\"此处为 消息处理线程池 相关的配置。其实就是 Java线程池 几个关键参数的配置。\"]},\"59\":{\"h\":\"core-pool-size\",\"t\":[\"类型：int\",\"默认值：Runtime.getRuntime().availableProcessors() + 1\",\"消息处理线程池的核心线程数，即 java.util.concurrent.ThreadPoolExecutor.corePoolSize。\"]},\"60\":{\"h\":\"maximum-pool-size\",\"t\":[\"类型：int\",\"默认值：2 * corePoolSize\",\"同 java.util.concurrent.ThreadPoolExecutor.maximumPoolSize 。\"]},\"61\":{\"h\":\"keep-alive-time\",\"t\":[\"类型：Duration\",\"默认值：60s\",\"同 java.util.concurrent.ThreadPoolExecutor.keepAliveTime 。\"]},\"62\":{\"h\":\"blocking-queue-size\",\"t\":[\"类型：int\",\"默认值：20\",\"java.util.concurrent.ThreadPoolExecutor.workQueue 的 size() 。\"]},\"63\":{\"h\":\"thread-name-format\",\"t\":[\"类型：String\",\"默认值：808-msg-processor-%d\",\"线程池中线程的命名格式。\"]},\"64\":{\"h\":\"其他配置\"},\"65\":{\"h\":\"print-component-statistics\",\"t\":[\"类型：boolean\",\"默认值：true\",\"jt808.print-component-statistics 表示是否开启服务启动完成后显示组件统计信息。\",\"这些统计信息可以显示已经注册的 MsgConverter 、 MsgHandler 等组件。类似于下图所示：\"]},\"66\":{\"h\":\"指南(v1)\"},\"67\":{\"h\":\"注意\",\"t\":[\"提示\",\"1.x 不再增加新特性，只修改严重 bug。\",\"建议使用 2.x\",\"提示\",\"1.x 不再增加新特性，只修改严重 bug。\",\"建议使用 2.x\",\"提示\",\"1.x 不再增加新特性，只修改严重 bug。\",\"建议使用 2.x\"]},\"68\":{\"h\":\"章节目录\",\"t\":[\"提示\",\"本文档将介绍808协议处理方式，内容如下：\",\"808协议入门\",\"协议扫盲\",\"快速开始\",\"定制\",\"Session相关\",\"Netty相关\",\"转义相关\",\"消息类型\",\"消息转换器\",\"消息处理器\",\"TerminalValidator\",\"AuthValidator\",\"注解驱动开发\",\"请求消息映射\",\"消息处理器注册\",\"响应消息映射\",\"消息下发\",\"异常处理\",\"位置上传报文解析示例\",\"深入\",\"消息处理流程\",\"组件顺序\",\"Aware接口\",\"FAQ\"]},\"69\":{\"h\":\"Extension\"},\"70\":{\"h\":\"指南\"},\"71\":{\"h\":\"提示\",\"t\":[\"注意\",\"你现在看的是 2.x 的文档。\",\"1.x 不再增加新特性，只修改严重 bug。 建议使用 2.x。\",\"1.x 和 2.x 有什么区别?\"]},\"72\":{\"h\":\"章节目录\",\"t\":[\"入门 \",\"快速开始\",\"基本术语\",\"消息类型\",\"基础 \",\"请求处理流程\",\"请求消息处理器\",\"请求参数解析器\",\"响应消息处理器\",\"消息下发\",\"请求消息分包\",\"响应消息分包\",\"处理器拦截器\",\"注解驱动开发 \",\"请求消息映射\",\"响应消息映射\",\"异常处理\",\"位置上传报文解析示例\",\"批量位置上传报文解析示例\",\"定制 \",\"Netty相关\",\"编码相关\",\"Session相关\",\"分包相关\",\"请求生存周期监听器\",\"深入 \",\"Aware接口\",\"TODO\"]},\"73\":{\"h\":\"overview\"},\"74\":{\"h\":\"配置项总览\",\"t\":[\"jt808: built-components: # ... features: # v2.1.1 # ... protocol: # ... server: # ... msg-processor: # ... request-sub-package-storage: # ... response-sub-package-storage: # ... \"]},\"75\":{\"h\":\"默认配置\",\"t\":[\"默认的配置可以在default-jt808-server-config.yml 中查看。 并且已经将默认的配置加入到了 Spring 的 PropertySources 中，并将其置于最后，名称为 default-jt808-server-config 。\"]},\"76\":{\"h\":\"features(v2.1.1)\",\"t\":[\"提示\",\"该章节介绍的是 jt808.features.xxx 相关的配置。\"]},\"77\":{\"h\":\"配置项总览\",\"t\":[\"jt808: features: request-filter: enabled: false program-param-printer: enabled: false pretty: true \"]},\"78\":{\"h\":\"request-filter\",\"t\":[\"v2.1.1 中引入了 Jt808RequestFilter，但是默认是没有启用的。\",\"如果你要使用 Jt808RequestFilter，请打开 jt808.features.request-filter.enabled = true 这个配置。\"]},\"79\":{\"h\":\"program-param-printer\",\"t\":[\"以 JSON 格式打印 jt-808.xxx 开头的所有配置项在运行时读取到的最终值。\",\"注意\",\"jt808.features.program-param-printer.enabled 默认是 false。\",\"如果你要开启这个配置，请确保 直接或间接 引入了 com.fasterxml.jackson.core:jackson-databind 和 com.fasterxml.jackson.datatype:jackson-datatype-jsr310 依赖。\",\"jt808.features.program-param-printer.pretty 用来控制打印的 JSON 是否是格式化过的。\"]},\"80\":{\"h\":\"message-processor\",\"t\":[\"提示\",\"该章节介绍的是 jt808.msg-processor.executor-group.xxx 消息处理线程池相关的配置。\",\"参见 io.netty.util.concurrent.DefaultEventExecutorGroup 。\"]},\"81\":{\"h\":\"配置项总览\",\"t\":[\"jt808: msg-processor: executor-group: pool-name: 808-msg-processor thread-count: 128 max-pending-tasks: 128 \"]},\"82\":{\"h\":\"\",\"t\":[\"提示\",\"msg-processor.thread-pool.xxx 系列配置在 2.0.2 中已经废弃(存在跨线程资源回收问题)。\",\"使用 msg-processor.executor-group 代替。\"]},\"83\":{\"h\":\"msg-processor.executor-group\"},\"84\":{\"h\":\"thread-count\",\"t\":[\"类型：int\",\"默认值： \",\"v2.2.1 之前: Runtime.getRuntime().availableProcessors() * 2\",\"v2.2.1 之后: 128\"]},\"85\":{\"h\":\"max-pending-tasks\",\"t\":[\"类型：int\",\"默认值：128\"]},\"86\":{\"h\":\"pool-name\",\"t\":[\"线程池的线程名前缀。\",\"类型：String\",\"默认值：808-msg-processer\",\"默认值： \",\"v2.2.1 之前: 808-msg-processer\",\"v2.2.1 之后: 808-msg-processor\"]},\"87\":{\"h\":\"others\",\"t\":[\"提示\",\"该章节介绍的是除前面章节内容之外的其他杂项配置。\"]},\"88\":{\"h\":\"配置项总览\",\"t\":[\"jt808: built-components: request-handlers: enabled: true component-statistics: enabled: true logging: level: root: info io.github.hylexus: info jt-808.request.decoder: info jt-808.response.encoder: info \"]},\"89\":{\"h\":\"built-components\"},\"90\":{\"h\":\"component-statistics.enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"jt808.built-components.component-statistics.enabled 表示是否开启服务启动完成后显示组件统计信息。\",\"这些统计信息可以显示已经注册的 消息处理器 和其他 可配置的 组件。类似于下图所示：\"]},\"91\":{\"h\":\"request-handlers.enabled\",\"t\":[\"类型：boolean\",\"默认值：true\",\"jt808.built-components.request-handlers.enabled 表示是否启用内置的一些消息处理器。\",\"内置消息处理器都在 io.github.hylexus.jt.jt808.support.dispatcher.handler.builtin 包下。\",\"注意\",\"内置的处理器仅仅是示例性的，不要直接使用。\"]},\"92\":{\"h\":\"logging\",\"t\":[\"logging: level: root: info io.github.hylexus: info # 对应 io.github.hylexus.jt.jt808.support.codec.impl.DefaultJt808MsgDecoder 的日志 jt-808.request.decoder: info # 对应 io.github.hylexus.jt.jt808.support.codec.impl.DefaultJt808MsgEncoder 的日志 jt-808.response.encoder: info \"]},\"93\":{\"h\":\"protocol\",\"t\":[\"提示\",\"该章节介绍的是 jt808.protocol.xxx 相关的配置。\"]},\"94\":{\"h\":\"配置项总览\",\"t\":[\"jt808: protocol: max-frame-length: 1024 \"]},\"95\":{\"h\":\"max-frame-length\",\"t\":[\"对应 io.netty.handler.codec.DelimiterBasedFrameDecoder 的 maxFrameLength 属性。默认值：1024。\"]},\"96\":{\"h\":\"server\",\"t\":[\"提示\",\"该章节介绍的是 jt808.server.xxx 相关的配置。\"]},\"97\":{\"h\":\"配置项总览\",\"t\":[\"jt808: server: port: 6808 boss-thread-count: 0 worker-thread-count: 0 idle-state-handler: enabled: true reader-idle-time: 20m writer-idle-time: 0s # disabled all-idle-time: 0s # disabled \"]},\"98\":{\"h\":\"port\",\"t\":[\"类型：int\",\"默认值：6808\",\"Netty 服务器的TCP端口。\"]},\"99\":{\"h\":\"boss-thread-count\",\"t\":[\"类型：int\",\"默认值：0\",\"默认值 0 表示交由 Netty 处理。\",\"this.bossGroup=new NioEventLoopGroup(bossThreadCount); \"]},\"100\":{\"h\":\"worker-thread-count\",\"t\":[\"类型：int\",\"默认值：0\",\"默认值 0 表示交由 Netty 处理。\",\"this.workerGroup=new NioEventLoopGroup(workThreadCount); \"]},\"101\":{\"h\":\"idle-state-handler\",\"t\":[\"该配置项对应 io.netty.handler.timeout.IdleStateHandler 的 三个属性：readerIdleTime、 writerIdleTime 、allIdelTime。\",\"如果你的项目不需要 IdleStateHandler 的话，将 jt808.server.idle-state-handler.enabled 配置为 false 即可。\",\"警告\",\"在 2.0.3(不包括) 以下的版本中这三个配置项的默认值都是 20m\",\"同时其实现类 Jt808TerminalHeatBeatHandler 有 Bug，详情见: issues#66\",\"2.0.3 之后版本默认配置如下：\",\"jt808: server: idle-state-handler: enabled: true reader-idle-time: 20m # 20m内没有发送数据的客户端将被断开 writer-idle-time: 0s # disabled all-idle-time: 0s # disabled \"]},\"102\":{\"h\":\"sub-package\",\"t\":[\"提示\",\"该章节介绍的是 分包消息 相关的配置。\"]},\"103\":{\"h\":\"配置项总览\"},\"104\":{\"h\":\"request-sub-package-storage\",\"t\":[\"请求分包消息暂存器相关配置。\",\"jt808: request-sub-package-storage: type: caffeine # caffeine || none ## 当且仅当 jt808.request-sub-package-storage.type = caffeine 时生效 caffeine: # 最多缓存多少条消息 maximum-size: 1024 # 最大缓存时间 ttl: 45s \"]},\"105\":{\"h\":\"response-sub-package-storage\",\"t\":[\"响应分包消息暂存器相关配置。\",\"jt808: response-sub-package-storage: type: caffeine # caffeine || redis || none ## 当且仅当 jt808.response-sub-package-storage.type = caffeine 时生效 caffeine: # 最多缓存多少条消息 maximum-size: 1024 # 最大缓存时间 ttl: 45s ## 当且仅当 jt808.response-sub-package-storage.type = redis 时生效 redis: # 最大缓存时间 ttl: 1m \"]},\"106\":{\"h\":\"深入\",\"t\":[\"提示\",\"本小节内容如下：\",\"消息处理流程\",\"组件顺序\",\"Aware接口\"]},\"107\":{\"h\":\"Aware接口\",\"t\":[\"首先声明这种 Aware 接口是从 Spring 中借鉴(抄袭)的 😂😂😂😂😂😂。\",\"所以你要是知道 Spring 中的诸如 ApplicationContextAware、EnvironmentAware 等就几乎没必要看本小节了。\"]},\"108\":{\"h\":\"为什么会提供？\",\"t\":[\"在用注解解析映射请求报文到实体类的时候，字段长度等的计算可能会依赖于消息头中的一些属性。\",\"所以在基于注解的实体类映射时，你可以给实体类实现这些接口以自动注入一些其他信息。\",\"注意\",\"目前为止，这些Aware接口只能在 基于注解处理请求消息映射 时用于 请求体消息实体类 中。\"]},\"109\":{\"h\":\"RequestMsgHeaderAware\",\"t\":[\"每次消息处理时为实体类注入 RequestMsgHeader 实例。\",\"public interface RequestMsgHeaderAware { void setRequestMsgHeader(RequestMsgHeader header); } \"]},\"110\":{\"h\":\"RequestMsgMetadataAware\",\"t\":[\"每次消息处理时为实体类注入 RequestMsgMetadata 实例。\",\"public interface RequestMsgMetadataAware { void setRequestMsgMetadata(RequestMsgMetadata metadata); } \"]},\"111\":{\"h\":\"BytesEncoderAware\",\"t\":[\"提示\",\"有关 BytesEncoder 的内容，请移步此处。\",\"MsgHandler 中可以实现该接口以注入 BytesEncoder 给处理器实例。\",\"当然如果是自定义的 MsgHandler（接口实现类），完全可以使用 Spring 的依赖注入的方式来使用 BytesEncoder 实例。\",\"内置的 MsgHandler 都实现了该接口。\",\"public interface BytesEncoderAware { void setBytesEncoder(BytesEncoder bytesEncoder); } \"]},\"112\":{\"h\":\"组件顺序\",\"t\":[\"从 协议入门 和 注解驱动开发 的文档不难看出以下问题：\"]},\"113\":{\"h\":\"请求消息映射的实现\",\"t\":[\"请求消息映射的实现方式：\",\"手动实现并注册 RequestMsgBodyConverter\",\"基于 @Jt808ReqMsgBody 注解方式处理\",\"内置了 AuthRequestMsgBodyConverter\"]},\"114\":{\"h\":\"请求消息的业务处理的实现\",\"t\":[\"请求消息的业务处理实现方式：\",\"手动实现并注册 MsgHandler 接口\",\"基于 @Jt808RequestMsgHandler 注解方式处理\",\"内置了 AuthMsgHandler\"]},\"115\":{\"h\":\"引出的问题\",\"t\":[\"以 将请求消息映射为实体类 的 RequestMsgBodyConverter 为例，假如：\",\"jt808.entity-scan.enable-builtin-entity = true\",\"至少内置了鉴权消息的实体类\",\"自定义并注册了 RequestMsgBodyConverter 的实现类\",\"同时扫描了 @Jt808ReqMsgBody 修饰的请求消息体实体类\",\"？？？\",\"那么此时到底由谁去处理 byte[] -> 请求消息体实体类 的映射功能呢？？？\",\"像处理器链一样逐个往下调用谁能处理就谁处理，否则直接抛到下游？ \",\"实现类多了有点头大，实现也有点麻烦。\",\"所以此处不按这种方式处理\",\"按优先级找一个组件来处理？ \",\"个人认为一种消息由一个组件来处理就够了\",\"如果处理逻辑太复杂，可以在单个组件内调用其他专门的复杂逻辑处理流程\",\"所以此处选择了这种优先级的处理方式，相同功能的组件只会按照优先级注册其仅注册一个\",\"所以提供了一个 io.github.hylexus.jt808.support.OrderedComponent 接口，来处理组件注册时的 优先级(相互覆盖) 问题。\"]},\"116\":{\"h\":\"OrderedComponent\",\"t\":[\"以下是 OrderedComponent 接口的声明：\",\"public interface OrderedComponent { int DEFAULT_ORDER = 0; int ANNOTATION_BASED_DEV_COMPONENT_ORDER = 100; int BUILTIN_COMPONENT_ORDER = 200; default int getOrder() { return DEFAULT_ORDER; } default boolean shouldBeReplacedBy(OrderedComponent other) { // 数字越小优先级越高 // 数字小的覆盖数字大的 return this.getOrder() > other.getOrder(); } } \",\"内置的 OrderedComponent 实现类至少有以下几个：\",\"由以上源码不难看出组件的优先级问题：\",\"相同功能的组件只会 按照优先级注册其仅注册一个 ：\",\"手动实现并注册的 MsgHandler 和 RequestMsgBodyConverter 优先级最高\",\"基于注解实现的 MsgHandler 和 RequestMsgBodyConverter 次之\",\"内置组件的优先级最低\"]},\"117\":{\"h\":\"消息处理流程\"},\"118\":{\"h\":\"组件关系图\",\"t\":[\"组件关系图源文件位于： jt-808.graffle\"]},\"119\":{\"h\":\"时序图\"},\"120\":{\"h\":\"MsgDispatcher\"},\"121\":{\"h\":\"MsgConsumer\"},\"122\":{\"h\":\"异常处理\",\"t\":[\"直接实现 MsgHandler 等接口并 手动注册 的组件的异常处理可以在实现类中自己处理。\",\"基于注解的 MsgHandler 的异常处理可以直接由注解实现。\",\"具体配置请移步 配置文档\"]},\"123\":{\"h\":\"@Jt808RequestMsgHandlerAdvice\",\"t\":[\"类比于 Spring 的 @ControllerAdvice 注解。\",\"@Slf4j @Jt808RequestMsgHandlerAdvice public class BuiltinDefaultExceptionHandler { // ... } \"]},\"124\":{\"h\":\"@Jt808ExceptionHandler\",\"t\":[\"类比于 Spring 的 @ExceptionHandler 注解。\",\"@Slf4j @Jt808RequestMsgHandlerAdvice public class BuiltinDefaultExceptionHandler { @Jt808ExceptionHandler({Throwable.class}) public void processThrowable(Throwable throwable) { log.info(\\\"BuiltinDefaultExceptionHandler :\\\", throwable); } } \",\"传送门\",\"内置的异常处理器位于 BuiltinDefaultExceptionHandler 中。\"]},\"125\":{\"h\":\"注解驱动开发\",\"t\":[\"提示\",\"从客户端接收消息时，字节数组到消息实体类的映射，内部已经 提供并自动注册 了一个叫 ReflectionBasedRequestMsgBodyConverter 的转换器来完成。\",\"所以，对于 常见的报文 可以直接基于注解来完成自动映射，而没必要提供一个 RequestMsgBodyConverter 。\",\"注意：\",\"主动下发消息给客户端时的编码问题，目前只提供了一个最基本的内测版的注解。并且可能在后续版本删除。\",\"所以，本文档暂时不会介绍这部分内容。\",\"提示\",\"本小节主要内容如下：\",\"请求消息映射\",\"消息处理器注册\",\"响应消息映射\",\"消息下发\",\"异常处理\",\"位置上传报文解析示例\"]},\"126\":{\"h\":\"位置上传报文解析示例\",\"t\":[\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\",\"提示\",\"本节将以位置上传报文为例，展示如何基于注解来解析报文。\",\"注意\",\"808文档中定义的位置上传报文有很多字段，但是 许多厂商实现的808协议位置上传报文 只是原始808的一个子集 。\",\"本文举例用到的报文也 不是标准完整的位置上传报文，但是原理都一样。\",\"请谅解本文用到的 被具体厂商精简过的文档 不便全部展示出来，但是关键部分会截图展示，不会影响到你阅读本示例。\"]},\"127\":{\"h\":\"十六进制报文\",\"t\":[\"注意\",\"这个报文格式可能和你使用的有所不同，请加以区分！！！\",\"如何以 十六进制格式 发包请移步 推荐调试工具\",\"7E0200004A76890100562600AD000000000000000201DCF7F6074054C1000000000000200128080934300164310100E10400000030E2020000E306005E019A019AE40B01CC000018A20000480264E5045E04019AE601A2637E \"]},\"128\":{\"h\":\"解析位置基本信息\",\"t\":[\"@Data @Accessors(chain = true) @Jt808ReqMsgBody(msgType = 0x0200) public class LocationUploadMsgBody implements RequestMsgBody { // 报警标志 @BasicField(startIndex = 0, dataType = DWORD) private int alarmFlag; // 状态 @BasicField(startIndex = 4, dataType = DWORD) private int status; // 将上面的 status 字段的第0位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private int accIntStatus; // 将上面的 status 字段的第0位取出转为 boolean 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private Boolean accBooleanStatus; // 0 北纬;1 南纬 // 将上面的 status 字段的第2位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 2) private int latType; // 纬度(尚未除以 10^6) @BasicField(startIndex = 8, dataType = DWORD) private Integer intLat; // 纬度(使用转换器除以10^6转为Double类型) @BasicField(startIndex = 8, dataType = DWORD, customerDataTypeConverterClass = LngLatReqMsgFieldConverter.class) private Double lat; // 经度(尚未除以 10^6) @BasicField(startIndex = 12, dataType = DWORD) private Integer intLng; // 经度(使用转换器除以10^6转为Double类型) @BasicField(startIndex = 12, dataType = DWORD, customerDataTypeConverterClass = LngLatReqMsgFieldConverter.class) private Double lng; // 经度(startIndexMethod使用示例) @BasicField(startIndexMethod = \\\"getLngStartIndex\\\", dataType = DWORD, customerDataTypeConverterClass = LngLatReqMsgFieldConverter.class) private Double lngByStartIndexMethod; public int getLngStartIndex() { log.info(\\\"消息体总长度:{}\\\", this.requestMsgMetadata.getHeader().getMsgBodyLength()); return 12; } // 高度 @BasicField(startIndex = 16, dataType = WORD) private Integer height; // 速度 @BasicField(startIndex = 18, dataType = WORD) private int speed; // 方向 @BasicField(startIndex = 20, dataType = WORD) private Integer direction; // BCD 长度6字节 // 时间 yyMMddHHmmss // 200128080934 '2020-01-28 08:09:34' @BasicField(startIndex = 22, dataType = BCD, length = 6) private String time; } \",\"通过以下截图，可能会对映射关系更清晰一些：\"]},\"129\":{\"h\":\"关于status字段的解析\",\"t\":[\"status字段是由消息体中第4~7个字节表示的，类型为 DWORD。对应到Java中为 无符号四字节整型 。你可以将其映射为 int 或 Integer 。\",\"所以至少有以下几种解析方式：\"]},\"130\":{\"h\":\"1.手动解析\",\"t\":[\"@BasicField(startIndex = 4, dataType = BYTES, length = 4) private byte[] statusBytes; \",\"代码段中的 statusBytes 就是消息体中第4~7个字节，然后你可以将字节数组手动转换到 int 。\",\"int status = IntBitOps.intFrom4Bytes(statusBytes); \",\"之后，你可以根据文档中表17的定义将 int 中对应的 bit 提取出来。\",\"// status的第0位-->Acc开关 --> 0:关; 1:开 int accStatus = Numbers.getBitAt(status, 0); // status的第3位 --> 0:东经; 1:西经 int lngType = Numbers.getBitAt(status, 3); \"]},\"131\":{\"h\":\"2.使用@SlicedFrom解析\",\"t\":[\"// 消息体中第4~7个字节 --> int @BasicField(startIndex = 4, dataType = DWORD) private int status; // 将上面的 status 字段的第0位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private int accIntStatus; // 将上面的 status 字段的第0位取出转为 boolean 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private Boolean accBooleanStatus; // 0 北纬;1 南纬 // 将上面的 status 字段的第2位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 2) private int latType; \"]},\"132\":{\"h\":\"3.使用@SplittableField解析\",\"t\":[\"@Jt808ReqMsgBody(msgType = 0x0200) public class LocationUploadMsgBody implements RequestMsgBody { // 状态 @BasicField(startIndex = 4, dataType = DWORD) // 将status字段拆分之后放入statusInfo字段 // 该注解只能用户数字 @SplittableField(splitPropertyValueIntoNestedBeanField = \\\"statusInfo\\\") private int status; private LocationUploadStatus statusInfo; @Data public static class LocationUploadStatus { @SplittableField.BitAt(bitIndex = 0) private boolean accStatus; // acc开? @SplittableField.BitAt(bitIndex = 1) private int bit1; //1:定位, 0:未定义 @SplittableField.BitAt(bitIndex = 2) private Boolean isSouthLat;// 是否南纬? @SplittableField.BitAt(bitIndex = 3) private Integer lngType; // 将第0位和第1位同时取出并转为int // 在此处无实际意义,只是演示可以这么使用 @SplittableField.BitAtRange(startIndex = 0, endIndex = 1) private int bit0to1; } } \"]},\"133\":{\"h\":\"关于经纬度的解析\",\"t\":[\"808文档中的经纬度定义为 DWORD 类型，以度位单位的纬度值 乘以10的6次方 ，精确到百万分之一度\"]},\"134\":{\"h\":\"1. 解析为4字节的int\",\"t\":[\"// 纬度(尚未除以 10^6) @BasicField(startIndex = 8, dataType = DWORD) private Integer intLat; \",\"本示例中结果为 31258614。\",\"也就是说，接收到的字节数组中的表示经纬度的 4个字节 应该先转换为数字(int即可)，然后再 除以10^6 即为真实的经纬度，可以用 Double 表示。\"]},\"135\":{\"h\":\"2. 解析为double\",\"t\":[\"提示\",\"但是，本框架并不支持直接从 byte[] 到 double 的转换。此时可以使用自定义的类型转换器。\",\"自定义转换器\",\"public class LngLatReqMsgFieldConverter implements ReqMsgFieldConverter<Double> { @Override public Double convert(byte[] bytes, byte[] subSeq) { return IntBitOps.intFromBytes(subSeq, 0, subSeq.length) * 1.0 / 100_0000; } } \",\"然后指定 customerDataTypeConverterClass 即可\",\"// 纬度(使用转换器除以10^6转为Double类型) @BasicField(startIndex = 8, dataType = DWORD, customerDataTypeConverterClass = LngLatReqMsgFieldConverter.class) private Double lat; \"]},\"136\":{\"h\":\"关于位置附加项的解析\",\"t\":[\"根据文档，从消息体的 第28个字节开始 就是附加项列表了。\",\"还好附加项报文的格式也是有迹可循的：\",\"整体是一个 List 结构，暂且将 List 的每一个元素称之为 Item\",\"每个 Item 内部结构也是一致的 \",\"Id (byte)\",\"length (byte)\",\"content (类型不固定)\",\"但是如果将这个附加项解析为一个 List 的话 \",\"个人感觉取值不是很方便，另外如果附加项内部有嵌套的时候也不好处理\",\"所以额外提供了一个 @ExtraField 注解来映射为一个可嵌套的实体\",\"有得必有失，这样一来，有多少个附加项就要定义多少个字段，比较繁琐\"]},\"137\":{\"h\":\"使用@BasicField解析\",\"t\":[\"由于附加项的类型不固定，仅仅用一个类是无法定义确切类型。 所以，此处的内容自动定义成了byte[]。\",\"@Data public class ExtraInfoItem { @BasicField(startIndex = 0, dataType = BYTE) private Integer id; @BasicField(order = 1, startIndex = 1, dataType = BYTE) private Integer length; // 类型不固定 仅仅用一个类无法定义确切类型 @BasicField(order = 2, startIndex = 2, dataType = BYTES, byteCountMethod = \\\"getLength\\\") private byte[] rawBytes; } \",\"@BasicField(startIndex = 28,byteCountMethod = \\\"getExtraInfoLength\\\",dataType = LIST) private List<ExtraInfoItem> extraInfoItemList; \"]},\"138\":{\"h\":\"使用@ExtraField解析\",\"t\":[\"@Data // 切记@ExtraMsgBody注解不能丢 @ExtraMsgBody( byteCountOfMsgId = 1, // 消息Id用1个字节表示 byteCountOfContentLength = 1 // 附加项长度字段用1个字节表示 ) public class ExtraInfo { @ExtraField.NestedFieldMapping(msgId = 0x30, dataType = BYTE) private int field0x30; // 这里写成List仅仅为了示例，在msgId重复时可以使用List类型 @ExtraField.NestedFieldMapping(msgId = 0x0001, dataType = LIST, itemDataType = DWORD) private List<Integer> field0x0001; @ExtraField.NestedFieldMapping(msgId = 0x31, dataType = BYTE) private int field0x31; @ExtraField.NestedFieldMapping(msgId = 0xe1, dataType = DWORD) private int field0xe1; @ExtraField.NestedFieldMapping(msgId = 0xE4, dataType = BYTES) private byte[] field0xe4; @ExtraField.NestedFieldMapping(msgId = 0xE5, dataType = DWORD) private int field0xe5; @ExtraField.NestedFieldMapping(msgId = 0xE6, dataType = BYTE) private byte field0xe6; } \",\"0xE2 锁状态字段的说明\",\"提示\",\"示例文档中并没涉及到附加项嵌套的情况，但是这种情况在原始808文档中确实是存在的。\",\"如果有嵌套的附加项，可以用类似如下的方式去嵌套解析：\",\"@ExtraField.NestedFieldMapping(msgId = xx, isNestedExtraField = true) private SomeClass nestedField; \",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\"]},\"139\":{\"h\":\"消息处理器注册\",\"t\":[\"传送门\",\"本小节的示例代码可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\",\"点击这里了解 MsgHandler 的作用。\"]},\"140\":{\"h\":\"@Jt808RequestMsgHandler\",\"t\":[\"该注解类似于 SpringMVC 的 @Controller。\",\"@Jt808RequestMsgHandler 只能标注于 类 上，表示该类中存在 MsgHandler 方法。\",\"@Jt808RequestMsgHandler public class CommonHandler { // ... } \"]},\"141\":{\"h\":\"@Jt808RequestMsgHandlerMapping\",\"t\":[\"该注解类似于 SpringMVC 的 @RequestMapping。\",\"@Jt808RequestMsgHandlerMapping 只能标注于 方法 上，表示被注解的方法是一个 MsgHandler 方法。\",\"从逻辑上来理解，被其注解的方法相当于一个实现了 MsgHandler 接口的处理器类。\",\"@Slf4j @Jt808RequestMsgHandler public class CommonHandler { // 处理MsgId为0x0200的消息 @Jt808RequestMsgHandlerMapping(msgType = 0x0200) public RespMsgBody processLocationMsg( Jt808Session session, RequestMsgMetadata metadata, RequestMsgHeader header, LocationUploadMsgBody msgBody) { assert header.getMsgId() == BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD.getMsgId(); assert session.getTerminalId().equals(header.getTerminalId()); assert session.getTerminalId().equals(metadata.getHeader().getTerminalId()); assert metadata.getHeader() == header; log.info(\\\"处理位置上报消息 terminalId = {}, msgBody = {}\\\", header.getTerminalId(), msgBody); return CommonReplyMsgBody.success(header.getFlowId(), BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD); } } \"]},\"142\":{\"h\":\"参数自动注入\",\"t\":[\"类似于 SpringMVC 的处理器参数注入，用 @Jt808RequestMsgHandlerMapping 注解的方法支持参数自动注入。\",\"目前支持自动注入的参数类型如下：\",\"RequestMsgBody\",\"RequestMsgHeader\",\"RequestMsgMetadata\",\"Jt808Session\",\"底层由 HandlerMethodArgumentResolver 来完成注入。 所有支持的参数解析器都委托给了 DelegateHandlerMethodArgumentResolvers。\",\"public class DelegateHandlerMethodArgumentResolvers implements HandlerMethodArgumentResolver { // ... static void addDefaultHandlerMethodArgumentResolver(DelegateHandlerMethodArgumentResolvers resolvers) { resolvers.addResolver(new RequestMsgBodyArgumentResolver()); resolvers.addResolver(new RequestMsgHeaderArgumentResolver()); resolvers.addResolver(new RequestMsgMetadataArgumentResolver()); resolvers.addResolver(new SessionArgumentResolver()); resolvers.addResolver(new ExceptionArgumentResolver()); } public DelegateHandlerMethodArgumentResolvers() { addDefaultHandlerMethodArgumentResolver(this); } // ... } \"]},\"143\":{\"h\":\"MsgHandler注入到Spring容器\",\"t\":[\"从 1.0.4-RELEASE 开始，支持将 MsgHandler 交给Spring来管理，以便于在 MsgHandler 中使用Spring容器的其他bean。\",\"使用方法也很简单，给你的 MsgHandler 加一个 @Component 注解即可。\",\"传送门\",\"本小节的示例代码可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\",\"点击这里了解 MsgHandler 的作用。\"]},\"144\":{\"h\":\"消息下发\",\"t\":[\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\",\"提示\",\"本小节将介绍如何主动下发消息给终端。\"]},\"145\":{\"h\":\"1. 手动下发\",\"t\":[\"@Component public class SomeController { @Autowired private Jt808SessionManager sessionManager; public void sendDataToClient(String terminalId) { // 通过终端id获取Session final Optional<Jt808Session> sessionInfo = sessionManager.findByTerminalId(terminalId); if (!sessionInfo.isPresent()) { throw new JtSessionNotFoundException(\\\"session not found with terminalId \\\" + terminalId); } try { // 通过Session发送数据 sessionInfo.get().sendMsgToClient(Unpooled.copiedBuffer(\\\"data will be sent to client\\\".getBytes())); } catch (InterruptedException e) { e.printStackTrace(); } } } \",\"警告\",\"手动发送的数据，需要手动拼装为符合808协议格式的报文，并手动转义。\",\"所以内置了一个CommandSender来自动转换为符合808协议格式的报文并发送给客户端。\"]},\"146\":{\"h\":\"2. 使用CommandSender下发\"},\"147\":{\"h\":\"实现原理\",\"t\":[\"TODO 这里缺一个图，暂时没时间画了…………\"]},\"148\":{\"h\":\"示例\",\"t\":[\"@Slf4j @RestController @RequestMapping(\\\"/demo\\\") public class SampleController { @Autowired private CommandSender commandSender; @GetMapping(\\\"/send-msg\\\") public Object sendMsg( @RequestParam(required = false, name = \\\"terminalId\\\", defaultValue = \\\"13717861955\\\") String terminalId, @RequestParam(required = false, name = \\\"timeout\\\", defaultValue = \\\"5\\\") Long timeout) throws Exception { RespTerminalSettings param = new RespTerminalSettings(); List<RespTerminalSettings.ParamItem> paramList = Lists.newArrayList( new RespTerminalSettings.ParamItem(0x0029, DwordBytesValueWrapper.of(100)) ); param.setParamList(paramList); param.setTotalParamCount(paramList.size()); // 【下发消息】的消息类型为: RESP_TERMINAL_PARAM_SETTINGS (0x8103) --> RespTerminalSettings的类注解上指定了下发类型 // 客户端对该【下发消息】的回复消息类型为: CLIENT_COMMON_REPLY (0x0001) CommandMsg commandMsg = CommandMsg.of(terminalId, CLIENT_COMMON_REPLY, param); final Object resp = commandSender.sendCommandAndWaitingForReply(commandMsg, timeout, TimeUnit.SECONDS); log.info(\\\"resp: {}\\\", resp); return resp; } } \",\"@Data @Accessors(chain = true) @Jt808RespMsgBody(respMsgId = 0x8103, desc = \\\"设置终端参数\\\") public class RespTerminalSettings { @CommandField(order = 2) private List<ParamItem> paramList; @CommandField(order = 1, targetMsgDataType = BYTE) private int totalParamCount; @Data @Accessors(chain = true) @SuppressWarnings(\\\"rawtypes\\\") public static class ParamItem { @CommandField(order = 1, targetMsgDataType = DWORD) private int msgId; @CommandField(order = 2, targetMsgDataType = BYTE) private int bytesCountOfContentLength; @CommandField(order = 3) private BytesValueWrapper msgContent; public ParamItem(int msgId, BytesValueWrapper msgContent) { this.msgId = msgId; this.msgContent = msgContent; this.bytesCountOfContentLength = msgContent.getAsBytes().length; } } } \",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-annotation 下找到对应代码。\"]},\"149\":{\"h\":\"请求消息映射\"},\"150\":{\"h\":\"@Jt808ReqMsgBody\",\"t\":[\"该注解只能标记于 请求消息体实体类 上。\",\"注意\",\"目前为止，请求消息体实体类 必须实现标记接口 RequestMsgBody 。\",\"类似于 Hibernate 和 MyBatis 中的 @Table 注解。\",\"属性\",\"解释\",\"取值示例\",\"msgType\",\"808报文类型，消息Id\",\"0x0200\",\"@Data @Accessors(chain = true) @Jt808ReqMsgBody(msgType = 0x0200) public class LocationUploadMsgBody implements RequestMsgBody { // ... } \"]},\"151\":{\"h\":\"@BasicField\",\"t\":[\"只能标记于字段上。类比于Hibernate 或 MyBatis 中的 @Column、@Basic。\",\"属性\",\"解释\",\"取值示例\",\"startIndex\",\"起始字节索引\",\"0、4、12\",\"startIndexMethod\",\"作用和startIndex相同，当startIndex无法直接指定时可根据该属性定义的方法名返回字节数\",\"\\\"getLength\\\"\",\"dataType\",\"数据类型\",\"WORD、DWORD\",\"length\",\"长度，字节数\",\"4、6\",\"byteCountMethod\",\"作用和length相同，当length无法直接指定时可根据该属性定义的方法名返回字节数\",\"\\\"getLength\\\"\",\"customerDataTypeConverterClass\",\"自定义的类型转换器\",\"@BasicField(startIndex = 4, dataType = BYTES, length = 4) private byte[] statusBytes; @BasicField(startIndex = 4, dataType = BYTES, byteCountMethod = 'getLength') private byte[] statusBytes1; public int getLength() { return 4; } \"]},\"152\":{\"h\":\"@SplittableField\",\"t\":[\"将被修饰的字段拆分之后赋值给另一个bean。\",\"注意\",\"该注解目前仅仅适用于 int 、 short 、 byte 类型的字段。\",\"属性\",\"解释\",\"取值示例\",\"splitPropertyValueIntoNestedBeanField\",\"目标属性\",\"用法请参考示例。\"]},\"153\":{\"h\":\"@SlicedFrom\",\"t\":[\"注意\",\"该注解目前仅仅适用于 int 、 short 、 byte 类型的字段。\",\"属性\",\"解释\",\"取值示例\",\"sourceFieldName\",\"源字段名\",\"bitIndex\",\"源字段中的第几个bit\",\"0\",\"startBitIndex\",\"源字段中的起始bit索引\",\"1\",\"endBitIndex\",\"源字段中的终止bit索引\",\"2\",\"用法请参考示例。\"]},\"154\":{\"h\":\"@ExtraField&@ExtraMsgBody\",\"t\":[\"@ExtraField\",\"适用于类似位置附加消息的结构。\",\"属性\",\"解释\",\"取值示例\",\"startIndex\",\"起始字节索引\",\"28\",\"length\",\"字节数\",\"20\",\"byteCountMethod\",\"作用和length相同，当length无法直接指定时可根据该属性定义的方法名返回字节数\",\"aFieldName\",\"byteCountOfMsgId\",\"消息ID占用几个字节\",\"1\",\"byteCountOfContentLength\",\"表示消息长度的字段占用几个字节\",\"1\",\"@ExtraMsgBody\",\"用于嵌套的附加信息实体类。\",\"属性\",\"解释\",\"取值示例\",\"byteCountOfMsgId\",\"消息ID占用几个字节\",\"1\",\"byteCountOfContentLength\",\"表示消息长度的字段占用几个字节\",\"1\",\"用法请参考示例。\"]},\"155\":{\"h\":\"响应消息映射\",\"t\":[\"本节内容是 基于注解的消息处理器 的后续内容。\",\"所以本小节所说的 基于注解的响应消息映射 都是基于 基于注解的消息处理器 而言的，像下面这种处理方式：\",\"@Slf4j @Jt808RequestMsgHandler public class CommonHandler { @Jt808RequestMsgHandlerMapping(msgType = 0x0102) public RespMsgBody processAuthMsg(AuthRequestMsgBody msgBody, RequestMsgHeader header) { log.info(\\\"处理鉴权消息 terminalId = {}, authCode = {}\\\", header.getTerminalId(), msgBody.getAuthCode()); return CommonReplyMsgBody.success(header.getFlowId(), BuiltinJt808MsgType.CLIENT_AUTH); } } \"]},\"156\":{\"h\":\"直接返回RespMsgBody\",\"t\":[\"对于这种直接返回 RespMsgBody 的 MsgHandler，其实转换逻辑已经在 RespMsgBody.toBytes() 里实现了。\",\"常用的 服务端通用应答消息，可以用内置的 CommonReplyMsgBody 来表示。此处不再赘述。\",\"@Data @Accessors(chain = true) public class CommonReplyMsgBody implements RespMsgBody { // 1. 应答流水号 WORD terminal flowId private int replyFlowId; // 2. 应答id WORD 0x0102 ... private int replyMsgId; // 3. 结果 byte 0:成功/确认;1:失败;2:消息有误;3:不支持 private final byte result = SUCCESS; private CommonReplyMsgBody() { } public static CommonReplyMsgBody success(int replyFlowId, MsgType replyFor) { return of(SUCCESS, replyFlowId, replyFor); } public static CommonReplyMsgBody of(byte result, int replyFlowId, MsgType replyFor) { return new CommonReplyMsgBody() .setResult(result) .setReplyFlowId(replyFlowId) .setReplyMsgId(replyFor.getMsgId()); } @Override public byte[] toBytes() { return Bytes.concatAll( IntBitOps.intTo2Bytes(this.getReplyFlowId()), IntBitOps.intTo2Bytes(this.getReplyMsgId()), new byte[]{this.getResult()} ); } @Override public MsgType replyMsgType() { return BuiltinJt808MsgType.SERVER_COMMON_REPLY; } } \"]},\"157\":{\"h\":\"不给客户端回复数据\",\"t\":[\"以下情况不会发送数据给客户端：\",\"手动实现的 MsgHandler\",\"返回 Optional.empty()\",\"基于 @Jt808RequestMsgHandlerMapping 实现的 MsgHandler\",\"方法返回类型为 void\",\"方法返回值为 VoidRespMsgBody.NO_DATA_WILL_BE_SENT_TO_CLIENT\"]},\"158\":{\"h\":\"@Jt808RespMsgBody\",\"t\":[\"MsgHandler 除了直接返回 RespMsgBody 外，还可以返回 被 @Jt808RespMsgBody 标记的实体类。\"]},\"159\":{\"h\":\"示例代码\",\"t\":[\"以下为终端通用应答的示例代码：\",\"@Value // MsgId 0x8001 @Jt808RespMsgBody(respMsgId = 0x8001) public class ServerCommonReplyMsgBody { // 1. [0-1] 应答流水号 WORD terminal flowId @CommandField(order = 0, targetMsgDataType = WORD) int replyFlowId; // 2. [2-3] 应答id WORD 0x0102 ... @CommandField(order = 1, targetMsgDataType = WORD) int replyMsgId; // 3. [4] 结果 byte 0:成功/确认;1:失败;2:消息有误;3:不支持 @CommandField(order = 2, targetMsgDataType = BYTE) byte result; } \",\"以下为对应的Handler返回\",\"@Slf4j @Jt808RequestMsgHandler public class CommonHandler { @Jt808RequestMsgHandlerMapping(msgType = 0x0200) public ServerCommonReplyMsgBody processLocationMsg( Session session, RequestMsgMetadata metadata, RequestMsgHeader header, LocationUploadRequestMsgBody msgBody) { assert header.getMsgId() == BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD.getMsgId(); assert session.getTerminalId().equals(header.getTerminalId()); assert session.getTerminalId().equals(metadata.getHeader().getTerminalId()); assert metadata.getHeader() == header; log.info(\\\"处理位置上报消息 terminalId = {}, msgBody = {}\\\", header.getTerminalId(), msgBody); // return CommonReplyMsgBody.success(header.getFlowId(), BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD); return new ServerCommonReplyMsgBody(header.getFlowId(), CLIENT_LOCATION_INFO_UPLOAD.getMsgId(), (byte) 0); } } \"]},\"160\":{\"h\":\"属性解释\",\"t\":[\"属性\",\"解释\",\"取值示例\",\"respMsgId\",\"服务端下发消息的 MsgId\",\"0x8001\",\"desc\",\"描述\"]},\"161\":{\"h\":\"@CommandField\",\"t\":[\"属性\",\"解释\",\"取值示例\",\"order\",\"字节顺序，值越小越先编码\",\"-1、0、2\",\"targetMsgDataType\",\"数据类型\",\"DWORD\",\"isNestedCommandField\",\"是否是嵌套类型，true 表示被修饰的字段类型是一个 @CommandField 嵌套的类型\",\"默认值: false\",\"customerDataTypeConverterClass\",\"客户自定义给字段的编码实现\"]},\"162\":{\"h\":\"AuthValidator\",\"t\":[\"注意\",\"该组件 当且仅当 你使用了内置的 AuthMsgHandler 来处理 鉴权消息 时才有效。\",\"如果你覆盖了/未启用内置的 AuthMsgHandler，那么你也 不用 提供 AuthCodeValidator。因为此时的鉴权逻辑已经完全交由你自定的 AuthMsgHandler 来处理了。\",\"比较鸡肋的一个内置组件，不过用来 Quick-Start 还是很方便的🤣。\",\"@Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public AuthCodeValidator supplyAuthCodeValidator() { return (session, requestMsgMetadata, authRequestMsgBody) -> { final String terminalId = session.getTerminalId(); final String authCode = authRequestMsgBody.getAuthCode(); // 从其他服务验证鉴权码是否正确 boolean success = clientService.isAuthCodeValid(terminalId, authCode); log.info(\\\"AuthCode validate for terminal : {} with authCode : {}, result: {}\\\", terminalId, authCode, success); return success; }; } } \",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-customized 下找到对应代码。\"]},\"163\":{\"h\":\"转义相关\",\"t\":[\"提示\",\"每个硬件厂商实现808协议的时候对转义的处理可能略有不同。\",\"如果内置的转义逻辑不符合要求，可以自己实现 BytesEncoder 接口实现转义逻辑。\",\"之后覆盖内置的处理逻辑即可。\",\"@Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public BytesEncoder supplyBytesEncoder() { return new BytesEncoder() { @Override public byte[] doEscapeForReceive(byte[] bytes, int start, int end) throws MsgEscapeException { return ...; } @Override public byte[] doEscapeForSend(byte[] bytes, int start, int end) throws MsgEscapeException { return ...; } }; } } \",\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"164\":{\"h\":\"定制\",\"t\":[\"提示\",\"从 1.0.7-RELEASE 开始，几乎所有的自定义的配置都需要继承配置类 io.github.hylexus.jt808.boot.config.Jt808ServerConfigurationSupport\",\"并且不再支持使用 io.github.hylexus.jt808.support.netty.Jt808ServerConfigure 配置（容易导致Bean之间的循环依赖）\",\"可以通过如下代码片段的方式来自定义组件：\",\" @Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { // TODO 重写配置方法或覆盖父类的Bean } \",\"提示\",\"本小节主要内容如下：\",\"Session相关配置\",\"Netty相关配置\",\"转义相关配置\",\"消息类型配置\",\"消息转换器配置\",\"消息处理器配置\",\"TerminalValidator\",\"AuthValidator\"]},\"165\":{\"h\":\"报文构建器\",\"t\":[\"import io.github.hylexus.jt.config.JtProtocolConstant; import io.github.hylexus.jt.data.msg.BuiltinJt808MsgType; import io.github.hylexus.jt.utils.HexStringUtils; import org.junit.Test; import java.nio.charset.Charset; public class Jt808MsgBuilderTest { private static final Charset CHARSET = JtProtocolConstant.JT_808_STRING_ENCODING; @Test public void builder() { final Jt808MsgBuilder builder = Jt808MsgBuilder.builder() // 消息头 .header(msgHeaderSpecBuilder -> msgHeaderSpecBuilder // 消息ID .withMsgId(BuiltinJt808MsgType.CLIENT_REGISTER) // 消息体属性(消息体长度自动计算) .withMsgBodyPropsSpec(msgBodyPropsSpecBuilder -> msgBodyPropsSpecBuilder .withEncryptionType(0b000) .withSubPackage(false) .withReversedBit14AndBit15(0) .build() ) // 终端ID .withTerminalId(\\\"13912344321\\\") // 流水号 .withFlowId(123) .build() ) // 消息体 .body(msgBodyBuilder -> msgBodyBuilder .appendWord(11) //省域 ID [WORD] .appendWord(0)// 市县域 ID [WORD] .appendBytes(\\\"12359\\\".getBytes(CHARSET)) // 制造商 ID [BYTE[5]] .appendBytes(\\\"12345678901234567890\\\".getBytes(CHARSET)) // 终端型号 [BYTE[20]] .appendBytes(\\\"id12345\\\".getBytes(CHARSET)) // 终端 ID [BYTE[7]] .appendByte(1) // 车牌颜色 [BYTE] .appendString(\\\"13160466666\\\") .build() ); System.out.println(HexStringUtils.bytes2HexString(builder.build(true))); System.out.println(HexStringUtils.bytes2HexString(builder.build(false))); } @Test public void testBuildQueryTerminalProperties() { final byte[] bytes = Jt808MsgBuilder.builder() .header(jt808MsgHeaderBuilder -> jt808MsgHeaderBuilder .withMsgId(0x0107) .withMsgBodyPropsSpec(msgBodyPropsSpecBuilder -> msgBodyPropsSpecBuilder .withEncryptionType(0b000) .withSubPackage(false) .withReversedBit14AndBit15(0) .build() ) .withTerminalId(\\\"13912344321\\\") .withFlowId(1) .build() ) .body(messageBuilder -> messageBuilder .appendWord(1) .appendBytes(\\\"12345\\\".getBytes(CHARSET)) .build() ) .build(); System.out.println(HexStringUtils.bytes2HexString(bytes)); } } \"]},\"166\":{\"h\":\"消息转换器\",\"t\":[\"RequestMsgBodyConverter 负责将客户端请求中的 byte[] 转换为 请求消息体实体类 以方便使用。\"]},\"167\":{\"h\":\"手动实现并注册\",\"t\":[\"RequestMsgBodyConverter\",\"自定义的消息体解析器 必须 实现 RequestMsgBodyConverter 这个泛型接口\",\"当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以 参考这里 使用 基于注解 的方式来实现 RequestMsgBodyConverter 的功能。\",\"以下为示例性的解析位置消息的 RequestMsgBodyConverter\",\"public class LocationUploadMsgBodyConverter2 implements RequestMsgBodyConverter<LocationUploadMsgBody> { @Override public Optional<LocationUploadMsgBody> convert2Entity(RequestMsgMetadata metadata) { byte[] bytes = metadata.getBodyBytes(); LocationUploadMsgBody body = new LocationUploadMsgBody(); body.setWarningFlag(intFromBytes(bytes, 0, 4)); body.setStatus(intFromBytes(bytes, 4, 4)); body.setLat(intFromBytes(bytes, 8, 4) * 1.0 / 100_0000); body.setLng(intFromBytes(bytes, 12, 4) * 1.0 / 100_0000); body.setHeight((short) intFromBytes(bytes, 16, 2)); body.setSpeed((short) intFromBytes(bytes, 18, 2)); body.setDirection((short) intFromBytes(bytes, 20, 2)); body.setTime(BcdOps.bytes2BcdString(bytes, 22, 6)); return Optional.of(body); } } \",\"注册自定义 RequestMsgBodyConverter\",\"@Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public void configureMsgConverterMapping(MsgConverterMapping mapping) { super.configureMsgConverterMapping(mapping); // 手动将自定义处理器注册到 MsgConverterMapping mapping.registerConverter(Jt808MsgType.CLIENT_LOCATION_INFO_UPLOAD, new LocationUploadMsgBodyConverter2()); } } \"]},\"168\":{\"h\":\"基于注解实现\",\"t\":[\"传送门\",\"基于注解来实现 RequestMsgBodyConverter 的功能 请移步这里\",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-customized 下找到对应代码。\"]},\"169\":{\"h\":\"消息处理器\",\"t\":[\"MsgHandler 负责处理经过 RequestMsgBodyConverter 转换之后的 请求体消息实体类。\",\"对于请求消息的处理完全是由 MsgHandler 接口来实现的。\",\"public interface MsgHandler<T extends RequestMsgBody> extends OrderedComponent { default Set<MsgType> getSupportedMsgTypes() { return Sets.newHashSet(); } void handleMsg(RequestMsgMetadata metadata, T body, Session session) throws IOException, InterruptedException; } \",\"MsgHandler\",\"自定义的消息处理器 必须 实现 MsgHandler 这个泛型接口\",\"当然，这种实现接口并手动注册的方式显得非常繁琐，你完全可以 参考这里 使用 基于注解 的方式来实现 MsgHandler 的功能。\",\"消息处理完成后对客户端的响应也是一个 byte[] ，可以通过 handleMsg() 方法的 Session 参数中拿到 Netty 的 Channel，然后通过 Channel 发送给客户端。\"]},\"170\":{\"h\":\"手动实现并注册\"},\"171\":{\"h\":\"实现\",\"t\":[\"所以一般的消息处理步骤应该像下面这样：\",\"@Slf4j public class SampleMsgHandler implements MsgHandler<AuthRequestMsgBody> { byte SUCCESS = 0; byte AUTH_CODE_ERROR = 2; @Override public Set<MsgType> getSupportedMsgTypes() { return Collections.singleton(BuiltinJt808MsgType.CLIENT_AUTH); } @Override public void handleMsg(RequestMsgMetadata metadata, AuthRequestMsgBody body, Session session) throws IOException, InterruptedException { final String authCode = body.getAuthCode(); // 鉴权逻辑 final byte result = isValidAuthCode(authCode, session.getTerminalId()) ? SUCCESS : AUTH_CODE_ERROR; // 组装响应消息的字节数组(别忘了转义) final byte[] respMsgBody = this.encodeMsgBody(result, metadata, session); // 发送给客户端 this.send2Client(session.getChannel(), respMsgBody); } private byte[] encodeMsgBody(byte result, RequestMsgMetadata metadata, Session session) { // ... // 按文档格式组装字节数组 return new byte[0]; } private boolean isValidAuthCode(String authCode, String terminalId) { // ... // 具体鉴权逻辑 return true; } protected void send2Client(Channel channel, byte[] bytes) throws InterruptedException { final ChannelFuture future = channel.writeAndFlush(Unpooled.copiedBuffer(bytes)).sync(); if (!future.isSuccess()) { log.error(\\\"ERROR : 'send data to client:'\\\", future.cause()); } } } \",\"又或者像这样 \",\"继承 AbstractMsgHandler\",\"这里的 RespMsgBody.toBytes() 不用转义\",\"@Slf4j @BuiltinComponent public class AuthMsgHandler extends AbstractMsgHandler<AuthRequestMsgBody> { @Override public Set<MsgType> getSupportedMsgTypes() { return newHashSet(BuiltinJt808MsgType.CLIENT_AUTH); } @Override protected Optional<RespMsgBody> doProcess(RequestMsgMetadata metadata, AuthRequestMsgBody body, Session session) { log.debug(\\\"receive AuthMsg : {}\\\", body); boolean valid = authCodeValidator.validateAuthCode(session, metadata, body); if (valid) { return of(commonSuccessReply(metadata, BuiltinJt808MsgType.CLIENT_AUTH)); } return of(CommonReplyMsgBody.of(AUTH_CODE_ERROR, metadata.getHeader().getFlowId(), BuiltinJt808MsgType.CLIENT_AUTH)); } } \",\"以下为示例性的处理位置消息的 MsgHandler\",\"@Slf4j public class LocationInfoUploadMsgHandler extends AbstractMsgHandler<LocationUploadMsgBody> { @Override protected Optional<RespMsgBody> doProcess(RequestMsgMetadata metadata, LocationUploadMsgBody body, Session session) { log.info(\\\"{}\\\", body); return Optional.of(commonSuccessReply(metadata, BuiltinJt808MsgType.CLIENT_LOCATION_INFO_UPLOAD)); } } \"]},\"172\":{\"h\":\"注册自定义MsgHandler\",\"t\":[\"public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public void configureMsgHandlerMapping(MsgHandlerMapping mapping) { super.configureMsgHandlerMapping(mapping); // 如果你在这里注册了自定义的鉴权消息处理器，那么AuthCodeValidator也无需提供了 // 此处也可以从Spring容器中获取bean来注入，不一定要手动new一个Handler注册 mapping.registerConverter(Jt808MsgType.CLIENT_LOCATION_INFO_UPLOAD, new LocationInfoUploadMsgHandler()); } } \"]},\"173\":{\"h\":\"基于注解实现\",\"t\":[\"传送门\",\"基于注解来实现MsgHandler的功能 请移步这里\",\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"174\":{\"h\":\"消息类型\",\"t\":[\"提示\",\"各个厂商对808协议都是选择性的实现，同时还有自定义的消息类型。\",\"所以，并没有内置所有类型的消息，而是定义了一个 MsgType 接口以供用户自行扩展。\",\"建议实现接口的时候使用枚举\"]},\"175\":{\"h\":\"扩展MsgType\",\"t\":[\"@Getter @ToString public enum Jt808MsgType implements MsgType { CLIENT_AUTH(0x0102, \\\"终端鉴权\\\"), CLIENT_LOCATION_INFO_UPLOAD(0x0200, \\\"位置上报\\\"), ; private final int msgId; private final String desc; Jt808MsgType(int msgId, String desc) { this.msgId = msgId; this.desc = desc; } private static final Map<Integer, Jt808MsgType> mapping = new HashMap<>(values().length); static { for (Jt808MsgType type : values()) { mapping.put(type.msgId, type); } } @Override public Optional<MsgType> parseFromInt(int msgId) { return Optional.ofNullable(mapping.get(msgId)); } } \"]},\"176\":{\"h\":\"定制MsgTypeParser\",\"t\":[\"注意\",\"MsgTypeParser 的返回类型为 java.util.Optional<MsgType> 。\",\"即便是无法处理的消息也不要返回 null 而应该以 Optional.empty() 代替。\",\"此时会跳过这种未知类型的消息处理，并会在日志里打印 warn 级别的日志。\",\"@Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public MsgTypeParser supplyMsgTypeParser() { return msgType -> { // 先使用自定义解析器 Optional<MsgType> type = Jt808MsgType.CLIENT_AUTH.parseFromInt(msgType); return type.isPresent() ? type // 自定义解析器无法解析,使用内置解析器 : BuiltinJt808MsgType.CLIENT_AUTH.parseFromInt(msgType); }; } } \",\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"177\":{\"h\":\"Netty相关\",\"t\":[\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\",\"Netty相关配置需要继承 Jt808ServerConfigurationSupport 来覆盖默认逻辑。\",\"@Configuration public class Jt808Config extends Jt808ServerConfigurationSupport { @Override public Jt808ServerNettyConfigure jt808ServerNettyConfigure(HeatBeatHandler heatBeatHandler, Jt808ChannelHandlerAdapter jt808ChannelHandlerAdapter) { return new DemoJt808ServerNettyConfigure(heatBeatHandler, jt808ChannelHandlerAdapter); } } \",\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"178\":{\"h\":\"Session相关\",\"t\":[\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"179\":{\"h\":\"Jt808SessionManager\",\"t\":[\"该组件用来管理每个终端的 TCP 连接。\",\"要定制 Jt808SessionManager 只需自己声明一个 Jt808SessionManager 类型的Bean即可。\",\"public class MySessionManager implements Jt808SessionManager { // ...... } \",\"@Configuration public class CustomizedDemoJt808Config extends Jt808ServerConfigurationSupport { @Override public Jt808SessionManager supplyJt808SessionManager() { return MySessionManager.getInstance(); } } \"]},\"180\":{\"h\":\"Jt808SessionManagerEventListener\",\"t\":[\"该组件可以监听 Jt808Session 的 添加、移除、关闭 事件。\",\"@Slf4j public class MyJt808SessionManagerEventListener implements Jt808SessionManagerEventListener { @Override public void onSessionAdd(@Nullable Jt808Session session) { if (session == null) { return; } log.info(\\\"[SessionAdd] terminalId = {}, sessionId = {}\\\", session.getTerminalId(), session.getId()); } } \",\"@Configuration public class CustomizedDemoJt808Config extends Jt808ServerConfigurationSupport { @Override public Jt808SessionManagerEventListener supplyJt808SessionManagerEventListener() { return new MyJt808SessionManagerEventListener(); } } \",\"传送门\",\"本小节示例可以在 samples/jt-808-server-sample-customized 找到相关代码。\"]},\"181\":{\"h\":\"TerminalValidator\",\"t\":[\"鸣谢\",\"该组件由 anotherMe17 贡献。\",\"非常感谢老哥 anotherMe17 的 Pull request#19 。\",\"@Configuration public class Jt808Configuration extends Jt808ServerConfigurationSupport { // [非必须配置] -- 可替换内置 TerminalValidator @Override public TerminalValidator terminalValidator() { return new TerminalValidator() { @Override public boolean validateTerminal(RequestMsgMetadata metadata) { return true; } @Override public boolean needValidate(RequestMsgMetadata metadata, Integer msgId) { return true; } }; } } \"]},\"182\":{\"h\":\"jt-808\",\"t\":[\"提示\",\"本小节将介绍 808协议 相关的接入步骤，主要内容如下：\",\"808协议扫盲\",\"快速开始\",\"定制\"]},\"183\":{\"h\":\"协议扫盲\"},\"184\":{\"h\":\"数据类型\"},\"185\":{\"h\":\"808协议数据类型\",\"t\":[\"数据类型\",\"描述及要求\",\"BYTE\",\"无符号单字节整形（字节， 8 位）\",\"WORD\",\"无符号双字节整形（字， 16 位）\",\"DWORD\",\"无符号四字节整形（双字， 32 位）\",\"BYTE[n]\",\"n 字节\",\"BCD[n]\",\"8421 码， n 字节\",\"STRING\",\"GBK 编码，若无数据，置空\"]},\"186\":{\"h\":\"对应Java数据类型\",\"t\":[\"和文档中定义的数据类型都在枚举类 io.github.hylexus.jt.data.MsgDataType 中。\",\"@Getter public enum MsgDataType { BYTE(1, \\\"无符号单字节整型(字节，8 位)\\\", newHashSet(byte.class, Byte.class, int.class, Integer.class, Short.class, short.class)), BYTES(0, \\\"\\\", newHashSet(byte[].class)), WORD(2, \\\"无符号双字节整型(字，16 位)\\\", newHashSet(short.class, Short.class, int.class, Integer.class)), // https://github.com/hylexus/jt-framework/issues/34 DWORD(4, \\\"无符号四字节整型(双字，32 位)\\\", newHashSet(long.class, Long.class, int.class, Integer.class)), BCD(0, \\\"8421 码，n 字节\\\", newHashSet(String.class)), STRING(0, \\\"GBK 编码，若无数据，置空\\\", newHashSet(String.class)), UNKNOWN(0, \\\"未知类型，用于占位符或默认值\\\", newHashSet(String.class)), ; /** * 字节数 * 为零表示使用外部指定的长度 * * @see BasicField#length() */ private final int byteCount; private final String desc; private final Set<Class<?>> expectedTargetClassType; MsgDataType(int byteCount, String desc, Set<Class<?>> expectedTargetClassType) { this.byteCount = byteCount; this.desc = desc; this.expectedTargetClassType = expectedTargetClassType; } } \"]},\"187\":{\"h\":\"消息结构\",\"t\":[\"标识位\",\"消息头\",\"消息体\",\"校验码\",\"标识位\",\"1byte(0x7e)\",\"16byte\",\"1byte\",\"1byte(0x7e)\"]},\"188\":{\"h\":\"消息头\",\"t\":[\"整个报文中最复杂也就是消息头的处理了。\",\"分包消息 的消息头长度为 16字节\",\"非分包消息 的消息头长度为 12字节\",\"消息头的结构如下所示：\",\"消息ID(0-1) 消息体属性(2-3) 终端手机号(4-9) 消息流水号(10-11) 消息包封装项(12-15) byte[0-1] 消息ID word(16) byte[2-3] 消息体属性 word(16) bit[0-9] 消息体长度 bit[10-12] 数据加密方式 此三位都为 0，表示消息体不加密 第 10 位为 1，表示消息体经过 RSA 算法加密 其它保留 bit[13] 分包 1：消息体卫长消息，进行分包发送处理，具体分包信息由消息包封装项决定 0：则消息头中无消息包封装项字段 bit[14-15] 保留 byte[4-9] 终端手机号或设备ID bcd[6] 根据安装后终端自身的手机号转换 手机号不足12 位，则在前面补 0 byte[10-11] 消息流水号 word(16) 按发送顺序从 0 开始循环累加 byte[12-15] 消息包封装项 byte[0-1] 消息包总数(word(16)) 该消息分包后得总包数 byte[2-3] 包序号(word(16)) 从 1 开始 如果消息体属性中相关标识位确定消息分包处理,则该项有内容 否则无该项 \"]},\"189\":{\"h\":\"快速开始\",\"t\":[\"此处将展示一个 最少配置 的808协议消息处理服务的搭建。\",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-bare 下找到对应代码。\"]},\"190\":{\"h\":\"创建工程\",\"t\":[\"创建一个空的 spring-boot 工程。\",\"传送门\",\"可以使用 Spring Initializer 快速初始化一个 Spring Boot 工程。\"]},\"191\":{\"h\":\"添加依赖\",\"t\":[\"引入为 808协议 提供的 spring-boot-starter\",\"gradle\",\"dependencies { // ... implementation group: 'io.github.hylexus.jt', name: 'jt-808-server-spring-boot-stater', version: \\\"1.0.12-RELEASE\\\" // ... } \",\"maven\",\"<dependency> <groupId>io.github.hylexus.jt</groupId> <artifactId>jt-808-server-spring-boot-stater</artifactId> <version>1.0.12-RELEASE</version> </dependency> \"]},\"192\":{\"h\":\"配置\",\"t\":[\"application.yml\",\"jt808: print-component-statistics: true logging: level: info level.io.github.hylexus: debug \",\"@EnableJt808ServerAutoConfig 启用自动配置\",\"@SpringBootApplication // 启用自动配置 @EnableJt808ServerAutoConfig public class Jt808ServerSampleBareApplication { public static void main(String[] args) { SpringApplication.run(Jt808ServerSampleBareApplication.class, args); } } \"]},\"193\":{\"h\":\"测试\",\"t\":[\"至此，对808消息的处理流程已经搭建完毕。启动 spring-boot 项目开始测试。\",\"可以从启动日志中的组件统计信息中看到内置了一个对 0x0102 (终端鉴权) 消息的处理器。处理逻辑位于 io.github.hylexus.jt808.handler.impl.BuiltinAuthMsgHandler 。\",\"配置提示\",\"组件统计信息 的开关由配置项 jt808.print-component-statistics = true|false 来控制\",\"鉴权成功与否是由函数式接口 io.github.hylexus.jt808.ext.AuthCodeValidator 处理的。 并且内置了一个 永远返回true的仅仅用于调试 的实现类 BuiltinAuthCodeValidatorForDebugging 。\"]},\"194\":{\"h\":\"使用发包工具测试鉴权消息\",\"t\":[\"注意：\",\"无论以什么发包工具发包，都请记得以 十六进制格式 发送！可以参考 推荐发包工具 。\",\"注意：\",\"无论以什么发包工具发包，都请记得以 十六进制格式 发送！可以参考 推荐发包工具 。\",\"注意：\",\"无论以什么发包工具发包，都请记得以 十六进制格式 发送！可以参考 推荐发包工具 。\",\"用发包工具发送如下报文给服务器( 默认TCP端口:6808 )测试：\",\"7E0102000676890100562606E144454A544E506D7E \",\"此时可以从控制台看到，内置的鉴权消息处理器打印出的日志，解析出了鉴权码，并且已经回复客户端。\",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-bare 下找到对应代码。\"]},\"195\":{\"h\":\"消息下发\"},\"196\":{\"h\":\"手动下发\",\"t\":[\"所谓手动下发就是指使用 io.github.hylexus.jt.jt808.spec.session.Jt808Session.sendMsgToClient(io.netty.buffer.ByteBuf) 方法来发送数据。\",\"@RestController @RequestMapping(\\\"/demo01\\\") public class DemoController { private final Jt808CommandSender commandSender; private final Jt808SessionManager sessionManager; public DemoController(Jt808CommandSender commandSender, Jt808SessionManager sessionManager) { this.commandSender = commandSender; this.sessionManager = sessionManager; } @RequestMapping(\\\"/send-some-msg\\\") public void sendMsgBySession(@RequestParam(name = \\\"terminalId\\\", required = false, defaultValue = \\\"013912344323\\\") String terminalId) { this.sessionManager.findByTerminalId(terminalId) .orElseThrow(() -> new IllegalArgumentException(\\\"No terminal found with terminalId \\\" + terminalId)) // 手动编码后通过 Session 下发消息 .sendMsgToClient(ByteBufAllocator.DEFAULT.buffer().writeBytes(\\\"data will be sent to client\\\".getBytes(Charset.forName(\\\"GBK\\\")))); } } \"]},\"197\":{\"h\":\"通过CommandSender下发\",\"t\":[\"下发消息，并等待。\",\"@RestController @RequestMapping(\\\"/demo01\\\") public class DemoController { private final Jt808CommandSender commandSender; private final Jt808SessionManager sessionManager; public DemoController(Jt808CommandSender commandSender, Jt808SessionManager sessionManager) { this.commandSender = commandSender; this.sessionManager = sessionManager; } // 7E00010005013912344323007B0001810300827E @RequestMapping(\\\"/set-terminal-params\\\") public Object sendMsg( @RequestParam(name = \\\"terminalId\\\", required = false, defaultValue = \\\"013912344323\\\") String terminalId) throws InterruptedException { final RespTerminalSettings param = new RespTerminalSettings(); final List<RespTerminalSettings.ParamItem> paramList = List.of( new RespTerminalSettings.ParamItem(0x0029, ByteBufAllocator.DEFAULT.buffer().writeInt(100)), new RespTerminalSettings.ParamItem(0x0030, ByteBufAllocator.DEFAULT.buffer().writeInt(211)) ); param.setParamList(paramList); param.setTotalParamCount(paramList.size()); final Jt808Session session = sessionManager.findByTerminalId(terminalId).orElseThrow(); final int nextFlowId = session.nextFlowId(); // 1. 生成Key(收到终端回复时会根据这个Key来匹配) final Jt808CommandKey commandKey = Jt808CommandKey.of(terminalId, BuiltinJt808MsgType.CLIENT_COMMON_REPLY, nextFlowId); final Object resp = commandSender.sendCommandAndWaitingForReply(commandKey, param, 20L, TimeUnit.SECONDS); log.info(\\\"RESP::::::: {}\\\", resp); return resp; } } \",\"收到结果后，放入 CommandWaitingPool。\",\"@Component @Jt808RequestHandler public class CommonHandler { @Jt808RequestHandlerMapping(msgType = 0x0001, versions = Jt808ProtocolVersion.AUTO_DETECTION) public void processMsg0001(Jt808RequestEntity<BuiltinTerminalCommonReplyMsg> request) { final BuiltinTerminalCommonReplyMsg body = request.body(); final String terminalId = request.header().terminalId(); // 2. 生成同样的Key final Jt808CommandKey commandKey = Jt808CommandKey.of(terminalId, BuiltinJt808MsgType.CLIENT_COMMON_REPLY, body.getServerFlowId()); // 将结果放入CommandWaitingPool CommandWaitingPool.getInstance().putIfNecessary(commandKey, body); } } \"]},\"198\":{\"h\":\"处理器拦截器\"},\"199\":{\"h\":\"介绍\",\"t\":[\"从 SpringMvc 借鉴(抄袭)了一个 Jt808HandlerInterceptor ,会在执行处理器方法之前、之后已经处理器方法出现异常时回调对应方法。\",\"这个接口的作用和 SpringMvc 的 HandlerInterceptor 一样。\",\"提示\",\"将 Jt808HandlerInterceptor 的实现类实例加入到 spring 容器中就可以生效了。\",\"接口定义如下：\",\"public interface Jt808HandlerInterceptor extends OrderedComponent { /** * 调用处理器方法之前回调 * * @param exchange 当前请求上下文 * @param handler 处理当前消息的处理器,内置处理器有两种: * <ol> * <li>{@link SimpleJt808RequestHandler SimpleJt808RequestHandler} 的实现类</li> * <li>被 {@link Jt808RequestHandlerMapping @Jt808RequestHandlerMapping} 标记的方法</li> * </ol> * @return true: 会正常调用处理器方法处理消息; false: 直接返回,不再调用处理器方法 */ default boolean preHandle(Jt808ServerExchange exchange, Object handler) throws Throwable { return true; } /** * 处理器执行结束之后回调 * * @param exchange 当前请求上下文 * @param handler 处理当前消息的处理器,内置处理器有两种: * <ol> * <li>{@link SimpleJt808RequestHandler SimpleJt808RequestHandler} 的实现类</li> * <li>被 {@link Jt808RequestHandlerMapping @Jt808RequestHandlerMapping} 标记的方法</li> * </ol> * @param handlerResult 处理器处理结果 */ default void postHandle(Jt808ServerExchange exchange, Object handler, @Nullable Jt808HandlerResult handlerResult) throws Throwable { } /** * @param exchange 当前请求上下文 * @param handler 处理当前消息的处理器,内置处理器有两种: * <ol> * <li>{@link SimpleJt808RequestHandler SimpleJt808RequestHandler} 的实现类</li> * <li>被 {@link Jt808RequestHandlerMapping @Jt808RequestHandlerMapping} 标记的方法</li> * </ol> * @param exception 处理器处理消息时候出现的异常(@Nullable) */ default void afterCompletion(Jt808ServerExchange exchange, Object handler, @Nullable Throwable exception) throws Throwable { } } \"]},\"200\":{\"h\":\"示例\",\"t\":[\"实现接口，并加入到 Spring 容器中即可。如果有多个拦截器，可以通过复写 getOrder() 方法来控制多个拦截器的执行顺序。\"]},\"201\":{\"h\":\"基础\"},\"202\":{\"h\":\"请求参数解析器\"},\"203\":{\"h\":\"介绍\",\"t\":[\"这部分也是借鉴(抄袭) Spring 的。\",\"上一小节介绍了怎么接收请求，但是接收到的都是 Jt808Request 类型。\",\"就类似于 JavaWeb 开发中的 Servlet 一样给你一个 HttpServletRequest : 后续所有解析操作都要手动进行，比较繁琐。\",\"所以本项目也提供了几个内置的 Jt808HandlerMethodArgumentResolver 来将原始的 Jt808Request 转换成可读性较强的自定义类型，这些转换功能都是依赖于参数解析器 Jt808HandlerMethodArgumentResolver：\",\"public interface Jt808HandlerMethodArgumentResolver { boolean supportsParameter(MethodParameter methodParameter); Object resolveArgument(MethodParameter methodParameter, ArgumentContext context) throws Jt808ArgumentResolveException; } \"]},\"204\":{\"h\":\"支持的参数类型\",\"t\":[\"内置的几种 参数解析器 如下：\",\"在默认配置的情况下，你可以按需在 请求处理器方法参数 中使用如下类型中的若干个：\",\"Jt808Request\",\"Jt808RequestHeader\",\"Jt808Response\",\"Jt808Session\",\"Jt808ServerExchange\",\"被@Jt808RequestBody标记的自定义类型\",\"Jt808RequestEntity\"]},\"205\":{\"h\":\"Jt808Request\",\"t\":[\"在处理器方法中注入 Jt808Request 类型参数：\",\"@Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0001, versions = Jt808ProtocolVersion.AUTO_DETECTION) public void processMsg0001(Jt808Request request) { // ... } } \"]},\"206\":{\"h\":\"Jt808Response\",\"t\":[\"在处理器方法中注入 Jt808Response 类型参数：\",\"@Slf4j @Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = Jt808ProtocolVersion.VERSION_2013) public Jt808Response process(Jt808Request request, Jt808Response response) { // ... process(request) return response.msgId(BuiltinJt808MsgType.SERVER_COMMON_REPLY.getMsgId()) .writeWord(request.flowId()) .writeByte(0) .writeString(\\\"AuthCodeXxx\\\"); } } \"]},\"207\":{\"h\":\"Jt808Session\",\"t\":[\"在处理器方法中注入 Jt808Session 类型参数：\",\"@Slf4j @Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = Jt808ProtocolVersion.VERSION_2013) public Jt808Response process(Jt808Session session, Jt808Response response, ...) { // ... process(request) return ...; } } \"]},\"208\":{\"h\":\"Jt808ServerExchange\",\"t\":[\"在处理器方法中注入 Jt808ServerExchange 类型参数：\",\"@Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = Jt808ProtocolVersion.VERSION_2013) public Jt808Response process(Jt808ServerExchange exchange) { // ... process(exchange.request()) return exchange.response().msgId(BuiltinJt808MsgType.SERVER_COMMON_REPLY.getMsgId()) .writeWord(request.flowId()) .writeByte(0) .writeString(\\\"AuthCodeXxx\\\"); } } \"]},\"209\":{\"h\":\"Jt808RequestHeader\",\"t\":[\"在处理器方法中注入 Jt808ServerExchange 类型参数：\",\"@Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = Jt808ProtocolVersion.VERSION_2013) public Jt808Response process(Jt808RequestHeader header, Jt808Response response, ...) { // ... process(exchange.request()) return ...; } } \"]},\"210\":{\"h\":\"@Jt808RequestBody\",\"t\":[\"下面的 DebugTerminalRegisterMsgV2013 被 @Jt808RequestBody 注解标记了，表示给类用来接收请求体。\",\"@Component @Jt808RequestHandler public class AnnotationHandler01 { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = Jt808ProtocolVersion.VERSION_2013) public Object processRegisterMsgV2013(DebugTerminalRegisterMsgV2013 authMsgV2013, Jt808Request request, Jt808Session session) { log.info(\\\"{}\\\", authMsgV2013); return new TerminalRegisterReplyRespMsg() .setFlowId(request.flowId()) .setResult((byte) 0) .setAuthCode(\\\"AuthCode2013DebugDemo\\\"); } @Data @Jt808RequestBody public static class DebugTerminalRegisterMsgV2013 { // 1. [0-2) WORD 省域ID @RequestField(order = 1, dataType = WORD) private int provinceId; // ... } } \"]},\"211\":{\"h\":\"Jt808RequestEntity\",\"t\":[\"该类和 Spring 的 org.springframework.http.RequestEntity 类似。包含了本次请求的所有信息。\",\"泛型 body 部分的处理逻辑和被 @Jt808RequestBody 标记的类的处理逻辑相同。该类定义如下：\",\"public class Jt808RequestEntity<T> { private final MsgType msgType; private final Jt808RequestHeader header; private final ByteBuf rawByteBuf; private final T body; private final byte originalCheckSum; private final byte calculatedCheckSum; private final Jt808Session session; // ... } \",\"示例如下：\",\"@Component @Jt808RequestHandler public class BuiltinCommonHandler { @Jt808RequestHandlerMapping(msgType = 0x0704) public BuiltinServerCommonReplyMsg processMsg0704(Jt808RequestEntity<BuiltinMsg0704V2013> requestEntity) { log.info(\\\"BuiltinMsg0704 : {}\\\", requestEntity.body()); return BuiltinServerCommonReplyMsg.success(requestEntity.msgType().getMsgId(), requestEntity.flowId()); } } \"]},\"212\":{\"h\":\"请求消息处理器\"},\"213\":{\"h\":\"介绍\",\"t\":[\"提示\",\"接收/处理 请求没有强制指定固定类型的处理器，由谁来处理消息取决于 Jt808HandlerMapping 配置。\",\"内置了两个 Jt808HandlerMapping:\",\"SimpleJt808RequestHandlerHandlerMapping 能将消息路由到 SimpleJt808RequestHandler 类型的 类级别 处理器。\",\"Jt808RequestHandlerMappingHandlerMapping 能将消息路由到 @Jt808RequestHandlerMapping 注解修饰的 方法级别 处理器。\"]},\"214\":{\"h\":\"@Jt808RequestHandlerMapping\"},\"215\":{\"h\":\"介绍\",\"t\":[\"被 @Jt808RequestHandlerMapping 标记的这种处理器也是从 Spring 借鉴(抄袭)的。和 Spring 的 @Controller、@RestController 用法类似。\",\"作用就是标记一下当前类是一个消息处理器类。被该注解标记的类中应该存在若干个能处理请求的方法。\"]},\"216\":{\"h\":\"示例\",\"t\":[\"@Slf4j @Component // @Jt808RequestHandler 标记该类 表示该类是一个消息处理器累(具体的处理器是该类中的部分方法) @Jt808RequestHandler public class SomeRequestHandler { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = VERSION_2013) public TerminalRegisterReplyMsg processTerminalRegisterMsgV2011(Jt808Request request, TerminalRegisterMsgV2011 body) { processRequest(request, body); return ...; } @Jt808RequestHandlerMapping(msgType = 0x0100, versions = VERSION_2019) public TerminalRegisterReplyMsg processTerminalRegisterMsgV2019(Jt808RequestEntity<TerminalRegisterMsgV2019> request) { processRequest(request, body); return ...; } } \"]},\"217\":{\"h\":\"SimpleJt808RequestHandler\"},\"218\":{\"h\":\"介绍\",\"t\":[\"最直观的处理方式就是类似于 Spring 的 WebFlux 中的 org.springframework.web.reactive.function.server.HandlerFunction。\",\"但是 HandlerFunction 需要借助 RouterFunction 来将请求和 HandlerFunction 联系起来。\",\"本项目借鉴(抄袭) WebFlux，提供了一个 SimpleJt808RequestHandler(为了编码简单，直接省去了 RouterFunction) :\"]},\"219\":{\"h\":\"示例\",\"t\":[\"使用方式\",\"直接将实现了 SimpleJt808RequestHandler 接口的处理器类加入到 Spring 容器中就可以。\",\"@Slf4j @Component public class TerminalRegisterMsgHandlerV2011 implements SimpleJt808RequestHandler<BuiltinMsg8100> { /** * 处理 [终端注册] 消息 */ @Override public Set<MsgType> getSupportedMsgTypes() { return Set.of(BuiltinJt808MsgType.CLIENT_REGISTER); } /** * 处理 [V2011] 版的消息 */ @Override public Set<Jt808ProtocolVersion> getSupportedVersions() { return Jt808ProtocolVersion.unmodifiableSetVersion2011(); } // 7E01000023013912344321007B000B0002696431323361626364656667684944313233343501B8CA4A2D313233343531317E @Override public BuiltinMsg8100 handleMsg(Jt808ServerExchange exchange) { processRequest(exchange); return ... } } \"]},\"220\":{\"h\":\"请求处理流程\",\"t\":[\"在本项目中，所有请求的处理都是一个风格 ：\",\"接收 Jt808Request (或由 Jt808Request 转换出来的其他类型)\",\"处理业务逻辑\",\"返回 Jt808Response (或可以转换为 Jt808Response 的其他类型)\",\"具体流程可以结合 请求生命周期监听器 来了解。\"]},\"221\":{\"h\":\"请求消息分包\"},\"222\":{\"h\":\"分包合并\",\"t\":[\"收到终端上报的分包请求时，会先将分包消息 暂存 到 分包暂存器(Jt808RequestSubPackageStorage);等所有子包都到达后会自动合并消息，投递给消息处理器处理。\"]},\"223\":{\"h\":\"分包暂存器\",\"t\":[\"/** * 遇到分包请求时会回调 {@link #saveSubPackage(Jt808Request)} 将分包暂存起来。 * <p> * 实现类至少应该实现下面几个功能: * * <ol> * <li>当所有子包都到达后，实现类应该负责将消息合并 && 将合并后的完整消息使用 {@link Jt808RequestMsgDispatcher#doDispatch(Jt808Request)} 投递出去</li> * <li>某些子包丢失未到达时应该自动发送 `0x8003` 消息给终端，要求终端重传某些子包</li> * <li>长时间未到达服务端的子包应该及时回收掉, 最长暂存多久由具体实现类自行决定</li> * </ol> * * @author hylexus * @see Jt808RequestMsgDispatcher#doDispatch(Jt808Request) */ public interface Jt808RequestSubPackageStorage { /** * 分包请求到达时回调该方法，暂存分包请求。 * <p> * 如有必要，实现类应该自行回收掉 {@link Jt808Request#body()} 和 {@link Jt808Request#rawByteBuf()} * * @param subPackage 分包请求 */ void saveSubPackage(Jt808Request subPackage); } \"]},\"224\":{\"h\":\"内置分包暂存器\",\"t\":[\"警告\",\"如果配置了 jt808.request-sub-package-storage.type = none，也就意味着所有的分包请求都会被丢弃!!!\",\"警告\",\"如果配置了 jt808.request-sub-package-storage.type = none，也就意味着所有的分包请求都会被丢弃!!!\",\"警告\",\"如果配置了 jt808.request-sub-package-storage.type = none，也就意味着所有的分包请求都会被丢弃!!!\",\"CaffeineJt808RequestSubPackageStorage\",\"基于 caffeine 的请求消息分包暂存器\",\"当 jt808.request-sub-package-storage.type = caffeine 时启用\",\"Jt808RequestSubPackageStorage.NO_OPS\",\"空的实现(忽略所有分包请求)\",\"当 jt808.request-sub-package-storage.type = none 时启用\"]},\"225\":{\"h\":\"示例\",\"t\":[\"下面以终端注册消息(0x0001) 为例来观察一下分包的过程。\",\"暂时调整日志级别以便观察分包请求处理\",\"logging: level.root: info # 将默认解码器的日志级别调整到debug 来观察请求分包消息 level.jt-808.request.decoder: debug # 将请求分包暂存器(默认为基于Caffeine的实现)的日志级别调整的debug 来观察分包请求的处理过程 level.io.github.hylexus.jt.jt808.support.codec.impl.CaffeineJt808RequestSubPackageStorage: debug \",\"发送下面三条分包报文：\",\"7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E \",\"发送三条报文之后，可以观察到类似如下日志：\",\"上面日志解释如下：\",\"# 0x0001 的第1个子包(-: 转义之前; +: 转义之后) - >>>>>>>>>>>>>>> : 7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E + >>>>>>>>>>>>>>> : 7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E + >>>>>>>>>>>>>>> (0x0100--60) 1/3: 7E010060240100000000013912344329000000030001000B00026964393837363534333231747970653030313233343536373831323334353637277E # 0x0001 的第2个子包(-: 转义之前; +: 转义之后) - >>>>>>>>>>>>>>> : 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E + >>>>>>>>>>>>>>> : 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E + >>>>>>>>>>>>>>> (0x0100--60) 2/3: 7E010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357E # 0x0001 的第3个子包(-: 转义之前; +: 转义之后) - >>>>>>>>>>>>>>> : 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E - + >>>>>>>>>>>>>>> : 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E + >>>>>>>>>>>>>>> (0x0100--38) 3/3: 7E0100600E010000000001391234432900020003000333323101B8CA4A2D313233343539347E # 分包暂存器发现所有子包都到达了 --> 合并消息重新投递出去待处理器处理 DEBUG i.g.h.j.j.s.c.i.CaffeineJt808RequestSubPackageStorage - Redispatch mergedRequest : DefaultJt808Request{msgType=BuiltInMsgType{msgId=256(0x0100), desc='终端注册'}, header=HeaderSpec{version=VERSION_2019, terminalId='00000000013912344329', msgId=256, flowId=2, msgBodyProps=MsgBodyProps{intValue=16470, msgBodyLength=86, hasSubPackage=false, encryptionType=0}}, checkSum=0} \"]},\"226\":{\"h\":\"分包补传\",\"t\":[\"这里的分包补传指的是 0x8003 消息。\",\"内置的分包请求暂存器目前就只有一种基于 Caffeine 的实现 : CaffeineJt808RequestSubPackageStorage。\",\"提示\",\"暂时没想到一种比较优雅的、自动化的、可扩展的服务端分包补传处理流程。\",\"所以服务端分包补传消息暂时不支持，后续版本升级会实现。\",\"也就是说，2.0.0 版本不支持自动化的 0x8003 消息处理。\",\"你可以自定义 Jt808RequestSubPackageStorage 的实现类来实现这个功能。\"]},\"227\":{\"h\":\"响应消息处理器\"},\"228\":{\"h\":\"说明\",\"t\":[\"提示\",\"对响应给客户端的消息类型没有强制指定固定类型，任何类型的消息处理器返回的结果都被包装成了 Jt808HandlerResult。\",\"而 Jt808HandlerResult 是由 Jt808HandlerResultHandler 处理的。\",\"所以，支持哪些类型的响应消息取决于 Jt808HandlerResultHandler 的配置。\",\"内置了两个 Jt808HandlerResultHandler:\",\"Jt808ResponseHandlerResultHandler 能处理 Jt808Response 类型的响应数据。\",\"Jt808ResponseBodyHandlerResultHandler 能将处理被 @Jt808ResponseBody 注解修饰的返回类型。\",\"提示\",\"本小节主要介绍 Jt808ResponseHandlerResultHandler 类型的 类级别 处理器，毕竟当注解不方便处理请求时，这种类型的 HandlerResultHandler 是内置的 *HandlerResultHandler* 中唯一的选择。\"]},\"229\":{\"h\":\"@Jt808ResponseBody\"},\"230\":{\"h\":\"说明\",\"t\":[\"这个注解也是借鉴(抄袭)Spring 的 @ResponseBody 注解，表示被标记的类是响应体。\"]},\"231\":{\"h\":\"示例\",\"t\":[\"下面是被 @Jt808ResponseBody 标记的类，表示该类是给客户端回复数据的 body() 部分：\",\"@Data @Accessors(chain = true) @Jt808ResponseBody(msgId = 0x8100, maxPackageSize = 33) public class TerminalRegisterReplyMsg { // 1. byte[0,2) WORD 对应的终端注册消息的流水号 @ResponseField(order = 0, dataType = MsgDataType.WORD) private int flowId; // 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端 @ResponseField(order = 1, dataType = MsgDataType.BYTE) private byte result; // 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段) @ResponseField(order = 3, dataType = MsgDataType.STRING, conditionalOn = \\\"result == 0\\\") private String authCode; } \",\"下面是回复客户端的部分伪代码：\",\"@Component @Jt808RequestHandler public class CommonHandler { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = VERSION_2019) public TerminalRegisterReplyMsg processTerminalRegisterMsgV2019(Jt808RequestEntity<TerminalRegisterMsgV2019> request) { log.info(\\\"V2019--TerminalRegister : {}\\\", request); return new TerminalRegisterReplyMsg() .setFlowId(request.flowId()) .setResult((byte) 0) .setAuthCode(\\\"authCode2019-admin\\\") ; } } \"]},\"232\":{\"h\":\"Jt808Response\"},\"233\":{\"h\":\"说明\"},\"234\":{\"h\":\"示例\",\"t\":[\"@Slf4j @Component public class TerminalRegisterMsgHandlerV2013 implements SimpleJt808RequestHandler<Jt808Response> { /** * 处理 [终端注册] 消息 */ @Override public Set<MsgType> getSupportedMsgTypes() { return Set.of(BuiltinJt808MsgType.CLIENT_REGISTER); } /** * 处理 [V2013] 版的消息 */ @Override public Set<Jt808ProtocolVersion> getSupportedVersions() { return Jt808ProtocolVersion.unmodifiableSetVersion2013(); } // 7E0100002F013912344323007B000B0002696431323374797065313233343536373838373635343332314944313233343501B8CA4A2D3132333435332D7E @Override public Jt808Response handleMsg(Jt808ServerExchange exchange) { // ...忽略请求读取过程 // 手动创建一个新的Jt808Response返回 return Jt808Response.newBuilder() .msgId(BuiltinJt808MsgType.CLIENT_REGISTER_REPLY) .terminalId(exchange.request().terminalId()) .flowId(exchange.session().nextFlowId()) .version(exchange.request().version()) .body(writer -> writer // 1. byte[0,2) WORD 对应的终端注册消息的流水号 .writeWord(exchange.request().flowId()) // 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端 .writeByte(0) // 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段) .writeString(\\\"AuthCode-123\\\") ) .build(); } } \"]},\"235\":{\"h\":\"响应消息分包\"},\"236\":{\"h\":\"分包方式\",\"t\":[\"Jt808MsgEncoder 的默认实现类 DefaultJt808MsgEncoder 会将较大的消息自动分包，分包的阈值可以手动指定。 默认值是 1024 字节。\",\"也就是说：DefaultJt808MsgEncoder 在编码消息时(转义之前)，发现消息包的大小超过了阈值，会自动将消息分包发送给客户端。\",\"内置的支持自动分包的返回类型有两种: Jt808Response 和被 @Jt808ResponseBody 标记的类型。\",\"提示\",\"可以将 jt-808.response.encoder 日志的级别调整为 debug 级别，这样就可以看到分包消息的详情了：\",\"logging: # 编码器日志 level.jt-808.response.encoder: debug \"]},\"237\":{\"h\":\"Jt808Response\",\"t\":[\"Jt808Response 有个属性 maxPackageSize 用来控制单个消息包的最大大小。默认 1024 字节。\",\"如果响应消息的大小(转义之前)超过 maxPackageSize() 的阈值，会自动将消息拆分为多个子包发送。\",\"public interface Jt808Response extends Jt808ByteWriter { int DEFAULT_MAX_PACKAGE_SIZE = 1024; /** * 响应消息大小超过该值(默认 {@value #DEFAULT_MAX_PACKAGE_SIZE})会自动分包发送(转义之前) * * @return 响应消息最大字节数 */ default int maxPackageSize() { return DEFAULT_MAX_PACKAGE_SIZE; } /** * 指定单个消息包的最大大小(转义之前) * * @param size 消息包最大大小 * @return 单个消息包的最大大小 */ Jt808Response maxPackageSize(int size); // ... } \"]},\"238\":{\"h\":\"@Jt808ResponseBody\",\"t\":[\"@Jt808ResponseBody 注解也有个 maxPackageSize 属性用来控制单个消息包的最大大小(转义之前)。\",\"public @interface Jt808ResponseBody { /** * @return 单个消息包的最大字节数, 超过该值会自动分包发送 * @see Jt808Response#DEFAULT_MAX_PACKAGE_SIZE * @see Jt808Response#maxPackageSize(int) */ int maxPackageSize() default Jt808Response.DEFAULT_MAX_PACKAGE_SIZE; // ... } \"]},\"239\":{\"h\":\"示例\",\"t\":[\"发送下面这条测试报文\",\"7E010040560100000000013912344329007B000B0002696439383736353433323174797065303031323334353637383132333435363738383736353433323149443030303031323334353637383132333435363738383736353433323101B8CA4A2D313233343539257E \",\"然后观察 debug 日志的输出:\",\"上面日志解释如下：\",\"# 0x8100 的第1个子包(-: 转义之前; +: 转义之后) - <<<<<<<<<<<<<<< (0x8100--33) 1/3: 7E810060090100000000013912344329000000030001007B0041757468436FE07E + <<<<<<<<<<<<<<< (0x8100--33) 1/3: 7E810060090100000000013912344329000000030001007B0041757468436FE07E # 0x8100 的第2个子包(-: 转义之前; +: 转义之后) - <<<<<<<<<<<<<<< (0x8100--33) 2/3: 7E8100600901000000000139123443290001000300026465323031392D2D2DBB7E + <<<<<<<<<<<<<<< (0x8100--33) 2/3: 7E8100600901000000000139123443290001000300026465323031392D2D2DBB7E # 0x8100 的第3个子包(-: 转义之前; +: 转义之后) - <<<<<<<<<<<<<<< (0x8100--25) 3/3: 7E8100600101000000000139123443290002000300032DBA7E + <<<<<<<<<<<<<<< (0x8100--25) 3/3: 7E8100600101000000000139123443290002000300032DBA7E \"]},\"240\":{\"h\":\"分包补传\",\"t\":[\"这里指的是 0x0005 的 终端补传分包请求。\",\"当服务端将消息分包发送给终端时，如果终端没有收到某些子包，会发送 0x0005 请求要求服务端重传指定的子包。\"]},\"241\":{\"h\":\"分包暂存器\",\"t\":[\"服务端将消息分包发送时，会将子包保存在 Jt808ResponseSubPackageStorage 中,该接口定义如下：\",\"public interface Jt808ResponseSubPackageStorage { /** * 保存某个子包(响应消息分包时会回调),子包保存多久看具体实现类的实现逻辑 * * @param subPackage 子包 */ void saveSubPackage(Jt808Response.Jt808ResponseSubPackage subPackage); /** * 分包补传(0x0005) 时可以通过这个方法获取之前发送过的子包 * * @param terminalId 终端手机号 * @param firstFlowIdOfSubPackage 分包消息中的第一个子包的流水号 * @param packageIds 要求重传的子包ID * @return 编码后子包消息字节流 */ Collection<ByteBuf> getSubPackageMsg(String terminalId, int firstFlowIdOfSubPackage, Collection<Integer> packageIds); } \",\"遇到分包补传请求 0x0005 时，可以从 Jt808ResponseSubPackageStorage 中获取子包信息。\"]},\"242\":{\"h\":\"内置分包暂存器\",\"t\":[\"Jt808ResponseSubPackageStorage 内置了三个实现类:\",\"CaffeineJt808ResponseSubPackageStorage\",\"基于 caffeine 的实现\",\"配置项 jt808.response-sub-package-storage.type=caffeine 时启用\",\"RedisJt808ResponseSubPackageStorage\",\"基于 redis 的实现\",\"配置项 jt808.response-sub-package-storage.type=redis 时启用\",\"Jt808ResponseSubPackageStorage.NO_OPS_STORAGE\",\"空的实现\",\"配置项 jt808.response-sub-package-storage.type=none 时启用\"]},\"243\":{\"h\":\"示例\",\"t\":[\"@Slf4j @Component @Jt808RequestHandler public class RetransmissionHandler { private final Jt808ResponseSubPackageStorage responseSubPackageStorage; private final Jt808SessionManager sessionManager; public RetransmissionHandler(Jt808ResponseSubPackageStorage responseSubPackageStorage, Jt808SessionManager sessionManager) { this.responseSubPackageStorage = responseSubPackageStorage; this.sessionManager = sessionManager; } // 7E00054008010000000001391234432900010000000200010002387E // 7E000540080100000000013912344329000100030002000100023B7E @Jt808RequestHandlerMapping(msgType = 0x0005, desc = \\\"终端补传分包请求\\\") public void processRetransmissionMsg(Jt808RequestEntity<BuiltinMsg0005> request) { final Jt808Session session = this.sessionManager.findByTerminalId(request.terminalId()).orElseThrow(); final BuiltinMsg0005 body = request.body(); // 分包消息中第一包的流水号 final int firstSubPackageFlowId = body.getFirstSubPackageFlowId(); // 需要重传的子包ID final List<Integer> packageIdList = body.getPackageIdList().stream().map(BuiltinMsg0005.PackageId::getValue).collect(Collectors.toList()); // 获取子包 final Collection<ByteBuf> subPackageMsgList = responseSubPackageStorage.getSubPackageMsg(request.terminalId(), firstSubPackageFlowId, packageIdList); subPackageMsgList .stream() .peek(subPackageMsg -> log.info(\\\"re-send msg to client {} : {}\\\", request.terminalId(), HexStringUtils.byteBufToString(subPackageMsg))) // 将子包发送给终端 .forEach(session::sendMsgToClient); } } \"]},\"244\":{\"h\":\"小节\"},\"245\":{\"h\":\"Aware接口\",\"t\":[\"这种 Aware 接口是从 Spring 中借鉴(抄袭)的 😂😂😂😂😂😂。\",\"所以你要是知道 Spring 中的诸如 ApplicationContextAware、EnvironmentAware 等就几乎没必要看本小节了。\"]},\"246\":{\"h\":\"为什么会提供？\",\"t\":[\"在用注解解析映射请求报文到实体类的时候，字段长度等的计算可能会依赖于消息头中的一些属性。\",\"所以在基于注解的实体类映射时，你可以给实体类实现这些接口以自动注入一些其他信息。\",\"注意\",\"目前为止，这些Aware接口只能在 基于注解处理请求消息映射 时用于 请求体消息实体类 中。\"]},\"247\":{\"h\":\"Jt808RequestHeaderAware\",\"t\":[\"每次消息处理时为实体类注入 Jt808RequestHeader 实例。\",\"public interface Jt808RequestHeaderAware { void setHeader(Jt808RequestHeader header); } \"]},\"248\":{\"h\":\"Jt808RequestAware\",\"t\":[\"每次消息处理时为实体类注入 Jt808Request 实例。\",\"public interface Jt808RequestAware { void setRequest(Jt808Request request); } \"]},\"249\":{\"h\":\"深入\"},\"250\":{\"h\":\"注解别名(v2.1.1)\",\"t\":[\"提示\",\"注解别名是 \"]},\"251\":{\"h\":\"为什么要引入别名机制?\",\"t\":[\"一句话概括就是: 简化代码，同时又能方便地扩展自定义注解。\",\"提示\",\"为 @RequestField 注解提供了别名 @RequestFieldAlias\",\"为 @ResponseField 注解提供了别名 @ResponseFieldAlias\",\"相当于 Spring 中 @RequestMapping 和 @GetMapping 的关系\",\"以 位置上报 报文为例，解析经纬度的实体类可能是下面这种写法：\",\" @Jt808RequestBody public class BuiltinMsg0200V2019 { // ... // (3). byte[8,12) DWORD 纬度 @RequestField(order = 3, startIndex = 8, dataType = DWORD) private long lat; // (4). byte[12,16) DWORD 经度 @RequestField(order = 4, startIndex = 12, dataType = DWORD) private long lng; // (8). byte[22,28) BCD[6] 时间 @RequestField(order = 8, startIndex = 22, dataType = BCD, length = 6) private String time; // ... } \",\"你可能会对于上面的代码片段有几个疑问：\",\"order 是必须要指定的吗？ \",\"这个问题暂且不讨论(暂且就认为是必须的吧)\",\"参考Stackoverflow\",\"startIndex 是必须要指定的吗？ \",\"其实这个属性是从 1.x 继承过来的\",\"1.x 的版本是必须的，因为 1.x 是通过 byte[] 来解析报文的，没有维护 readerIndex\",\"2.x 的版本通过 Netty 的 ByteBuf 来解析的。虽然有这个 startIndex 属性，但是 Jt808FieldDeserializer 的实现类中几乎没用到这个属性。也就是说 2.x 中可以不用指定这个属性了(实现类依赖于 Netty 的 ByteBuf 的 readerIndex)。\",\"dataType 是必须要指定的吗？ \",\"dataType 和 length 两个属性其实在一定角度来看可以看成一回事。\",\"dataType= DWOD 也就是间接指定了 length = 4\",\"dataType = BYTE 也就是间接指定了 length = 1\",\"但是 dataType = STRING 时, 就需要指定 length 了。\",\"所以 @RequestField 注解中包含了这么多属性。\",\"但是在使用时难免会疑惑: 到底该哪些属性是必须的???\",\"length 是必须要指定的吗？(和上一个问题类似)\",\"鉴于以上几个问题，2.1.1 开始引入了注解别名机制。\",\"说白了就是:\",\"为 @RequestField 注解提供了快捷方式 @RequestFieldAlias\",\"为 @ResponseField 注解提供了快捷方式 @ResponseFieldAlias\",\"下面是使用注解别名实现的同样效果的实体类映射(暂且先忽略 order 属性)：\",\" @Jt808RequestBody public class BuiltinMsg0200V2019Alias { // ... // (3). byte[8,12) DWORD 纬度 @RequestFieldAlias.Dword(order = 3) private long lat; // (4). byte[12,16) DWORD 经度 @RequestFieldAlias.Dword(order = 4) private long lng; // (8). byte[22,28) BCD[6] 时间 @RequestFieldAlias.Bcd(order = 8, length = 6) private String time; // ... } \",\"省去了 startIndex 和 部分 length 属性。 上面代码中的 @RequestFieldAlias 相比于 @RequestField 是不是简介多了？\"]},\"252\":{\"h\":\"@RequestFieldAlias\",\"t\":[\"RequestFieldAlias 是给 @RequestField 提供的别名(快捷方式)。\",\"public @interface RequestFieldAlias { @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestField(dataType = MsgDataType.WORD, order = -1) @interface Word { @AliasFor(annotation = RequestField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = RequestField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestField(dataType = MsgDataType.DWORD, order = -1) @interface Dword { @AliasFor(annotation = RequestField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = RequestField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestField(dataType = MsgDataType.BCD, order = -1) @interface Bcd { @AliasFor(annotation = RequestField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = RequestField.class, attribute = \\\"length\\\") int length() default -1; @AliasFor(annotation = RequestField.class, attribute = \\\"lengthExpression\\\") java.lang.String lengthExpression() default \\\"\\\"; @AliasFor(annotation = RequestField.class, attribute = \\\"lengthMethod\\\") java.lang.String lengthMethod() default \\\"\\\"; @AliasFor(annotation = RequestField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } // ... // ... // ... // ... // ... // ... // ... } \"]},\"253\":{\"h\":\"@ResponseFieldAlias\",\"t\":[\"@ResponseFieldAlias 是给 @ResponseField 提供的别名(快捷方式)。\",\"public @interface ResponseFieldAlias { @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @ResponseField(dataType = MsgDataType.WORD, order = -1) @interface Word { @AliasFor(annotation = ResponseField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = ResponseField.class, attribute = \\\"conditionalOn\\\") java.lang.String conditionalOn() default \\\"\\\"; @AliasFor(annotation = ResponseField.class, attribute = \\\"customerFieldSerializerClass\\\") Class<? extends Jt808FieldSerializer<?>> customerFieldSerializerClass() default Jt808FieldSerializer.PlaceholderFiledSerializer.class; @AliasFor(annotation = ResponseField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @ResponseField(dataType = MsgDataType.DWORD, order = -1) @interface Dword { @AliasFor(annotation = ResponseField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = ResponseField.class, attribute = \\\"conditionalOn\\\") java.lang.String conditionalOn() default \\\"\\\"; @AliasFor(annotation = ResponseField.class, attribute = \\\"customerFieldSerializerClass\\\") Class<? extends Jt808FieldSerializer<?>> customerFieldSerializerClass() default Jt808FieldSerializer.PlaceholderFiledSerializer.class; @AliasFor(annotation = ResponseField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } // ... // ... // ... // ... // ... // ... } \"]},\"254\":{\"h\":\"FAQ\"},\"255\":{\"h\":\"兼容性\",\"t\":[\"Question: 注解别名和原来的 @RequestField、 @ResponseField 兼容吗？\",\"Answer: 兼容\",\"注解别名就是对 @RequestField、 @ResponseField 的 {简化,扩展}\",\"底层的 Jt808FieldDeserializer 和 Jt808FieldSerializer 读取的依然是 @RequestField 和 @ResponseField\",\"实际上是借助于 Spring 提供的 @AliasFor 的强大功能实现的\"]},\"256\":{\"h\":\"混合使用\",\"t\":[\"Question: 混合使用问题？\",\"@RequestFieldAlias 和 @RequestField 能混合使用吗？\",\"@ResponseFieldAlias 是给 @ResponseField 能混合使用吗？\",\"Answer: 可以混合使用\",\"本质上和上一个问题是同一个问题。\",\"底层的 Jt808FieldDeserializer 和 Jt808FieldSerializer 读取的依然是 @RequestField 和 @ResponseField。\",\"别名(Alias)只是个快捷方式或者扩展。\"]},\"257\":{\"h\":\"自定义注解(v2.1.1)\"},\"258\":{\"h\":\"请先读我\",\"t\":[\"这里说的自定义注解是通过 v2.1.1 中引入的注解别名机制来扩展的自定义注解。\",\"下面就以位置上报报文中的经纬度字段和时间字段为例，演示如何扩展自己的注解。\"]},\"259\":{\"h\":\"示例1(GeoPoint)\"},\"260\":{\"h\":\"目的\",\"t\":[\"这里的经纬度其实就是将 4 字节的 DWORD 转为数字(Long)，然后再除以 106。\",\" @Data @Jt808RequestBody public class BuiltinMsg0200V2013Alias { // ... // (3). byte[8,12) DWORD 纬度 @RequestFieldAlias.Dword(order = 3) private long lat; // (4). byte[12,16) DWORD 经度 @RequestFieldAlias.Dword(order = 4) private long lng; // ... } \",\"但是内置的转换器实际上不支持从 DWORD 到 Double 的转换，只能写成 Long 然后再手动除以 106 转为浮点数。\",\"不过你可以扩展自定义注解实现这个转换。\"]},\"261\":{\"h\":\"定义自己的注解\",\"t\":[\" @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestField(dataType = MsgDataType.DWORD, order = -1, customerFieldDeserializerClass = ExtendedJt808FieldDeserializerGeoPoint.class) public @interface GeoPoint { @AliasFor(annotation = RequestField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = RequestField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; } \"]},\"262\":{\"h\":\"提供一个转换器\",\"t\":[\"// 自定义的转换器 [不需要] 手动实例化, [也不需要] 注册到 `Jt808FieldDeserializerRegistry` 中 public class ExtendedJt808FieldDeserializerGeoPoint extends AbstractExtendedJt808FieldDeserializer<Object> { private final LongFieldDeserializer delegate = new LongFieldDeserializer(); @Override public Object deserialize(ByteBuf byteBuf, MsgDataType msgDataType, int start, int length, Context context) { // 1. 先委托内置的 LongFieldDeserializer 解析为 LONG final Long dword = this.delegate.deserialize(byteBuf, msgDataType, start, length); final Class<?> targetClass = context.fieldMetadata().getFieldType(); // 2. 然后再根据自己的要求进一步转换 if (Long.class.isAssignableFrom(targetClass) || long.class.isAssignableFrom(targetClass)) { return dword; } else if (Double.class.isAssignableFrom(targetClass) || double.class.isAssignableFrom(targetClass)) { return dword * 1.0 / 1_000_000; } else if (BigDecimal.class.isAssignableFrom(targetClass)) { return new BigDecimal(String.valueOf(dword)).setScale(6, RoundingMode.UP).divide(new BigDecimal(\\\"1000000\\\"), RoundingMode.UP); } throw new Jt808AnnotationArgumentResolveException(\\\"Cannot convert DataType from \\\" + msgDataType + \\\" to \\\" + targetClass); } } \"]},\"263\":{\"h\":\"使用自定义注解\",\"t\":[\" @Data @Jt808RequestBody public class BuiltinMsg0200V2013Alias { // ... // (3). byte[8,12) DWORD 纬度 @GeoPoint(order = 3) // 支持 long, double, BigDecimal private double lat; // (4). byte[12,16) DWORD 经度 @GeoPoint(order = 4) // 支持 long, double, BigDecimal private BigDecimal lng; // ... } \",\"提示\",\"实际上这里演示的这个注解已经在 2.1.1 中内置了, 全类名是 @io.github.hylexus.jt.jt808.support.annotation.msg.req.RequestFieldAlias.GeoPoint。\"]},\"264\":{\"h\":\"示例2(BcdDateTime)\"},\"265\":{\"h\":\"目的\",\"t\":[\"位置上报报文中的时间字段是以 BCD 格式编码的字符串，格式为 yyMMddHHmmss。\",\" @Data @Accessors(chain = true) @Jt808RequestBody @BuiltinComponent public class BuiltinMsg0200V2013Alias { // ... // (8). byte[22,28) BCD[6] 时间 @RequestFieldAlias.Bcd(order = 8, length = 6) private String time; // ... } \",\"但是内置的反序列化器并不支持直接从 BCD 转为 Date 或 LocalDateTime，只能转为 String 或其他类型。\",\"从 2.1.1 开始，你可以定义自己的注解来完成这种特殊需求。\"]},\"266\":{\"h\":\"定义自己的注解\",\"t\":[\" @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestField(dataType = MsgDataType.BCD, length = 6, customerFieldDeserializerClass = MyExtendedJt808FieldDeserializerBcdTime.class, order = -1) public @interface BcdDateTime { @AliasFor(annotation = RequestField.class, attribute = \\\"order\\\") int order(); @AliasFor(annotation = RequestField.class, attribute = \\\"desc\\\") java.lang.String desc() default \\\"\\\"; // 也可以自己扩展注解的属性 String pattern() default \\\"yyMMddHHmmss\\\"; } \"]},\"267\":{\"h\":\"提供一个转换器\",\"t\":[\"// 自定义的转换器 [不需要] 手动实例化, [也不需要] 注册到 `Jt808FieldDeserializerRegistry` 中 public class MyExtendedJt808FieldDeserializerBcdTime extends AbstractExtendedJt808FieldDeserializer<Object> { private final BcdFieldDeserializer delegate = new BcdFieldDeserializer(); @Override public Object deserialize(ByteBuf byteBuf, MsgDataType msgDataType, int start, int length, Context context) { final Class<?> targetClass = context.fieldMetadata().getFieldType(); final String bcd = this.delegate.deserialize(byteBuf, msgDataType, start, length); final BcdDateTime annotation = context.fieldMetadata().getAnnotation(BcdDateTime.class); final String pattern = annotation.pattern(); if (LocalDateTime.class.isAssignableFrom(targetClass)) { return LocalDateTime.parse(bcd, DateTimeFormatter.ofPattern(pattern)); } else if (Date.class.isAssignableFrom(targetClass)) { try { return new SimpleDateFormat(pattern).parse(bcd); } catch (ParseException e) { throw new Jt808FieldSerializerException(e); } } else if (String.class.isAssignableFrom(targetClass)) { return bcd; } throw new Jt808AnnotationArgumentResolveException(\\\"Cannot convert DataType from \\\" + msgDataType + \\\" to \\\" + targetClass); } } \"]},\"268\":{\"h\":\"使用自定义注解\",\"t\":[\"现在可以通过自定义注解将 BCD 转换为 LocalDateTime、 Date 或 String 了：\",\" @Data @Accessors(chain = true) @Jt808RequestBody @BuiltinComponent public class BuiltinMsg0200V2013Alias { // ... // (8). byte[22,28) BCD[6] 时间 @BcdDateTime(order = 7, pattern = \\\"yyMMddHHmmss\\\") private LocalDateTime time; // private Date time; // private String time; // ... } \",\"提示\",\"实际上这里演示的这个注解已经在 2.1.1 中内置了, 全类名是 @io.github.hylexus.jt.jt808.support.annotation.msg.req.RequestFieldAlias.BcdDateTime。\"]},\"269\":{\"h\":\"其他说明\",\"t\":[\"内置的给 @RequestField 提供的别名都在 @RequestFieldAlias 中\",\"要扩展 @ResponseField 也是同样的道理，可以参考 @ResponseFieldAlias 中内置的一堆别名\",\"要扩展一种不支持的数据类型, 比如 LWORD(Long Word, unsigned 64 bit), 也可以通过注解别名实现\"]},\"270\":{\"h\":\"数据类型转换(注解别名,v2.1.1)\"},\"271\":{\"h\":\"相关知识\",\"t\":[\"注解别名\",\"数据类型转换(传统方式)\"]},\"272\":{\"h\":\"请先读我\",\"t\":[\"相比于上一个章节 数据类型转换(传统方式) 来说，本章节介绍的通过 注解别名 数据转换方式要更简单一些。\",\"同时提供了 @RequestFieldAlias.GeoPoint (经纬度) 和 @RequestFieldAlias.BcdDateTime (时间格式的 BCD) 注解。\",\" @Data @Accessors(chain = true) //@Jt808ReqMsgBody(msgType = 0x0200, version = Jt808ProtocolVersion.VERSION_2019) public class LocationUploadReqMsgV2019AliasTest { // ... @RequestFieldAlias.GeoPoint(order = 2) // 地理位置(经纬度)支持: long/Long, double/Double, BigDecimal private Double intLat; // (4). 经度(尚未除以 10^6) // @RequestField(order = 3, startIndex = 12, dataType = DWORD) @RequestFieldAlias.Dword(order = 3) private Long intLng; // ... // (8). 时间 // 1. 解析为 String // @RequestField(order = 7, startIndex = 22, dataType = BCD, length = 6) // @RequestFields.BCD(order = 7, startIndex = 22, length = 6) // private String time; // 2. 解析为 LocalDateTime @RequestFieldAlias.BcdDateTime(order = 7) private LocalDateTime time; // ... } \"]},\"273\":{\"h\":\"BYTE\"},\"274\":{\"h\":\"反序列化BYTE\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"byte, Byte\",\"@RequestFieldAlias.Byte()\",\"有溢出的风险\",\"short, Short\",\"@RequestFieldAlias.Byte()\",\"int, Integer\",\"@RequestFieldAlias.Byte()\",\"long, Long\",\"@RequestFieldAlias.Byte()\",\"ByteArrayContainer\",\"@RequestFieldAlias.Byte()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.Byte()\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestFieldAlias.Byte()\",\"2.1.1 开始支持\"]},\"275\":{\"h\":\"序列化BYTE\",\"t\":[\"源类型\",\"注解\",\"备注\",\"byte, Byte\",\"@ResponseFieldAlias.Byte()\",\"short, Short\",\"@ResponseFieldAlias.Byte()\",\"int, Integer\",\"@ResponseFieldAlias.Byte()\",\"long, Long\",\"@ResponseFieldAlias.Byte()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.Byte()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.Byte()\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseFieldAlias.Byte()\",\"2.1.1 开始支持\"]},\"276\":{\"h\":\"BYTES\"},\"277\":{\"h\":\"反序列化BYTES\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"byte[]\",\"@RequestFieldAlias.Bytes(length = xxx)\",\"ByteBuf\",\"@RequestFieldAlias.Bytes(length = xxx)\",\"String\",\"@RequestFieldAlias.Bytes(length = xxx)\",\"ByteArrayContainer\",\"@RequestFieldAlias.Bytes(length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.Bytes(length = xxx)\",\"2.1.1 开始支持\"]},\"278\":{\"h\":\"序列化BYTES\",\"t\":[\"源类型\",\"注解\",\"备注\",\"byte[]\",\"@ResponseFieldAlias.Bytes()\",\"ByteBuf\",\"@ResponseFieldAlias.Bytes()\",\"String\",\"@ResponseFieldAlias.Bytes()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.Bytes()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.Bytes()\",\"2.1.1 开始支持\"]},\"279\":{\"h\":\"WORD\"},\"280\":{\"h\":\"反序列化WORD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"short, Short\",\"@RequestFieldAlias.Word()\",\"有溢出的风险\",\"int, Integer\",\"@RequestFieldAlias.Word()\",\"long, Long\",\"@RequestFieldAlias.Word()\",\"ByteArrayContainer\",\"@RequestFieldAlias.Word()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.Word()\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestFieldAlias.Word()\",\"2.1.1 开始支持\"]},\"281\":{\"h\":\"序列化WORD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"short, Short\",\"@ResponseFieldAlias.Word()\",\"int, Integer\",\"@ResponseFieldAlias.Word()\",\"long, Long\",\"@ResponseFieldAlias.Word()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.Word()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.Word()\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseFieldAlias.Word()\",\"2.1.1 开始支持\"]},\"282\":{\"h\":\"DWORD\"},\"283\":{\"h\":\"反序列化DWORD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"int, Integer\",\"@RequestFieldAlias.Dword()\",\"有溢出的风险\",\"long, Long\",\"@RequestFieldAlias.Dword()\",\"ByteArrayContainer\",\"@RequestFieldAlias.Dword()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.Dword()\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestFieldAlias.Dword()\",\"2.1.1 开始支持\"]},\"284\":{\"h\":\"序列化DWORD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"int, Integer\",\"@ResponseFieldAlias.Dword()\",\"long, Long\",\"@ResponseFieldAlias.Dword()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.Dword()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.Dword()\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseFieldAlias.Dword()\",\"2.1.1 开始支持\"]},\"285\":{\"h\":\"BCD\"},\"286\":{\"h\":\"反序列化BCD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"String\",\"@RequestFieldAlias.Bcd(length = xxx)\",\"ByteArrayContainer\",\"@RequestFieldAlias.Bcd(length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.Bcd(length = xxx)\",\"2.1.1 开始支持\"]},\"287\":{\"h\":\"序列号BCD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"String\",\"@ResponseFieldAlias.Bcd()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.Bcd()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.Bcd()\",\"2.1.1 开始支持\"]},\"288\":{\"h\":\"STRING\"},\"289\":{\"h\":\"反序列化STRING\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"String\",\"@RequestFieldAlias.String(length = xxx)\",\"ByteArrayContainer\",\"@RequestFieldAlias.String(length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestFieldAlias.String(length = xxx)\",\"2.1.1 开始支持\"]},\"290\":{\"h\":\"序列化STRING\",\"t\":[\"源类型\",\"注解\",\"备注\",\"String\",\"@ResponseFieldAlias.String()\",\"ByteArrayContainer\",\"@ResponseFieldAlias.String()\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseFieldAlias.String()\",\"2.1.1 开始支持\"]},\"291\":{\"h\":\"数据类型转换(传统方式)\"},\"292\":{\"h\":\"BYTE\"},\"293\":{\"h\":\"反序列化BYTE\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"byte, Byte\",\"@RequestField(dataType = BYTE)\",\"有溢出的风险\",\"short, Short\",\"@RequestField(dataType = BYTE)\",\"int, Integer\",\"@RequestField(dataType = BYTE)\",\"long, Long\",\"@RequestField(dataType = BYTE)\",\"ByteArrayContainer\",\"@RequestField(dataType = BYTE)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = BYTE)\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestField(dataType = BYTE)\",\"2.1.1 开始支持\"]},\"294\":{\"h\":\"序列化BYTE\",\"t\":[\"源类型\",\"注解\",\"备注\",\"byte, Byte\",\"@ResponseField(dataType = BYTE)\",\"short, Short\",\"@ResponseField(dataType = BYTE)\",\"int, Integer\",\"@ResponseField(dataType = BYTE)\",\"long, Long\",\"@ResponseField(dataType = BYTE)\",\"ByteArrayContainer\",\"@ResponseField(dataType = BYTE)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = BYTE)\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseField(dataType = BYTE)\",\"2.1.1 开始支持\"]},\"295\":{\"h\":\"BYTES\"},\"296\":{\"h\":\"反序列化BYTES\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"byte[], Byte[]\",\"@RequestField(dataType = BYTES, length = xxx)\",\"ByteBuf\",\"@RequestField(dataType = BYTES, length = xxx)\",\"String\",\"@RequestField(dataType = BYTES, length = xxx)\",\"ByteArrayContainer\",\"@RequestField(dataType = BYTES, length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = BYTES, length = xxx)\",\"2.1.1 开始支持\"]},\"297\":{\"h\":\"序列化BYTES\",\"t\":[\"源类型\",\"注解\",\"备注\",\"byte[], Byte[]\",\"@ResponseField(dataType = BYTES)\",\"ByteBuf\",\"@ResponseField(dataType = BYTES)\",\"String\",\"@ResponseField(dataType = BYTES)\",\"ByteArrayContainer\",\"@ResponseField(dataType = BYTES)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = BYTES)\",\"2.1.1 开始支持\"]},\"298\":{\"h\":\"WORD\"},\"299\":{\"h\":\"反序列化WORD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"short, Short\",\"@RequestField(dataType = WORD)\",\"有溢出的风险\",\"int, Integer\",\"@RequestField(dataType = WORD)\",\"long, Long\",\"@RequestField(dataType = WORD)\",\"ByteArrayContainer\",\"@RequestField(dataType = WORD)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = WORD)\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestField(dataType = WORD)\",\"2.1.1 开始支持\"]},\"300\":{\"h\":\"序列化WORD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"short, Short\",\"@ResponseField(dataType = WORD)\",\"int, Integer\",\"@ResponseField(dataType = WORD)\",\"long, Long\",\"@ResponseField(dataType = WORD)\",\"ByteArrayContainer\",\"@ResponseField(dataType = WORD)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = WORD)\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseField(dataType = WORD)\",\"2.1.1 开始支持\"]},\"301\":{\"h\":\"DWORD\"},\"302\":{\"h\":\"反序列化DWORD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"int, Integer\",\"@RequestField(dataType = DWORD)\",\"有溢出的风险\",\"long, Long\",\"@RequestField(dataType = DWORD)\",\"ByteArrayContainer\",\"@RequestField(dataType = DWORD)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = DWORD)\",\"2.1.1 开始支持\",\"BitOperator\",\"@RequestField(dataType = DWORD)\",\"2.1.1 开始支持\"]},\"303\":{\"h\":\"序列化DWORD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"int, Integer\",\"@ResponseField(dataType = DWORD)\",\"long, Long\",\"@ResponseField(dataType = DWORD)\",\"ByteArrayContainer\",\"@ResponseField(dataType = DWORD)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = DWORD)\",\"2.1.1 开始支持\",\"BitOperator\",\"@ResponseField(dataType = DWORD)\",\"2.1.1 开始支持\"]},\"304\":{\"h\":\"BCD\"},\"305\":{\"h\":\"反序列化BCD\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"String\",\"@RequestField(dataType = BCD, length = xxx)\",\"ByteArrayContainer\",\"@RequestField(dataType = BCD, length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = BCD, length = xxx)\",\"2.1.1 开始支持\"]},\"306\":{\"h\":\"序列号BCD\",\"t\":[\"源类型\",\"注解\",\"备注\",\"String\",\"@ResponseField(dataType = BCD)\",\"ByteArrayContainer\",\"@ResponseField(dataType = BCD)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = BCD)\",\"2.1.1 开始支持\"]},\"307\":{\"h\":\"STRING\"},\"308\":{\"h\":\"反序列化STRING\",\"t\":[\"目标类型\",\"注解\",\"备注\",\"String\",\"@RequestField(dataType = STRING, length = xxx)\",\"ByteArrayContainer\",\"@RequestField(dataType = STRING, length = xxx)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@RequestField(dataType = STRING, length = xxx)\",\"2.1.1 开始支持\"]},\"309\":{\"h\":\"序列化STRING\",\"t\":[\"源类型\",\"注解\",\"备注\",\"String\",\"@ResponseField(dataType = STRING)\",\"ByteArrayContainer\",\"@ResponseField(dataType = STRING)\",\"2.1.1 开始支持\",\"ByteBufContainer\",\"@ResponseField(dataType = STRING)\",\"2.1.1 开始支持\"]},\"310\":{\"h\":\"异常处理\",\"t\":[\"TODO\"]},\"311\":{\"h\":\"注解驱动开发\"},\"312\":{\"h\":\"批量位置上传报文解析示例\",\"t\":[\"警告\",\"808文档中定义的位置上传报文有很多字段，但是 许多厂商实现的 808协议 位置上传报文 只是原始808的一个子集 。\",\"本文举例用到的报文也 不是标准完整的位置上传报文，但是原理都一样。\",\"此处以 2019 版的位置批量上传报文为例，展示如何基于注解来解析报文。\"]},\"313\":{\"h\":\"解析报文到实体类\",\"t\":[\"实体类映射关系如下：\",\"@Data @Accessors(chain = true) @BuiltinComponent @Jt808RequestBody public class LocationBatchUploadMsgV2019 { // byte[0,2) WORD 数据项个数 // 从 2.1.1 开始可以不再指定 `startIndex` 属性 // 从 2.1.1 开始可以不再指定 `startIndex` 属性 // 从 2.1.1 开始可以不再指定 `startIndex` 属性 // @RequestField(order = 100, startIndex = 0, dataType = WORD) @RequestField(order = 100, dataType = WORD) // @RequestFieldAlias.Word(order = 100) // v2.1.1 private int count; // byte[2] WORD 位置数据类型 @RequestField(order = 200, dataType = BYTE) // @RequestFieldAlias.Byte(order = 200) private int type; @RequestField(order = 300, lengthExpression = \\\"#ctx.msgBodyLength() - 3\\\", dataType = LIST) // @RequestFieldAlias.List(order = 300, lengthExpression = \\\"#ctx.msgBodyLength() - 3\\\") private List<Msg0704Item> itemList; @Data @Accessors(chain = true) public static class Msg0704Item { // byte[0,2) WORD 位置汇报数据体长度 @RequestField(order = 100, dataType = WORD) // @RequestFieldAlias.Word(order = 100) private int msgLength; // byte[2,n) WORD 位置汇报数据体 @RequestField(order = 200, lengthExpression = \\\"msgLength\\\", dataType = OBJECT) // @RequestFieldAlias.Object(order = 200, lengthExpression = \\\"msgLength\\\") private LocationUploadMsgV2019 locationInfo; } } \",\"消息处理器如下：\",\"@Slf4j @Component @Jt808RequestHandler public class LocationMsgHandler { @Jt808RequestHandlerMapping(msgType = 0x0704) public BuiltinServerCommonReplyMsg processLocationBatchUploadMsgV2019(Jt808RequestEntity<LocationBatchUploadMsgV2019> request) { log.info(\\\"LocationBatchUpload -- V2019 -- {}\\\", request.body()); return BuiltinServerCommonReplyMsg.success(request.msgId(), request.flowId()); } } \"]},\"314\":{\"h\":\"测试\",\"t\":[\"测试报文如下\",\"7E070400E401583860765500040003010049000000000004000301D9F190073CA3C1000C00000000211204082941010400D728AD3001003101092504000000001404000000041504000000001604000000001702000118030000000049000000000004000301D9F190073CA3C1000C00000000211130171352010400D728AD3001003101092504000000001404000000041504000000001604000000001702000118030000000049000000000004000301D9F190073CA3C1000C00000000211130171357010400D728AD300115310109250400000000140400000004150400000000160400000000170200011803000000407E \",\"消息处理器截图如下：\"]},\"315\":{\"h\":\"位置上传报文解析示例\",\"t\":[\"警告\",\"808文档中定义的位置上传报文有很多字段，但是 许多厂商实现的 808协议 位置上传报文 只是原始808的一个子集 。\",\"本文举例用到的报文也 不是标准完整的位置上传报文，但是原理都一样。\",\"此处以 2019 版的位置上传报文为例，展示如何基于注解来解析报文。\"]},\"316\":{\"h\":\"解析报文到实体类\",\"t\":[\"实体类映射关系如下：\",\"@Data @Accessors(chain = true) @Jt808RequestBody public class LocationUploadMsgV2019 { // (1). byte[0,4) DWORD 报警标志 // @RequestField(order = 1, startIndex = 0, dataType = DWORD) // 从 2.1.1 开始可以不再指定 `startIndex` 属性 // 从 2.1.1 开始可以不再指定 `startIndex` 属性 // 从 2.1.1 开始可以不再指定 `startIndex` 属性 @RequestField(order = 1, dataType = DWORD) // @RequestFieldAlias.Dword(order = 1) // v2.1.1 private long alarmFlag; // (2). byte[4,8) DWORD 状态 @RequestField(order = 2, dataType = DWORD) // @RequestFieldAlias.Dword(order = 2) private int status; // 将上面的 status 字段的第0位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private int accIntStatus; // 将上面的 status 字段的第0位取出转为 boolean 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private Boolean accBooleanStatus; // 0 北纬;1 南纬 // 将上面的 status 字段的第2位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 2) private int latType; // (3). byte[8,12) DWORD 纬度 @RequestField(order = 3, dataType = DWORD) // @RequestFieldAlias.Dword(order = 3) private long lat; // (4). byte[12,16) DWORD 经度 @RequestField(order = 4, dataType = DWORD) // @RequestFieldAlias.Dword(order = 4) private long lng; // (5). byte[16,18) WORD 高度 @RequestField(order = 5, dataType = WORD) // @RequestFieldAlias.Word(order = 5) private Integer height; // (6). byte[18,20) WORD 速度 @RequestField(order = 6, dataType = WORD) // @RequestFieldAlias.Word(order = 6) private int speed; // (7). byte[20,22) WORD 方向 @RequestField(order = 7, dataType = WORD) // @RequestFieldAlias.Word(order = 6) private Integer direction; // (8). byte[22,28) BCD[6] 时间 @RequestField(order = 8, dataType = BCD, length = 6) // @RequestFieldAlias.Bcd(order = 8, length = 6) private String time; // @RequestFieldAlias.BcdDateTime(order = 8) // private LocalDateTime time; // (9). byte[28,n) 附加项列表 // @RequestField(order = 9, dataType = LIST, lengthExpression = \\\"#request.msgBodyLength() - 28\\\") @RequestField(order = 9, dataType = LIST, lengthExpression = \\\"#ctx.msgBodyLength() - 28\\\") // @RequestFieldAlias.List(order = 9, lengthExpression = \\\"#ctx.msgBodyLength() - 28\\\") private List<ExtraItem> extraItemList; @Data public static class ExtraItem { // 附加信息ID @RequestField(order = 0, dataType = BYTE) // @RequestFieldAlias.Byte(order = 0) private int id; // 附加信息长度 @RequestField(order = 1, dataType = BYTE) // @RequestFieldAlias.Byte(order = 1) private int contentLength; // 附加信息内容 @RequestField(order = 3, lengthExpression = \\\"#this.contentLength\\\", dataType = BYTES) // @RequestFieldAlias.Bytes(order = 3, lengthExpression = \\\"#this.contentLength\\\") // private byte[] content; // 2.0.0 开始支持 private ByteArrayContainer content; // 2.1.1 开始支持 // private ByteBufContainer content; // 2.1.1 开始支持 } } \",\"消息处理器如下：\",\"@Slf4j @Component @Jt808RequestHandler public class LocationMsgHandler { @Jt808RequestHandlerMapping(msgType = 0x0200, versions = VERSION_2019) public BuiltinServerCommonReplyMsg processLocationUploadMsgV2019(Jt808RequestEntity<LocationUploadMsgV2019> request) { log.info(\\\"LocationUpload -- V2019 -- {}\\\", request.body()); return BuiltinServerCommonReplyMsg.success(request.msgId(), request.flowId()); } } \"]},\"317\":{\"h\":\"测试\",\"t\":[\"测试报文如下\",\"7e02004086010000000001893094655200E4000000000000000101D907F2073D336C000000000000211124114808010400000026030200003001153101002504000000001404000000011504000000FA160400000000170200001803000000EA10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF02020000EF0400000000F31B017118000000000000000000000000000000000000000000000000567e \",\"消息处理器截图如下：\"]},\"318\":{\"h\":\"内置消息说明\",\"t\":[\"内置消息说明\",\"io.github.hylexus.jt.jt808.spec.builtin.msg.req 包下内置了一些 请求消息 实体类映射示例\",\"io.github.hylexus.jt.jt808.spec.builtin.msg.resp 包下内置了一些 响应消息 实体类映射示例\",\"这些类命名格式都是 BuiltinMsgXxx 或 BuiltinMsgXxxAlias, 以 Alias 结尾的示例是 v2.1.1 开始加入的。\",\"这些类只是个示例，很可能不符合你的需求，你应该复制一份出来修改(不同版本可能有改动)。\"]},\"319\":{\"h\":\"请求消息映射\"},\"320\":{\"h\":\"@Jt808RequestHandler\",\"t\":[\"@Jt808RequestHandler 注解的作用类似于 WebFlux/WebMvc 中的 @Controller/@RestController。\",\"就是标记一下被该注解修饰的类中存在若干个能处理请求的处理器方法。没有其他任何属性。\",\"警告\",\"被该注解标记的类应该是被 Spring 管理的类。一般来说应该和 Spring 的 @Component 等注解同时出现。\",\"因为在 2.x 中去掉了配置包手动扫描的功能(配置繁琐，还不如直接交给 Spring 来处理)。\"]},\"321\":{\"h\":\"@Jt808RequestHandlerMapping\",\"t\":[\"该注解和 WebFlux/WebMvc 中 @RequestMapping 、@GetMapping 等注解功能类似。\",\"表明被该注解修饰的方法具有处理请求的能力。\"]},\"322\":{\"h\":\"属性\",\"t\":[\"属性\",\"说明\",\"默认值\",\"示例\",\"msgType\",\"消息类型\",\"--\",\"{0x0001}、{0x0102}\",\"versions\",\"协议版本\",\"AUTO_DETECTION\",\"VERSION_2013 、{VERSION_2019,VERSION_2013}\",\"desc\",\"描述信息\",\"\\\"\\\"\",\"\\\"Some description ...\\\"\"]},\"323\":{\"h\":\"示例\",\"t\":[\"@Component @Jt808RequestHandler public class CommonHandler { @Jt808RequestHandlerMapping(msgType = 0x0100, versions = VERSION_2019, desc = \\\"xxx\\\") public TerminalRegisterReplyMsg clientRegisterV2019(Jt808RequestEntity<BuiltinMsg0100V2019> request) { final BuiltinMsg0100V2019 body = request.body(); log.info(\\\"client register v2019 : {}\\\", body); return new TerminalRegisterReplyMsg().setFlowId(request.flowId()).setResult((byte) 0).setAuthCode(\\\"AuthCode2019----\\\"); } } \"]},\"324\":{\"h\":\"@Jt808RequestBody\",\"t\":[\"该注解和 WebFlux/WebMvc 中 @RequestBody 注解功能类似。 可以将 请求体 映射到被该注解修饰的类。\",\"和 @Jt808RequestHandler 注解一样，该注解仅仅起一个标记作用，暂时没有其他属性。\"]},\"325\":{\"h\":\"@RequestField\"},\"326\":{\"h\":\"属性\",\"t\":[\"属性\",\"说明\",\"默认值\",\"示例\",\"order\",\"字段解析顺序(不要求连续，只比较大小)\",\"--\",\"0、1、2\",\"startIndex\",\"起始字节索引(2.1.1开始不再需要指定)\",\"-1\",\"0、2、4、8\",\"startIndexExpression\",\"作用和 startIndex 相同,但是该属性是基于 SpEL 的(2.1.1开始不再需要指定)\",\"\\\"\\\"\",\"\\\"#ctx.msgBodyLength() - 27 + 1\\\"\",\"startIndexMethod\",\"作用和 startIndex 相同,但是该属性返回的是一个方法名(2.1.1开始不再需要指定)\",\"\\\"\\\"\",\"somMethodName\",\"length\",\"该字段所占的字节数、长度\",\"-1\",\"2、4\",\"lengthExpression\",\"作用和 length 相同,但是该属性是基于 SpEL 的\",\"\\\"\\\"\",\"#this.someFieldValue + 1 - 2 * 3\",\"lengthMethod\",\"作用和 length 相同, 但是该属性返回的是一个 方法名\",\"\\\"\\\"\",\"\\\"SomMethodName\\\"\",\"dataType\",\"数据类型\",\"--\",\"DWORD 、BYTES\",\"customerFieldDeserializerClass\",\"自定义的类型转换器\",\"--\",\"XxxDeserializer.class\"]},\"327\":{\"h\":\"SpEL\",\"t\":[\"该注解的 startIndexExpression 和 lengthExpression 两个属性支持 SpEL。可用的 SpEL元数据如下：\",\"属性\",\"说明\",\"this\",\"正在迭代的当前对象\",\"request\",\"本次请求对应的 Jt808Request 实例\",\"header\",\"本次请求对应的 Jt808Request#header() 实例\",\"ctx\",\"AnnotationDecoderContext 实例，代表正在迭代对象的上下文(msgBodyLength 属性代表当前正在迭代的数据大小(字节数))\",\"context\",\"同 ctx\",\"提示\",\"SpEL 绑定的 RootObject 就是当前正在迭代的对象。\",\"所以 #this.someField 等价于 someField、#this.someMethod() 等价于 someMethod() (#this 可以省略)。\"]},\"328\":{\"h\":\"示例\",\"t\":[\"提示\",\"从 2.1.1 开始 startIndex, startIndexExpression, startIndexMethod 可以省略。\",\"@Jt808RequestBody public class BuiltinMsg0100V2019 { // 1. [0-2) WORD 省域ID // WORD 类型固定长度就是2字节 所以无需指定length @RequestField(order = 1, dataType = WORD) private int provinceId; // 2. [2-4) WORD 省域ID @RequestField(order = 2, dataType = WORD) private int cityId; // 3. [4-15) BYTE[11] 制造商ID @RequestField(order = 3, dataType = STRING, length = 11) private String manufacturerId; // 4. [15-45) BYTE[30] 终端型号 @RequestField(order = 4, dataType = STRING, length = 30) private String terminalType; // 5. [45-75) BYTE[30] 终端ID @RequestField(order = 5, dataType = STRING, length = 30) private String terminalId; // 6. [75] BYTE 车牌颜色 @RequestField(order = 6, dataType = BYTE) private byte color; // 7. [76,n) String 车辆标识 // 使用 SpEL 计算消息长度(上下文中的消息体总长度减去前面消费掉的字节数) @RequestField(order = 7, dataType = STRING, lengthExpression = \\\"#ctx.msgBodyLength() - 76\\\") private String carIdentifier; } \"]},\"329\":{\"h\":\"@SlicedFrom\",\"t\":[\"警告\",\"该注解目前仅仅适用于 int 、 short 、 byte 类型的字段。\",\"2.1.1 开始支持 long 类型。\"]},\"330\":{\"h\":\"属性\",\"t\":[\"sourceFieldName\",\"源字段名\",\"bitIndex\",\"源字段中的第几个bit\",\"0\",\"startBitIndex\",\"源字段中的起始bit索引\",\"1\",\"endBitIndex\",\"源字段中的终止bit索引\",\"2\"]},\"331\":{\"h\":\"示例\",\"t\":[\"提示\",\"从 2.1.1 开始 startIndex, startIndexExpression, startIndexMethod 可以省略。\",\"@Jt808RequestBody public class BuiltinMsg0200V2013 { // (2). byte[4,8) DWORD 状态 @RequestField(order = 2, dataType = DWORD) private int status; // 将上面的 status 字段的第0位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private int accIntStatus; // 将上面的 status 字段的第0位取出转为 boolean 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 0) private Boolean accBooleanStatus; // 0 北纬;1 南纬 // 将上面的 status 字段的第2位取出转为 int 类型 @SlicedFrom(sourceFieldName = \\\"status\\\", bitIndex = 2) private int latType; } \"]},\"332\":{\"h\":\"响应消息映射\"},\"333\":{\"h\":\"@Jt808ResponseBody\",\"t\":[\"该注解的作用类似于 WebFlux/WebMvc 中的 @ResponseBody 。\",\"表明被该注解标记的类可以作为 响应体。\"]},\"334\":{\"h\":\"属性\",\"t\":[\"属性\",\"说明\",\"默认值\",\"示例\",\"msgId\",\"消息类型\",\"--\",\"{0x8103}、{0x8001}\",\"maxPackageSize\",\"单个数据包的最大大小(转义之前)\",\"1024\",\"1024 、 2048\",\"desc\",\"描述信息\",\"\\\"\\\"\",\"\\\"Some description ...\\\"\",\"reversedBit15InHeader\",\"消息体属性中保留的第15个 bit\",\"0\"]},\"335\":{\"h\":\"示例\",\"t\":[\"@Jt808ResponseBody(msgId = 0x8103, desc = \\\"设置终端参数\\\") public class RespTerminalSettings { @ResponseField(order = 2, dataType = MsgDataType.LIST) private List<ParamItem> paramList; // ... } \"]},\"336\":{\"h\":\"@ResponseField\"},\"337\":{\"h\":\"属性\",\"t\":[\"属性\",\"说明\",\"默认值\",\"示例\",\"order\",\"赋值顺序，值越小优先级越高(不要求连续，只比较大小)\",\"--\",\"0、1、2\",\"dataType\",\"数据类型\",\"--\",\"WORD、BYTE\",\"conditionalOn\",\"支持 SpEL , 当且仅当计算结果为 true 时才会序列化\",\"\\\"\\\"\",\"\\\"#this.result == 0\\\"\",\"customerFieldSerializerClass\",\"自定义反序列化器\",\"--\",\"\\\"XxxSerializer.class\\\"\"]},\"338\":{\"h\":\"SpEL\",\"t\":[\"属性\",\"说明\",\"this\",\"正在迭代的当前对象\",\"永不为空\",\"request\",\"本次请求对应的 Jt808Request 实例\",\"主动下发消息时为空(因为此时没有 Request 的概念)\",\"header\",\"本次请求对应的 Jt808Request#header() 实例\",\"主动下发消息时为空(因为此时没有 Request 的概念)\",\"session\",\"Jt808Session 实例\",\"手动编码消息时可能为空\",\"提示\",\"SpEL 绑定的 RootObject 就是当前正在迭代的对象。\",\"所以 #this.someField 等价于 someField、#this.someMethod() 等价于 someMethod() (#this 可以省略)。\"]},\"339\":{\"h\":\"示例\",\"t\":[\"@Data @Accessors(chain = true) @Jt808ResponseBody(msgId = 0x8100) public class TerminalRegisterReplyRespMsg { // 1. byte[0,2) WORD 对应的终端注册消息的流水号 @ResponseField(order = 0, dataType = MsgDataType.WORD) private int flowId; // 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端 @ResponseField(order = 1, dataType = MsgDataType.BYTE) private byte result; // 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段) @ResponseField(order = 3, dataType = MsgDataType.STRING, conditionalOn = \\\"result == 0\\\") private String authCode; } \"]},\"340\":{\"h\":\"编译源码\"},\"341\":{\"h\":\"请先读我\",\"t\":[\"提示\",\"一般情况下，你无需编译源码。直接引 为 spring-boot 提供的 starter 即可：\",\"spring-boot-3.x : 引入 jt-808-server-spring-boot-starter\",\"spring-boot-2.x : 引入 jt-808-server-spring-boot-starter-boot2\",\"如果你要体验最新版 或者 要基于源码二次开发，可以参考下文的说明来编译源码：\"]},\"342\":{\"h\":\"要求\"},\"343\":{\"h\":\"为什么编译源码一定要 JDK17？\",\"t\":[\"为什么编译源码一定要 JDK17？\",\"因为 jt-808-server-spring-boot-starter 模块是为 spring-boot-3.x 提供的，spring-boot-3.x 必须使用 JDK17+。\",\"其他模块虽然也用了 JDK17，但是编译级别是 JDK11。\"]},\"344\":{\"h\":\"JDK版本要求\",\"t\":[\"从 2.1.0 开始支持 spring-boot-3.x，所以编译源码的 JDK 版本必须在 JDK-17 (包括)以上。\",\"相关信息\",\"虽然源码要求的 JDK 版本必须在 17 以上，但是实际上：\",\"只有 jt-808-server-spring-boot-starter 模块必须使用 JDK-17，编译后的 .class 文件版本为 61 (JDK-17)\",\"其余模块编译后的 .class 文件版本依然是 55 (JDK-11)；也就是说使用 JDK17 编译输出了 JDK11 对应的 .class\",\"各个模块的 JDK版本 见下面表格：\",\"Module\",\"JDK\",\"CompileLevel\",\".class\",\"jt-808-server-spring-boot-starter\",\"17\",\"JDK-17\",\"61 (JDK-17)\",\"jt-808-server-spring-boot-starter-boot2\",\"17\",\"JDK-11\",\"55 (JDK-11)\",\"jt-808-server-spring-boot-autoconfigure\",\"17\",\"JDK-11\",\"55 (JDK-11)\",\"jt-808-server-support\",\"17\",\"JDK-11\",\"55 (JDK-11)\",\"jt-808-server-core\",\"17\",\"JDK-11\",\"55 (JDK-11)\",\"在 gradle.properties 配置文件里有两个 JDK 版本的配置:\",\"maximumJavaVersion 是 jt-808-server-spring-boot-starter 用到的 JDK版本\",\"defaultJavaVersion 是其余模块用到的\",\"# spring-boot-2.x defaultJavaVersion=11 # spring-boot-3.x maximumJavaVersion=17 \",\"注意\",\"如果没有特殊需求，不建议对 defaultJavaVersion 降级(改为比 11 更低的版本) \",\"因为当前源码的最低要求是 JDK11\",\"降级之后可能有一些 Java 语法不兼容\",\"maximumJavaVersion 这个配置项必须 >= 17, 因为这个是给 spring-boot-3.x 用的\",\"但是你可以将 defaultJavaVersion 或 / 和 maximumJavaVersion 升级(改为高版本)\"]},\"345\":{\"h\":\"spring-boot版本要求\",\"t\":[\"在 gradle.properties 配置文件里有两个 spring-boot 版本的配置:\",\"maximumSpringBootBomVersion 是 jt-808-server-spring-boot-starter 用到的 spring-boot 版本\",\"defaultSpringBootBomVersion 是其余模块用到的 spring-boot 版本\",\"# spring-boot-2.x defaultSpringBootBomVersion=2.6.14 # spring-boot-3.x maximumSpringBootBomVersion=3.0.2 \",\"相关信息\",\"如果没有特殊需求，也没必要修改源码中的 spring-boot 版本。\",\"defaultSpringBootBomVersion 可取值为 [2.2.x, 2.6.x]\",\"maximumSpringBootBomVersion 可取值为 [3.0.0, ...)\"]},\"346\":{\"h\":\"编译\",\"t\":[\"注意\",\"不建议自己单独安装 gradle。你应该直接使用项目中指定版本的 gradle-wrapper。\"]},\"347\":{\"h\":\"命令行编译\",\"t\":[\"编译命令：\",\"./gradlew clean build \",\"详情\",\"~ ls CHANGELOG.md gradle.properties jt-808-server-support README.md gradlew jt-core build-script gradlew.bat jt-spring build.gradle jt-808-server-spring-boot-autoconfigure samples docs jt-808-server-spring-boot-starter settings.gradle gradle jt-808-server-spring-boot-starter-boot2 # 使用 项目中自带的 gradlew 来编译 ~ ./gradlew clean build > Configure project : the maven repo credentials file <<repo-credentials.gradle>> will be load from : /xxx/xxx/.gradle/repo-credentials.gradle [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-808-server-spring-boot-autoconfigure] [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-808-server-spring-boot-starter] [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-808-server-spring-boot-starter-boot2] [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-808-server-support] [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-core] [[ MavenRepo ]] --> (aliyun)[release] <-- [jt-spring] BUILD SUCCESSFUL in 7s 73 actionable tasks: 71 executed, 2 up-to-date \"]},\"348\":{\"h\":\"导入Idea\",\"t\":[\"注意\",\"请先给 Idea 装好 lombok 插件\",\"请确保 jdk.version >= 17\",\"1). 项目 JDK版本 配置：\",\"2). GradleJDK版本 配置:\",\"打开 idea 的 gradle 配置界面:\",\"修改 gradle 用到的 JDK版本 为 JDK17+\"]},\"349\":{\"h\":\"导入Eclipse\",\"t\":[\"注意\",\"请先给 Eclipse 装好 lombok 插件\",\"请确保 jdk.version >= 17\",\"第一次导入报错\",\"先执行 ./gradlew eclipse 命令，为 eclipse 生成配置。\",\"然后 refresh 所有模块\",\"导入后，效果如下：\"]},\"350\":{\"h\":\"兼容性\"},\"351\":{\"h\":\"请先读我\",\"t\":[\"警告\",\"2.1.x 以下的版本 \",\"只有一个为 spring-boot-2.x 提供的 jt-808-server-spring-boot-stater\",\"并且模块名中的 starter 单词拼写错误(写成了 stater)\",\"并没有为 spring-boot-3.x 提供 starter\",\"实际上，至少在 spring-boot-3.0.1 中还是能正常解析 spring-boot-2.x 的 starter 的\",\"2.1.x 开始，提供了两个 starter\",\"jt-808-server-spring-boot-starter 为 spring-boot-3.x 提供的 starter\",\"jt-808-server-spring-boot-starter-boot2 为 spring-boot-2.x 提供的 starter\",\"后续版本会以 spring-boot-3.x 为主，同时尽量兼容 spring-boot-2.x\"]},\"352\":{\"h\":\"项目模块介绍\",\"t\":[\"默认 JDK版本 和 spring-boot版本 见下表:\",\"Module\",\"JDK\",\"CompileLevel\",\".class\",\"spring-boot\",\"jt-808-server-spring-boot-starter\",\"17\",\"JDK-17\",\"61 (JDK-17)\",\"3.0.2\",\"jt-808-server-spring-boot-starter-boot2\",\"17\",\"JDK-11\",\"55 (JDK-11)\",\"2.6.14\",\"jt-808-server-spring-boot-autoconfigure\",\"17\",\"JDK-11\",\"55 (JDK-11)\",\"2.6.14\",\"jt-808-server-support\",\"17\",\"JDK-11\",\"55 (JDK-11)\",\"--\",\"jt-808-server-core\",\"17\",\"JDK-11\",\"55 (JDK-11)\",\"--\"]},\"353\":{\"h\":\"JDK\",\"t\":[\"项目源码要求的 JDK版本 为 JDK17+\",\"但是编译之后的 jar 包中 .class 文件最低要求为 JDK11+\",\"提示\",\"也就是说：\",\"如果你直接在 本项目源码 上进行业务开发(不推荐) \",\"必须满足 java.version >= 17\",\"如果你是将本项目发布的 jar文件 依赖到你的项目里 \",\"基于 spring-boot-2.x 的项目, 满足 java.version >= 11 即可\",\"基于 spring-boot-3.x 的项目, 必须满足 java.version >= 17\"]},\"354\":{\"h\":\"spring-boot\"},\"355\":{\"h\":\"请先读我\",\"t\":[\"警告\",\"注意区分 jt-808-server-spring-boot-starter 和 jt-808-server-spring-boot-starter-boot2 两个 starter, 从 2.1.x 开始:\",\"jt-808-server-spring-boot-starter 是给 spring-boot-3.x 提供的\",\"jt-808-server-spring-boot-starter-boot2 是给 spring-boot-2.x 提供的\"]},\"356\":{\"h\":\"内置版本\",\"t\":[\"除了 jt-808-server-spring-boot-starter 模块依赖的 spring-boot版本 是 3.0.2 外，其他模块依赖的 spring-boot版本 都是 2.6.14。\",\"这里只讨论 spring-boot版本，至于 spring-boot 依赖的 spring-framework 的版本以对应版本的 spring-boot-dependencies 依赖为准。\",\"提示\",\"你可以按你的需求调整 jt-framework 中默认的 spring-boot 版本。\"]},\"357\":{\"h\":\"spring-boot-2.x\",\"t\":[\"在 spring-boot-2.x 的项目中，你可以像下面这样修改 jt-framework 自带的 spring-boot 版本:\",\" <dependencies> <dependency> <groupId>io.github.hylexus.jt</groupId> <artifactId>jt-808-server-spring-boot-starter-boot2</artifactId> <version>2.1.1</version> <!-- 1. 排除 jt-framework 自带的 spring-boot-starter(2.6.14) --> <exclusions> <exclusion> <artifactId>spring-boot-starter</artifactId> <groupId>org.springframework.boot</groupId> </exclusion> </exclusions> </dependency> <!-- 2. 按需求引入需要的 spring-boot 版本 --> <dependency> <artifactId>spring-boot-starter</artifactId> <groupId>org.springframework.boot</groupId> <!-- 使用2.5.12替换 jt-framework内置的 2.6.14 --> <!-- jt-808-server-spring-boot-starter-boot2(注意和 spring-boot-3.x项目的区别) 对应的 spring-boot.version ∈ [2.2.x, 2.6.x] --> <!-- jt-808-server-spring-boot-starter-boot2(注意和 spring-boot-3.x项目的区别) 对应的 spring-boot.version ∈ [2.2.x, 2.6.x] --> <!-- jt-808-server-spring-boot-starter-boot2(注意和 spring-boot-3.x项目的区别) 对应的 spring-boot.version ∈ [2.2.x, 2.6.x] --> <version>2.5.12</version> </dependency> </dependencies> \"]},\"358\":{\"h\":\"spring-boot-3.x\",\"t\":[\"在 spring-boot-3.x 的项目中，你可以像下面这样修改 jt-framework 自带的 spring-boot 版本:\",\" <dependencies> <dependency> <groupId>io.github.hylexus.jt</groupId> <artifactId>jt-808-server-spring-boot-starter</artifactId> <version>2.1.1</version> <exclusions> <!-- 1. 排除 jt-framework 自带的 spring-boot-starter(3.0.2) --> <exclusion> <artifactId>spring-boot-starter</artifactId> <groupId>org.springframework.boot</groupId> </exclusion> </exclusions> </dependency> <!-- 2. 按需求引入需要的 spring-boot 版本 --> <dependency> <artifactId>spring-boot-starter</artifactId> <groupId>org.springframework.boot</groupId> <!-- 使用3.0.0替换 jt-framework内置的 3.0.2 --> <!-- jt-808-server-spring-boot-starter(注意和 spring-boot-2.x项目的区别) 对应的 spring-boot.version ∈ [3.0.x, ...] --> <!-- jt-808-server-spring-boot-starter(注意和 spring-boot-2.x项目的区别) 对应的 spring-boot.version ∈ [3.0.x, ...] --> <!-- jt-808-server-spring-boot-starter(注意和 spring-boot-2.x项目的区别) 对应的 spring-boot.version ∈ [3.0.x, ...] --> <version>3.0.0</version> </dependency> </dependencies> \"]},\"359\":{\"h\":\"入门\"},\"360\":{\"h\":\"消息类型\"},\"361\":{\"h\":\"MsgType\",\"t\":[\"提示\",\"各个厂商对 808协议 都是选择性的实现，同时还有自定义的消息类型。\",\"所以，并没有内置所有类型的消息，而是定义了一个 MsgType 接口以供用户自行扩展。\",\"建议实现接口的时候使用枚举\",\"点击查看 MsgType 接口定义\",\"public interface MsgType { /** * @return 消息ID(消息头中的前两个字节) */ int getMsgId(); /** * @param msgId 消息ID * @return 转换之后的 {@link MsgType} 实例 */ Optional<MsgType> parseFromInt(int msgId); String getDesc(); String toString(); } \",\"每个项目都应该提供一个自己的 MsgType 实现，参考下面的 MyMsgType 定义：\",\"public enum MyMsgType implements MsgType { CLIENT_REGISTER(0x0100, \\\"终端注册\\\"), CLIENT_AUTH(0x0102, \\\"终端鉴权\\\"), // ... // 在这里继续扩你的消息类型就行了(即便是和内置的重复了也会使用你自定义的) ; private final int msgId; private final String desc; MyMsgType(int msgId, String desc) { this.msgId = msgId; this.desc = desc; } private final static Map<Integer, MsgType> mappings = new HashMap<>(values().length); static { for (MyMsgType value : values()) { mappings.put(value.msgId, value); } } @Override public Optional<MsgType> parseFromInt(int msgId) { return Optional.ofNullable(mappings.get(msgId)); } @Override public int getMsgId() { return msgId; } @Override public String getDesc() { return desc; } } \"]},\"362\":{\"h\":\"Jt808MsgTypeParser\",\"t\":[\"Jt808MsgTypeParser 负责解析 MsgType。\",\"点击查看 Jt808MsgTypeParser 接口定义\",\"public interface Jt808MsgTypeParser { Optional<MsgType> parseMsgType(int msgId); } \",\"注意\",\"每个项目都应该提供一个自己的 Jt808MsgTypeParser 实现并加入到 Spring 容器中。参考下面的 MyJt808Config 定义：\",\" @Configuration public class MyJt808Config { @Bean public Jt808MsgTypeParser jt808MsgTypeParser() { // 下面代码中的 `MyMsgType` 指的就是你自定义的类型(你只需要在你自己的 `MyMsgType` 中扩展枚举就行了) // 优先使用自定义类型解析 return msgId -> MyMsgType.CLIENT_AUTH.parseFromInt(msgId) // 使用内置类型解析 .or(() -> BuiltinJt808MsgType.CLIENT_AUTH.parseFromInt(msgId)); } } \"]},\"363\":{\"h\":\"Maven版示例\",\"t\":[\"Maven版示例项目\",\"这里只是将源码中 samples 目录下的项目复制了一份改成了 Maven 项目。\",\"Github: https://github.com/hylexus/jt-framework-samples-maven\",\"Gitee: https://gitee.com/hylexus/jt-framework-samples-maven\"]},\"364\":{\"h\":\"快速开始\",\"t\":[\"此处将展示一个 最少配置 的 808协议 消息处理服务的搭建。\",\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-bare 下找到对应代码。\"]},\"365\":{\"h\":\"创建工程\",\"t\":[\"创建一个空的 spring-boot 工程。\",\"传送门\",\"可以使用 Spring Initializer 快速初始化一个 Spring Boot 工程。\"]},\"366\":{\"h\":\"添加依赖\"},\"367\":{\"h\":\"spring-boot-2.x\",\"t\":[\"使用 spring-boot-2.x 的项目引入为 808协议 提供的 jt-808-server-spring-boot-starter-boot2\"]},\"368\":{\"h\":\"spring-boot-3.x\",\"t\":[\"使用 spring-boot-3.x 的项目引入为 808协议 提供的 jt-808-server-spring-boot-starter\"]},\"369\":{\"h\":\"配置\",\"t\":[\"application.yml\",\"jt808: built-components: component-statistics: enabled: true request-handlers: enabled: true logging: level.root: info level.io.github.hylexus: info level.jt-808.request.decoder: debug level.jt-808.response.encoder: debug \"]},\"370\":{\"h\":\"测试\"},\"371\":{\"h\":\"启动项目\",\"t\":[\"至此，对 808消息 的处理服务已经搭建完毕。启动 spring-boot 项目开始测试。\",\"可以从启动日志中的组件统计信息中看到内置了一些消息处理器：\",\"0x0100 终端注册\",\"0x0102 终端鉴权\",\"0x0200 定位数据上报\",\"0x0704 定位数据批量上报\",\"所以现在可以测试接收内置的这些类型的消息了。下面以 2019 版的 终端注册消息 为例进行测试：\",\"配置提示\",\"组件统计信息 的开关由配置项 jt808.print-component-statistics = true|false 来控制\",\"默认的 TCP 端口为 6808\"]},\"372\":{\"h\":\"发报文\",\"t\":[\"警告\",\"注意：\",\"无论以什么发包工具发包，都请记得以 十六进制格式 发送！可以参考 推荐发包工具 。\",\"报文\",\"[7E010040560100000000013912344321007B000B0000313233353931323335393131323334353637383930313233343536373839303132333435363738393069643132333435363738393031323334353637383930313233343536373801B8CA4A2D3635343332313C7E] \",\"客户端\"]},\"373\":{\"h\":\"服务端\",\"t\":[\"传送门\",\"本小节的示例可以在 samples/jt-808-server-sample-bare 下找到对应代码。\"]},\"374\":{\"h\":\"基本术语\",\"t\":[\"在 2.x 中，所有的核心 API 都重写了 (fluent 风格)。几个关键接口如下：\"]},\"375\":{\"h\":\"Jt808Request\",\"t\":[\"客户端请求消息中的字节流最终会解析到 Jt808Request 里。Jt808Request 接口内容如下：\",\"public interface Jt808Request { /** * @return 消息ID */ MsgType msgType(); /** * @return 请求头 */ Jt808RequestHeader header(); /** * @return 原始报文(转义之后) */ ByteBuf rawByteBuf(); /** * @return 消息体(转义之后) */ ByteBuf body(); /** * @return 校验码(原始报文) */ byte originalCheckSum(); /** * @return 校验码(计算后) * @see Jt808MsgBytesProcessor#calculateCheckSum(ByteBuf) */ byte calculatedCheckSum(); // ... } \"]},\"376\":{\"h\":\"Jt808Response\",\"t\":[\"与 Jt808Request 相对应，处理完消息之后回复给客户端的数据对应着 Jt808Response 接口：\",\"public interface Jt808Response extends Jt808ByteWriter { int DEFAULT_MAX_PACKAGE_SIZE = 1024; // ... /** * byte[0,2) -- {@link MsgDataType#WORD WORD} -- 消息ID */ int msgType(); Jt808ProtocolVersion version(); /** * {@link Jt808ProtocolVersion#VERSION_2011 VERSION_2011} -- byte[4,10) -- {@link MsgDataType#BCD BCD[6]} -- 终端手机号 * <p> * {@link Jt808ProtocolVersion#VERSION_2019 VERSION_2019} -- byte[5,15) -- {@link MsgDataType#BCD BCD[10]} -- 终端手机号 */ String terminalId(); /** * {@link Jt808ProtocolVersion#VERSION_2011 VERSION_2011} -- byte[10,11) -- {@link MsgDataType#WORD WORD} -- 流水号 * <p> * {@link Jt808ProtocolVersion#VERSION_2019 VERSION_2019} -- byte[15,16) -- {@link MsgDataType#WORD WORD} -- 流水号 */ int flowId(); ByteBuf body(); // ... } \"]},\"377\":{\"h\":\"Jt808Session\",\"t\":[\"和客户端对应的连接都用一个叫做 Jt808Session 类来表示：\",\"public interface Jt808Session extends Jt808FlowIdGenerator { // ... /** * @param byteBuf 待发送给客户端的数据 */ void sendMsgToClient(ByteBuf byteBuf) throws JtCommunicationException; /** * @return 当前流水号，并自增 * @see #currentFlowId(boolean) */ int currentFlowId(); default String sessionId() { return id(); } Channel channel(); Jt808Session channel(Channel channel); String terminalId(); /** * @return 当前终端的协议版本号 */ Jt808ProtocolVersion protocolVersion(); /** * @return 上次通信时间 */ long lastCommunicateTimestamp(); Jt808Session lastCommunicateTimestamp(long lastCommunicateTimestamp); } \"]},\"378\":{\"h\":\"Jt808ServerExchange\",\"t\":[\"在实际处理消息的过程中，将 Jt808Request、Jt808Response 和 Jt808Session 都封装在了一个叫 Jt808ServerExchange 的对象里。\",\"和 Spring 的 WebFlux 中的 org.springframework.web.server.ServerWebExchange 有类似的作用。\",\"public interface Jt808ServerExchange { Jt808Request request(); Jt808Response response(); Jt808Session session(); } \"]},\"379\":{\"h\":\"编码解码相关\"},\"380\":{\"h\":\"Jt808MsgBytesProcessor\",\"t\":[\"Jt808MsgBytesProcessor 负责 转义 请求消息/响应消息、计算校验码。\",\"要想替换该组件，只需要声明一个 Jt808MsgBytesProcessor 类型的 Bean 即可。\",\"public interface Jt808MsgBytesProcessor { /** * 转义请求消息 * * @param byteBuf 请求消息, 不包含分隔符 {@link io.github.hylexus.jt.jt808.JtProtocolConstant#PACKAGE_DELIMITER 0X7E} * @return 转义之后的消息 */ ByteBuf doEscapeForReceive(ByteBuf byteBuf) throws Jt808MsgEscapeException; /** * 转义响应消息 * * @param byteBuf 响应给客户端的消息, 不包含分隔符 {@link io.github.hylexus.jt.jt808.JtProtocolConstant#PACKAGE_DELIMITER 0X7E} * @return 转义之后的消息 */ ByteBuf doEscapeForSend(ByteBuf byteBuf) throws Jt808MsgEscapeException; /** * 就是校验码 * * @param byteBuf 请求消息/响应消息 * @return 检验码 */ byte calculateCheckSum(ByteBuf byteBuf); } \",\"示例：\",\"// 替换内置的转义等逻辑 @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换内置的转义等逻辑 @Bean public Jt808MsgBytesProcessor jt808MsgBytesProcessor() { return new DefaultJt808MsgBytesProcessor(ByteBufAllocator.DEFAULT); } } \"]},\"381\":{\"h\":\"Jt808MsgDecoder\",\"t\":[\"Jt808MsgDecoder 负责将请求中的 字节流 初步解析为 Jt808Request 对象。\",\"如果内置的实现不符合要求 或者 内置实现返回的 Jt808Request 不符合要求，你可以自定义一个解码器。\",\"public interface Jt808MsgDecoder { /** * 解析请求，返回 {@link Jt808Request} 实例。 * <p> * 如果默认的 {@link io.github.hylexus.jt.jt808.spec.impl.request.DefaultJt808Request DefaultJt808Request} 不满足需求 或 * {@link io.github.hylexus.jt.jt808.support.codec.impl.DefaultJt808MsgDecoder DefaultJt808MsgDecoder} 不符合要求， * 可以提供自己的实现类在这里返回自己的 {@link Jt808Request} 实现 * * @param byteBuf 请求消息(不包含分隔符 {@link io.github.hylexus.jt.jt808.JtProtocolConstant#PACKAGE_DELIMITER 0X7E}) * @return 解析之后的 {@link Jt808Request} 实例. * @see Jt808MsgBytesProcessor#doEscapeForReceive(ByteBuf) * @see Jt808MsgBytesProcessor#calculateCheckSum(ByteBuf) */ Jt808Request decode(ByteBuf byteBuf); } \",\"示例:\",\"// 替换内置的 Jt808MsgDecoder @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换内置的 Jt808MsgDecoder @Bean public Jt808MsgDecoder jt808MsgDecoder( Jt808MsgTypeParser jt808MsgTypeParser, Jt808MsgBytesProcessor bytesProcessor, Jt808ProtocolVersionDetectorRegistry registry) { return new DefaultJt808MsgDecoder(jt808MsgTypeParser, bytesProcessor, registry); } } \"]},\"382\":{\"h\":\"Jt808MsgEncoder\",\"t\":[\"Jt808MsgEncoder 负责将 Jt808Response 对象编码为 符合808标准 的字节流。\",\"public interface Jt808MsgEncoder { /** * 将 {@link Jt808Response} 编码为 {@code 符合808标准} 的字节流 * * @param response 响应消息 * @return 编码后的字节流 * @see Jt808MsgBytesProcessor#doEscapeForSend(ByteBuf) * @see Jt808MsgBytesProcessor#calculateCheckSum(ByteBuf) */ ByteBuf encode(Jt808Response response); } \",\"如果内置的实现不符合要求，可以声明一个 Jt808MsgEncoder 类型的 Bean，替换内置实现：\",\"// 替换内置的 Jt808MsgEncoder @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换内置的 Jt808MsgEncoder @Bean public Jt808MsgEncoder jt808MsgEncoder(Jt808MsgBytesProcessor processor) { return new DefaultJt808MsgEncoder(processor, ByteBufAllocator.DEFAULT); } } \"]},\"383\":{\"h\":\"定制\"},\"384\":{\"h\":\"Jt808RequestFilter(v2.1.1)\",\"t\":[\"这个接口也是从 org.springframework.web.server.WebFilter 借鉴(抄袭)的。\",\"提示\",\"该功能默认不开启，要使用 Jt808RequestFilter 需要配置 jt808.plugins.request-filter.enabled = true\",\"public interface Jt808RequestFilter { /** * <h3 color=\\\"red\\\">注意</h3> * 该功能默认不开启，要使用 filter 需要配置 {@code jt808.plugins.request-filter.enabled = true} * * <p> * <p> * 能执行到这里就意味着: 请求整体结构已经解析完毕(分包请求也已经自动合并)。 * <p> * <p> * {@code filter} 的逻辑执行完成之后才会执行消息体的解析。 * <p> * <p> * 多个 {@code filter} 实例的执行顺序和 Spring 的 {@link org.springframework.core.annotation.Order @Order} 和 {@link org.springframework.core.Ordered Ordered} 一致。 * * @param exchange 当前请求上下文 * @param chain 过滤器链 * @see org.springframework.core.annotation.Order * @see org.springframework.core.Ordered * @since 2.1.1 */ void filter(Jt808ServerExchange exchange, Jt808RequestFilterChain chain); } \"]},\"385\":{\"h\":\"Netty相关\",\"t\":[\"要自定义 Netty 相关配置，只需声明一个 Jt808ServerNettyConfigure 类型的 Bean 即可。\",\"public interface Jt808ServerNettyConfigure { void configureServerBootstrap(ServerBootstrap serverBootstrap); void configureSocketChannel(SocketChannel ch); } \"]},\"386\":{\"h\":\"请求生命周期监听器\"},\"387\":{\"h\":\"介绍\",\"t\":[\"一个终端请求的处理，包含下面几个比较关键的步骤：\",\"decode: 将 ByteBuf 初步解码为 Jt808Request\",\"此时消息整体结构已经解码完成\",\"body (消息体)部分依旧是 ByteBuf\",\"dispatch1: 将上一步初步解码的 Jt808Request 对象 分发 出去 \",\"如果是分包请求 \",\"在 AbstractJt808RequestMsgQueueListener 里暂存分包\",\"直到所有子包都到达之后自动合并请求，再次 dispatch 合并后的请求\",\"否则，进行下一步\",\"dispatch2: 将请求(包括合并后的分包请求)分发给处理器链 Jt808DispatcherHandler\",\"调用处理器处理请求\",\"处理 处理器返回的结果\",\"回复终端\",\"对应上面描述的处理流程，提供了 Jt808RequestLifecycleListener 以便在消息处理流程的关键步骤:\",\"加入自己的逻辑\",\"拦截请求的处理流程\",\"点击展开 Jt808RequestLifecycleListener 接口声明\",\"public interface Jt808RequestLifecycleListener extends OrderedComponent { /** * @param request 尚未解码的原始报文 * @param channel 当前终端对应的 {@link Channel} * @see Jt808DispatchChannelHandlerAdapter#channelRead(ChannelHandlerContext, Object) */ default boolean beforeDecode(ByteBuf request, Channel channel) { return true; } /** * @param request 初步解码后的请求(请求体尚未解码) * @see Jt808RequestMsgDispatcher#doDispatch(Jt808Request) */ default boolean beforeDispatch(Jt808Request request) { return true; } /** * @param exchange 请求上下文 * @see Jt808DispatcherHandler#handleRequest(Jt808ServerExchange) */ default boolean beforeDispatch(Jt808ServerExchange exchange) { return true; } /** * @param exchange 请求上下文 * @param handler 处理当前请求的处理器。 * 目前内置的处理器有两种: * <ol> * <li>被 {@link io.github.hylexus.jt.jt808.support.annotation.handler.Jt808RequestHandler @Jt808RequestHandler}</li> 注解标记的处理器方法 * <li>{@link io.github.hylexus.jt.jt808.support.dispatcher.handler.SimpleJt808RequestHandler SimpleJt808RequestHandler}</li> 实例 * </ol> * @see Jt808DispatcherHandler#handleRequest(io.github.hylexus.jt.jt808.spec.Jt808ServerExchange) */ default boolean beforeHandle(Jt808ServerExchange exchange, Object handler) { return true; } /** * @param exchange 请求上下文 * @param handlerResult 请求处理器的处理结果 * @see Jt808HandlerResultHandler#handleResult(Jt808ServerExchange, Jt808HandlerResult) */ default boolean beforeEncode(Jt808ServerExchange exchange, Jt808HandlerResult handlerResult) { return true; } /** * @param exchange 请求上下文 * @param handlerResult 请求处理器的处理结果 * @param response 回复给客户端的报文 * @see Jt808HandlerResultHandler#handleResult(Jt808ServerExchange, Jt808HandlerResult) */ default boolean beforeResponse(Jt808ServerExchange exchange, Jt808HandlerResult handlerResult, ByteBuf response) { return true; } } \"]},\"388\":{\"h\":\"使用示例\",\"t\":[\"这里是一个使用 Prometheus 统计请求次数的示例：\",\"public class PrometheusMetricsExporter implements Jt808RequestLifecycleListener { private final MeterRegistry meterRegistry; public PrometheusMetricsExporter(MeterRegistry meterRegistry) { this.meterRegistry = meterRegistry; } @Override public boolean beforeDispatch(Jt808Request request) { Counter.builder(\\\"jt808_request_total_count\\\") .description(\\\"A counter for JT/T 808 request processed by current server\\\") .tags( \\\"terminal_id\\\", request.terminalId(), \\\"version\\\", request.version().name().toLowerCase() ) .register(this.meterRegistry) .increment(); return true; } } \"]},\"389\":{\"h\":\"Session相关\"},\"390\":{\"h\":\"Jt808Session\",\"t\":[\"Jt808Session 的默认实现为 io.github.hylexus.jt.jt808.spec.session.DefaultJt808Session。你也可以根据需求来实现自己的 Jt808Session。\",\"public class MySession extends DefaultJt808Session { private String someField; public String getSomeField() { return someField; } public void setSomeField(String someField) { this.someField = someField; } } \",\"然后在下面的自定义 Jt808SessionManager 中替换为自定义的 Jt808Session。\"]},\"391\":{\"h\":\"Jt808SessionManager\",\"t\":[\"该组件用来管理每个终端的 TCP 连接。\",\"要定制 Jt808SessionManager 只需自己声明一个 Jt808SessionManager 类型的 Bean 即可。\",\"public class MySessionManager implements Jt808SessionManager { private static final MySessionManager instance = new MySessionManager(); public static Jt808SessionManager getInstance() { return instance; } private MySessionManager() { } protected MySession buildSession(String terminalId, Jt808ProtocolVersion version, Channel channel) { MySession session = new MySession(); session.channel(channel); session.id(generateSessionId(channel)); session.terminalId(terminalId); session.lastCommunicateTimestamp(System.currentTimeMillis()); session.protocolVersion(version); Object key = channel.attr(AttributeKey.valueOf(\\\"key\\\")).get(); session.setSomeField(key == null ? \\\"\\\" : key.toString()); return session; } // 这里替换为自定义的Session @Override public Jt808Session generateSession(String terminalId, Jt808ProtocolVersion version, Channel channel) { return buildSession(terminalId, version, channel); } // ... } \",\"然后将自定义的 Jt808SessionManager 加入到 Spring 容器中就可以替换内置的 Jt808SessionManager 了。\",\"// 替换内置的 Jt808SessionManager @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换内置的 Jt808SessionManager @Bean public Jt808SessionManager jt808SessionManager(ObjectProvider<Jt808SessionManagerEventListener> listeners) { final Jt808SessionManager sessionManager = MySessionManager.getInstance(); listeners.stream().sorted(Comparator.comparing(OrderedComponent::getOrder)) .forEach(sessionManager::addListener); return sessionManager; } } \"]},\"392\":{\"h\":\"Jt808SessionEventListener\",\"t\":[\"Jt808SessionEventListener 会在 Jt808SessionManager 中新增、删除 或 关闭 Jt808Session 时回调。\",\"public interface Jt808SessionEventListener extends OrderedComponent { /** * {@link Jt808Session} 新建事件 * <p> * 注意：该方法中不宜做耗时太长/阻塞的操作！！！ * * @param session 新建的 {@link Jt808Session} */ default void onSessionAdd(@Nullable Jt808Session session) { } /** * {@link Jt808Session} 移除事件 * <p> * 注意：该方法中不宜做耗时太长/阻塞的操作！！！ * * @param session 被移除的 {@link Jt808Session} */ default void onSessionRemove(@Nullable Jt808Session session) { } /** * {@link Jt808Session} 关闭事件 * <p> * 注意：该方法中不宜做耗时太长/阻塞的操作！！！ * * @param session 被关闭的 {@link Jt808Session} * @param closeReason 关闭原因 */ default void onSessionClose(@Nullable Jt808Session session, SessionCloseReason closeReason) { } } \",\"想要监听 Jt808Session 事件：\",\"声明若干个 Jt808SessionEventListener 类型的 Bean 即可\",\"或者可以直接调用 Jt808SessionManager.addListener(listener) 方法手动注册监听器\",\"// Session事件监听器 @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- Session事件监听器 (可以有多个) @Bean public Jt808SessionEventListener listener1() { return new MyJt808SessionEventListener01(); } // [[ 非必须配置 ]] -- Session事件监听器 (可以有多个) @Bean public Jt808SessionEventListener listener2() { return new MyJt808SessionEventListener02(); } } \"]},\"393\":{\"h\":\"Jt808FlowIdGenerator\",\"t\":[\"Jt808FlowIdGenerator 用来生成流水号。要自定义 流水号的生成策略，只需声明一个 Jt808FlowIdGeneratorFactory 类型的 Bean 即可。\",\"public interface Jt808FlowIdGenerator { int MAX_FLOW_ID = 0xffff; /** * @param increment 一次性(连续不间断)递增 {@code increment} 个序列号 * @return 当前流水号 */ int flowId(int increment); /** * @param count 流水号个数 * @return 一批连续递增的流水号 */ default int[] flowIds(int count) { int last = this.flowId(count) - 1; final int[] ids = new int[count]; for (int i = count - 1; i >= 0; i--) { ids[i] = last--; } return ids; } /** * @return 当前流水号(不会自增) */ default int currentFlowId() { return flowId(0); } /** * @return 下一个流水号 * @see #flowId(int) */ default int nextFlowId() { return flowId(1); } } \",\"替换 Jt808FlowIdGeneratorFactory 来控制流水号生成策略：\",\"// 替换流水号生成策略 @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换流水号生成策略 @Bean public Jt808FlowIdGeneratorFactory jt808FlowIdGeneratorFactory() { return new Jt808FlowIdGeneratorFactory.DefaultJt808FlowIdGeneratorFactory(); } } \"]},\"394\":{\"h\":\"分包相关\",\"t\":[\"要替换内置的分包暂存器只需将对应类型的 Bean 加入到 Spring 容器即可。\",\"// Jt808ResponseSubPackageStorage + Jt808RequestSubPackageStorage @Configuration public class MyJt808Config { // [[ 非必须配置 ]] -- 替换内置响应消息分包暂存器 @Bean public Jt808ResponseSubPackageStorage myJt808ResponseSubPackageStorage() { return new MyResponseSubPackageStorage(new CaffeineJt808ResponseSubPackageStorage.StorageConfig()); } // [[ 非必须配置 ]] -- 替换内置请求消息分包暂存器 @Bean public Jt808RequestSubPackageStorage myJt808RequestSubPackageStorage(Jt808RequestMsgDispatcher dispatcher) { return new MyRequestSubPackageStorage(ByteBufAllocator.DEFAULT, dispatcher, new CaffeineJt808RequestSubPackageStorage.StorageConfig()); } } \"]},\"395\":{\"h\":\"升级指南\"},\"396\":{\"h\":\"2.0.x升级到2.1.x\"},\"397\":{\"h\":\"请先读我\",\"t\":[\"两个 starter 的 JDK 版本、spring-boot 版本限制如下：\",\"Module\",\"JDK\",\"spring-boot\",\"Desc\",\"jt-808-server-spring-boot-starter-boot2\",\"11+\",\"[2.2.x, 2.6.x]\",\"为 spring-boot-2.x 提供的 starter\",\"jt-808-server-spring-boot-starter\",\"17+\",\"[3.0.0, ...]\",\"为 spring-boot-3.x 提供的 starter\",\"警告\",\"从 2.1.x 开始，同时支持 spring-boot-2.x 和 spring-boot-3.x。\",\"变更如下:\",\"1). 模块名称拼写错误修改 \",\"2.0.x 中的 jt-808-server-spring-boot-stater 有单词拼写错误(😂): starter 写成了 stater\",\"在 2.1.x 中改成了 jt-808-server-spring-boot-starter-boot2\",\"stater 修改为 starter\",\"添加了 -boot2 后缀，表示这个模块是给 spring-boot-2.x 提供的\",\"2). JDK版本 和 spring-boot版本 修改 \",\"jt-808-server-spring-boot-starter\",\"给 spring-boot-3.x 的项目提供的，是本次新增的模块\",\"JDK: 17\",\"编译之后的 .class 文件版本 : 61(JDK-17)\",\"spring-boot: 3.0.2\",\"单独依赖该模块时必须满足: jdk.version >=17 && spring-boot.version >= 3.0.0\",\"jt-808-server-spring-boot-starter-boot2\",\"给 spring-boot-2.x 的项目提供的，是从之前的 jt-808-server-spring-boot-stater 重命名过来的\",\"JDK: 17\",\"编译之后的 .class 文件版本 : 55(JDK-11)\",\"spring-boot: 2.6.14\",\"单独依赖该模块时必须满足: jdk.version >= 11 && spring-boot.version >= 2.2.x && spring-boot.version <= 2.6.x\",\"3). spring-boot版本 升级 \",\"从 2.5.12 升级到 2.6.24\",\"新增了 spring-boot-3.x 的支持\"]},\"398\":{\"h\":\"依赖升级\"},\"399\":{\"h\":\"spring-boot-2.x\",\"t\":[\"使用 spring-boot-2.x 的项目:\",\"将之前的 jt-808-server-spring-boot-stater 依赖改为 jt-808-server-spring-boot-starter-boot2\",\"stater --> starter\",\"添加了 -boot2 后缀\",\"版本改为 2.1.x 的最新版即可\",\"2.0.x 的依赖如下:\",\"修改为 2.1.x 的依赖坐标(stater --> starter, 新增 -boot2 后缀):\"]},\"400\":{\"h\":\"spring-boot-3.x\",\"t\":[\"使用 spring-boot-3.x 的项目:\",\"将之前的 jt-808-server-spring-boot-stater 依赖改为 jt-808-server-spring-boot-starter\",\"stater --> starter\",\"版本改为 2.1.x 的最新版即可\",\"2.0.x 的依赖如下:\",\"修改为 2.1.x 的依赖坐标(stater --> starter):\"]},\"401\":{\"h\":\"BitOperator(v2.1.1)\",\"t\":[\"提示\",\"BitOperator 是 2.1.1 中引入的辅助类。\"]},\"402\":{\"h\":\"作用\",\"t\":[\"BitOperator 是位操作的工具类，目前只支持 64 个 Bit(java.lang.Long) 的操作。\",\"当然 BitOperator 也可以用在被 @RequestField、@ResponseField、@RequestFieldAlias、@ResponseFieldAlias 修饰的实体类的成员变量上。\"]},\"403\":{\"h\":\"场景示例\",\"t\":[\"位操作的场景都可以用到，比如下面这个场景(需要对某个 bit 操作)：\",\"以下面这条位置上报报文(2019)为例，其中的报警标志字段中 第 21(进出路线)个 bit 和第 20(进出区域)个 bit 是 1。\",\"class BuiltinMsg0200Test extends BaseReqRespMsgTest { final String hex = \\\"7E0200402D01000000000139123443210000003000000040000101CD41C2072901B00929029A005A23042821314101040000029B0202004303020309300163897E\\\"; @Test void test2019Alias() { final BuiltinMsg0200V2019Alias msg = decode(hex, BuiltinMsg0200V2019Alias.class); assertMsg(msg); } private void assertMsg(BuiltinMsg0200V2019Alias msg) { final BitOperator alarmStatus = BitOperator.mutable(msg.getAlarmFlag()); // final BitOperator alarmStatus = msg.getBitOperator(); assertEquals(1, alarmStatus.get(20)); assertEquals(1, alarmStatus.get(21)); } // ... } \"]},\"404\":{\"h\":\"简单使用\",\"t\":[\"class BitOperatorTest { @Test void testBit() { // 64个bit: 全是0 final long x = 0; // 第 1、3、22 个 bit 被置为 1，其他位没变 final BitOperator operator = BitOperator.mutable(x).set(1).set(3).set(22); assertEquals(\\\"0000000000000000000000000000000000000000010000000000000000001010\\\", operator.binaryString(64)); assertEquals(\\\"00000000010000000000000000001010\\\", operator.binaryString(32)); assertEquals(\\\"010000000000000000001010\\\", operator.binaryString(24)); // 第 1 个 bit 被置为 0 final BitOperator operator1 = operator.reset(1); assertEquals(\\\"010000000000000000001000\\\", operator1.binaryString(24)); final int y = 0b11111111; // 第 3 个 bit 被置为 0 assertEquals(\\\"11110111\\\", BitOperator.mutable(y).reset(3).binaryString(8)); // 从第 3 个 bit 开始, 连续将 2 个 bit 置为 0 assertEquals(\\\"11100111\\\", BitOperator.mutable(y).resetRange(3, 2).binaryString(8)); final long z = 0b00001000; // z 的第 3 个 bit 是 1 assertEquals(1, BitOperator.mutable(z).get(3)); assertEquals(0b11, BitOperator.mutable(x).set(1).set(0).wordValue()); assertEquals(3, BitOperator.mutable(x).set(1).set(0).wordValue()); } } \"]},\"405\":{\"h\":\"ByteArrayContainer(v2.1.1)\",\"t\":[\"提示\",\"ByteArrayContainer 是 2.1.1 中引入的辅助类。\"]},\"406\":{\"h\":\"作用\",\"t\":[\"ByteArrayContainer 的作用和 ByteBufContainer 是一样的。\",\"只不过 ByteArrayContainer 底层是个 byte[] 不需要手动 release()。\",\"而 ByteBufContainer 底层是个 ByteBuf, 需要在恰当的时机释放掉。\"]},\"407\":{\"h\":\"场景示例\",\"t\":[\"此处还是以 0x8103 消息中的 参数项的值为例。\",\" @Data @Accessors(chain = true) @Jt808ResponseBody(msgId = 0x8103) public class BuiltinMsg8103 { @ResponseField(order = 100, dataType = MsgDataType.BYTE) private int paramCount; @ResponseField(order = 200, dataType = MsgDataType.LIST) private List<ParamItem> paramItemList; @Data @Accessors(chain = true) @NoArgsConstructor public static class ParamItem { @ResponseField(order = 100, dataType = MsgDataType.DWORD) private long msgId; @ResponseField(order = 200, dataType = MsgDataType.BYTE) private int msgLength; // 不同 id 的消息内容的数据类型也不同 // 除了可以使用 byte[], ByteBuf, ByteBufContainer 之外，也可以使用 ByteArrayContainer @ResponseField(order = 300, dataType = MsgDataType.BYTES) private ByteArrayContainer msgContent; // private ByteBufContainer msgContent; // private ByteBuf msgContent; // private byte[] msgContent; public ParamItem(long msgId, ByteArrayContainer msgContent) { this.msgId = msgId; this.msgContent = msgContent; this.msgLength = msgContent.length(); } } } \"]},\"408\":{\"h\":\"如何创建实例?\",\"t\":[\"推荐使用 ByteArrayContainer 提供的工厂方法来创建实例。\",\"class BuiltinMsg8103Test extends BaseReqRespMsgTest { @Test void test1() { final List<BuiltinMsg8103.ParamItem> paramItemList = List.of( // 手动构建一个 DWORD 类型的实例 new BuiltinMsg8103.ParamItem(0x0001, ByteArrayContainer.ofDword(66)), // 手动构建一个 STRING 类型的实例 new BuiltinMsg8103.ParamItem(0x0013, ByteArrayContainer.ofString(\\\"www.xxx.fff.zzz.com\\\")), // 手动构建一个 WORD 类型的实例 new BuiltinMsg8103.ParamItem(0x0081, ByteArrayContainer.ofWord(11)), // 手动构建一个 BYTE 类型的实例 new BuiltinMsg8103.ParamItem(0x0084, ByteArrayContainer.ofByte((byte) 1)), // 手动构建一个 BYTES 类型的实例 new BuiltinMsg8103.ParamItem(0x0032, ByteArrayContainer.ofBytes(new byte[]{0x16, 0x32, 0x0A, 0x1E})) ); final BuiltinMsg8103 msg = new BuiltinMsg8103() .setParamItemList(paramItemList) .setParamCount(paramItemList.size()); final String hexString = encode( msg, builder -> builder.version(Jt808ProtocolVersion.VERSION_2013) .terminalId(terminalId2013) .msgId(BuiltinJt808MsgType.SERVER_SET_TERMINAL_PARAM) ); assertEquals(\\\"7E8103003801391234432300000500000001040000004200000013137777772E7878782E6666662E7A7A7A2\\\" + \\\"E636F6D0000008102000B000000840101000000320416320A1EFE7E\\\", hexString); } } \"]},\"409\":{\"h\":\"ByteBufContainer(v2.1.1)\",\"t\":[\"提示\",\"ByteBufContainer 是 2.1.1 中引入的辅助类。\"]},\"410\":{\"h\":\"作用\",\"t\":[\"在某些特殊场景下，用来替代 byte[], ByteBuf。\",\"因为在特殊场景下 byte[] 和 ByteBuf 的内容不太方便构造。\",\"详情看下面 0x8103 消息中的用法：\"]},\"411\":{\"h\":\"场景示例\",\"t\":[\"在 0x8103 消息中, 参数项的值的类型不是固定的，可能是 DWORD, WORD, BYTE 等类型。\",\"在 v2.1.1 之前的版本中，对于这种情况，实体类中只能使用 byte[] 或 ByteBuf 来表示，但是 byte[] 或 ByteBuf 的内容构造起来有点麻烦。\",\"所以提供了 ByteBufContainer 和 ByteArrayContainer 来简化这种操作。\",\"下面简单演示 ByteBufContainer 在响应消息中的用法。\",\"tip\",\"下面示例中的 @ResponseFieldAlias 注解是 v2.1.1 中给 @ResponseField 引入的别名。类似于 spring 中 @RequestMapping 和 @GetMapping 的关系。\",\"详情见 注解驱动开发--注解别名 。\",\" @Data @Accessors(chain = true) @Jt808ResponseBody(msgId = 0x8103) public class BuiltinMsg8103Alias { @ResponseFieldAlias.Byte(order = 100) private int paramCount; @ResponseFieldAlias.List(order = 200) private List<ParamItem> paramItemList; @Data @Accessors(chain = true) @NoArgsConstructor public static class ParamItem { @ResponseFieldAlias.Dword(order = 100) private long msgId; @ResponseFieldAlias.Byte(order = 200) private int msgLength; // 不同 id 的消息内容的数据类型也不同 // 除了可以使用 byte[], ByteBuf, ByteArrayContainer 之外，也可以使用 ByteBufContainer @ResponseFieldAlias.Bytes(order = 300) private ByteBufContainer msgContent; // private ByteArrayContainer msgContent; // private ByteBuf msgContent; // private byte[] msgContent; public ParamItem(long msgId, ByteBufContainer msgContent) { this.msgId = msgId; this.msgContent = msgContent; this.msgLength = msgContent.length(); } } } \"]},\"412\":{\"h\":\"如何创建实例?\",\"t\":[\"推荐使用 ByteBufContainer 中提供的一系列工厂方法来构建 ByteBufContainer 的实例。\",\"下面是 ByteBufContainer 的简单用法示例：\",\"class BuiltinMsg8103Test extends BaseReqRespMsgTest { @Test void test() { final List<BuiltinMsg8103Alias.ParamItem> paramItemList = List.of( // 手动构建一个 DWORD 类型的实例 new BuiltinMsg8103Alias.ParamItem(0x0001, ByteBufContainer.ofDword(66)), // 手动构建一个 STRING 类型的实例 new BuiltinMsg8103Alias.ParamItem(0x0013, ByteBufContainer.ofString(\\\"www.xxx.fff.zzz.com\\\")), // 手动构建一个 WORD 类型的实例 new BuiltinMsg8103Alias.ParamItem(0x0081, ByteBufContainer.ofWord(11)), // 手动构建一个 BYTE 类型的实例 new BuiltinMsg8103Alias.ParamItem(0x0084, ByteBufContainer.ofByte((byte) 1)), // 手动构建一个 BYTES 类型的实例 new BuiltinMsg8103Alias.ParamItem(0x0032, ByteBufContainer.ofBytes(new byte[]{0x16, 0x32, 0x0A, 0x1E})) ); final BuiltinMsg8103Alias msg = new BuiltinMsg8103Alias() .setParamItemList(paramItemList) .setParamCount(paramItemList.size()); final String hexString = encode( msg, builder -> builder.version(Jt808ProtocolVersion.VERSION_2013) .terminalId(terminalId2013) .msgId(BuiltinJt808MsgType.SERVER_SET_TERMINAL_PARAM) ); // ByteBufContainer 会被 `ByteBufContainerFieldSerializer` 自动释放掉 // ByteBufContainer 会被 `ByteBufContainerFieldSerializer` 自动释放掉 // ByteBufContainer 会被 `ByteBufContainerFieldSerializer` 自动释放掉 paramItemList.forEach(it -> assertEquals(0, it.getMsgContent().value().refCnt())); assertEquals(\\\"7E8103003801391234432300000500000001040000004200000013137777772E7878782E6666662E7A7A7A2\\\" + \\\"E636F6D0000008102000B000000840101000000320416320A1EFE7E\\\", hexString); } } \"]},\"413\":{\"h\":\"注意事项\",\"t\":[\"在使用方面，ByteBufContainer 和 ByteArrayContainer 的显著区别是：ByteBufContainer 需要 release()。\",\"提示\",\"请求消息实体类中出现的 ByteBufContainer 会随着 Jt808Request#release() 的一起被自动释放掉(前提是你没有做额外的 retain() 操作)\",\"响应消息实体类中出现的 ByteBufContainer 会在 ByteBufContainerFieldSerializer 中自动释放(前提是你没有做额外的 retain() 操作)\",\"除以上两种情况之外，在其他地方手动构建的 ByteBufContainer 需要你自己在恰当的时机释放掉\"]},\"414\":{\"h\":\"辅助工具\"},\"415\":{\"h\":\"808数据类型处理器\"},\"416\":{\"h\":\"Jt808ByteReader\",\"t\":[\"用来从 ByteBuf 中读取指定类型的 JT/T-808 数据类型。\",\"内置的支持 Jt808ByteReader 的类\",\"Jt808Request.bodyAsReader() 方法可以将消息体转换为 Jt808ByteReader 来手动读取数据。\"]},\"417\":{\"h\":\"简单示例\",\"t\":[\"class Jt808ByteReaderTest { @Test void read() { final ByteBuf originalByteBuf = ByteBufAllocator.DEFAULT.buffer(); try { // 下面两行代码给原始ByteBuf中加入一些测试数据 JtProtocolUtils.writeBcd(originalByteBuf, \\\"10203040\\\"); JtProtocolUtils.writeDword(originalByteBuf, 123); // 下面依次从 originalByteBuf 中读取 BCD、UnsignedDword final ByteBuf afterRead = Jt808ByteReader.of(originalByteBuf) .readBcd(4, bcdString -> assertEquals(\\\"10203040\\\", bcdString)) .readUnsignedDword(dword -> assertEquals(123, dword)) .readable(); // 读取完成之后，Jt808ByteReader 不会改变内部 originalByteBuf 的引用指向 assertSame(originalByteBuf, afterRead); } finally { // Jt808ByteReader 只是个辅助类，不会改变内部 readable() 指向的 ByteBuf 的 refCnt // 应该在恰当的时机释放被包装的 originalByteBuf originalByteBuf.release(); assertEquals(0, originalByteBuf.refCnt()); } } } \"]},\"418\":{\"h\":\"使用Jt808ByteReader来解析请求体\",\"t\":[\"除了使用 @Jt808RequestBody 标记的实体类来解析请求，也可以通过 Jt808ByteReader 来手动读取数据：\",\"public class TerminalRegisterMsgHandlerV2013 implements SimpleJt808RequestHandler<Jt808Response> { // ... // 除了使用注解，也可以通过 `Jt808ByteReader` 来手动读取数据 public Jt808Response handleMsg(Jt808ServerExchange exchange) { exchange.request() .bodyAsReader() // 1. [0-2) WORD 省域ID .readUnsignedWord(provinceId -> log.info(\\\"省域ID:{}\\\", provinceId)) // 2. [2-4) WORD 省域ID .readUnsignedWord(cityId -> log.info(\\\"省域ID:{}\\\", cityId)) // 3. [4-9) BYTE[5] 制造商ID .readString(5, manufacturerId -> log.info(\\\"制造商ID:{}\\\", manufacturerId)) // 4. [9-29) BYTE[20] 终端型号 .readString(20, terminalType -> log.info(\\\"终端型号:{}\\\", terminalType)) // 5. [29-36) BYTE[7] 终端ID .readString(7, terminalId -> log.info(\\\"终端ID:{}\\\", terminalId)) // 6. [36] BYTE 车牌颜色 .readByte(color -> log.info(\\\"车牌颜色:{}\\\", color)) // 7. [37,n) String 车辆标识 .readString(exchange.request().msgBodyLength() - 37, carIdentifier -> log.info(\\\"车辆标识:{}\\\", carIdentifier)); } } \"]},\"419\":{\"h\":\"Jt808ByteWriter\",\"t\":[\"用来像 ByteBuf 中写入指定类型的 JT/T-808 数据类型。\",\"内置的支持 Jt808ByteWriter 的类\",\"Jt808Response.Jt808ResponseBuilder.body(Consumer<Jt808ByteWriter>)\",\"ByteBufJt808MsgBuilder.body(Consumer<Jt808ByteWriter>)\"]},\"420\":{\"h\":\"简单示例\",\"t\":[\"class Jt808ByteWriterTest { @Test void write() { final ByteBuf originalByteBuf = ByteBufAllocator.DEFAULT.buffer(128); try { final Jt808ByteWriter writer = Jt808ByteWriter.of(originalByteBuf); final ByteBuf afterWrite = writer .writeBcd(\\\"10203040\\\") .writeString(\\\"STRING\\\") .writeDWord(100) // 这里返回的 ByteBuf 应该和初始化传入的是同一个对象 .writable(); assertSame(originalByteBuf, afterWrite); assertEquals(\\\"10203040535452494E4700000064\\\", HexStringUtils.byteBufToString(originalByteBuf)); assertEquals(\\\"10203040535452494E4700000064\\\", HexStringUtils.byteBufToString(afterWrite)); } finally { // Jt808ByteWriter 只是个辅助类，不会改变内部 writable() 指向的 ByteBuf 的 refCnt // 应该在恰当的时机释放被包装的 originalByteBuf originalByteBuf.release(); assertEquals(0, originalByteBuf.refCnt()); } } } \"]},\"421\":{\"h\":\"使用Jt808ByteWriter手动编码响应体\",\"t\":[\"除了使用 @Jt808ResponseBody 标记的实体类来编码请求，也可以通过 Jt808ByteWriter 来手动写入数据：\",\"public class TerminalRegisterMsgHandlerV2013 implements SimpleJt808RequestHandler<Jt808Response> { @Override public Jt808Response handleMsg(Jt808ServerExchange exchange) { // ... return Jt808Response.newBuilder() .msgId(BuiltinJt808MsgType.CLIENT_REGISTER_REPLY) .terminalId(exchange.request().terminalId()) .flowId(exchange.session().nextFlowId()) .version(exchange.request().version()) // 除了使用注解，也可以通过 `Jt808ByteWriter` 来手动写入数据 .body(writer -> writer // 1. byte[0,2) WORD 对应的终端注册消息的流水号 .writeWord(exchange.request().flowId()) // 2. byte[2,3) BYTE 0:成功;1:车辆已被注册;2:数据库中无该车辆; 3:终端已被注册;4:数据库中无该终端 .writeByte(0) // 3. byte[3,x) STRING 鉴权码(只有在成功后才有该字段) .writeString(\\\"AuthCode-123\\\") ) .build(); } } \"]},\"422\":{\"h\":\"报文构建器\",\"t\":[\"内置了两种 Jt808MsgBuilder 实现类用来构建报文：\",\"用来构建调试报文\",\"回复客户端的消息也可以使用 Jt808MsgBuilder 来构建\"]},\"423\":{\"h\":\"EntityJt808MsgBuilder\",\"t\":[\"该实现类通过被 @Jt808ResponseBody 标记的实体类来构建报文。\",\"public class Jt808MsgBuilderTest { // 这里使用-1，通过 Jt808MsgBuilder.msgId(int msgId) 来指定了消息ID // 也可以直接在这里指定具体的消息ID @Jt808ResponseBody(msgId = -1) @Data @Accessors(chain = true) static class TestEntity { // 1. 应答流水号 WORD 对应的平台消息的流水号 @ResponseField(order = 0, dataType = WORD) int serverFlowId; // 2. 应答id WORD 对应的平台消息的 ID @ResponseField(order = 1, dataType = WORD) int serverMsgId; // 3. 结果 byte 0:成功/确认;1:失败;2:消息有误;3:不支持 @ResponseField(order = 2, dataType = BYTE) int result; } // 流水号生成器(这里使用一个永远返回0的生成器用来调试) // 可以使用 Jt808Session(已经实现了Jt808FlowIdGenerator) 或者 Jt808FlowIdGenerator.DEFAULT(默认实现类) 来生成自增的流水号 private static final Jt808FlowIdGenerator ALWAYS_RETURN_0 = step -> 0; @Test void testEntityMsgBuilder() { // 通过实体类来转换消息体内容 final TestEntity entity = new TestEntity() .setServerFlowId(0) .setServerMsgId(0x8103) .setResult(0); final EntityJt808MsgBuilder builder = Jt808MsgBuilder.newEntityBuilder(ALWAYS_RETURN_0) .version(Jt808ProtocolVersion.VERSION_2013) .terminalId(\\\"013912344323\\\") .body(entity) .msgId(BuiltinJt808MsgType.CLIENT_COMMON_REPLY); final ByteBuf result = builder.build(); assertEquals(\\\"7E0001000501391234432300000000810300F87E\\\", HexStringUtils.byteBufToString(result)); assertEquals(\\\"7E0001000501391234432300000000810300F87E\\\", builder.toHexString()); assertEquals(1, result.refCnt()); result.release(); assertEquals(0, result.refCnt()); } } \"]},\"424\":{\"h\":\"ByteBufJt808MsgBuilder\",\"t\":[\"该实现类通过 Jt808ByteWriter (ByteBuf) 来构建报文。\",\"public class Jt808MsgBuilderTest { // 流水号生成器(这里使用一个永远返回0的生成器用来调试) // 可以使用 Jt808Session(已经实现了Jt808FlowIdGenerator) 或者 Jt808FlowIdGenerator.DEFAULT(默认实现类) 来生成自增的流水号 private static final Jt808FlowIdGenerator ALWAYS_RETURN_0 = step -> 0; @Test public void testByteBufMsgBuilder() { final ByteBuf originalBuf = ByteBufAllocator.DEFAULT.buffer(128); final ByteBufJt808MsgBuilder builder = Jt808MsgBuilder.newByteBufBuilder(ALWAYS_RETURN_0, originalBuf) .version(Jt808ProtocolVersion.VERSION_2013) .msgId(BuiltinJt808MsgType.CLIENT_COMMON_REPLY) .terminalId(\\\"013912344323\\\") // 消息体借助 Jt808ByteWriter 来写入内容 // 也可以直接提供一个已经写好内容的 ByteBuf 用来充当消息体 .body(writer -> writer // 1. 应答流水号 WORD 对应的平台消息的流水号 .writeWord(0) // 2. 应答id WORD 对应的平台消息的 ID .writeWord(0x8103) // 3. 结果 byte 0:成功/确认;1:失败;2:消息有误;3:不支持 .writeByte(0) ); final ByteBuf result = builder.build(); assertEquals(\\\"7E0001000501391234432300000000810300F87E\\\", HexStringUtils.byteBufToString(result)); assertEquals(\\\"7E0001000501391234432300000000810300F87E\\\", builder.toHexString()); assertEquals(1, originalBuf.refCnt()); assertEquals(result.refCnt(), originalBuf.refCnt()); result.release(); assertEquals(0, originalBuf.refCnt()); assertEquals(result.refCnt(), originalBuf.refCnt()); } } \"]},\"425\":{\"h\":\"808\"},\"426\":{\"h\":\"Jt 808\"},\"427\":{\"h\":\"V1\"},\"428\":{\"h\":\"Jt 808\"},\"429\":{\"h\":\"V2\"}},\"dirtCount\":0,\"index\":[[\"已经实现了jt808flowidgenerator\",{\"1\":{\"423\":1,\"424\":1}}],[\"读取完成之后\",{\"1\":{\"417\":1}}],[\"读取的依然是\",{\"1\":{\"255\":1,\"256\":1}}],[\"辅助工具\",{\"0\":{\"414\":1}}],[\"前提是你没有做额外的\",{\"1\":{\"413\":2}}],[\"前端\",{\"0\":{\"11\":1}}],[\"zzz\",{\"1\":{\"408\":1,\"412\":1}}],[\"z\",{\"1\":{\"404\":3}}],[\"zhangxiaobing0926\",{\"1\":{\"8\":1}}],[\"置为\",{\"1\":{\"404\":1}}],[\"置空\",{\"1\":{\"185\":1,\"186\":1}}],[\"全是0\",{\"1\":{\"404\":1}}],[\"全类名是\",{\"1\":{\"263\":1,\"268\":1}}],[\"简单示例\",{\"0\":{\"417\":1,\"420\":1}}],[\"简单使用\",{\"0\":{\"404\":1}}],[\"简化\",{\"1\":{\"255\":1}}],[\"简化代码\",{\"1\":{\"251\":1}}],[\"进出区域\",{\"1\":{\"403\":1}}],[\"进出路线\",{\"1\":{\"403\":1}}],[\"进行下一步\",{\"1\":{\"387\":1}}],[\"进行分包发送处理\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"操作\",{\"1\":{\"403\":1,\"413\":2}}],[\"场景示例\",{\"0\":{\"403\":1,\"407\":1,\"411\":1}}],[\"重命名过来的\",{\"1\":{\"397\":1}}],[\"重写配置方法或覆盖父类的bean\",{\"1\":{\"164\":1}}],[\"重写了核心\",{\"1\":{\"23\":1}}],[\"😂\",{\"1\":{\"397\":1}}],[\"😂😂😂😂😂😂\",{\"1\":{\"107\":1,\"245\":1}}],[\"变更如下\",{\"1\":{\"397\":1}}],[\"替换流水号生成策略\",{\"1\":{\"393\":2}}],[\"替换\",{\"1\":{\"393\":1}}],[\"替换内置请求消息分包暂存器\",{\"1\":{\"394\":1}}],[\"替换内置响应消息分包暂存器\",{\"1\":{\"394\":1}}],[\"替换内置实现\",{\"1\":{\"382\":1}}],[\"替换内置的\",{\"1\":{\"381\":2,\"382\":2,\"391\":2}}],[\"替换内置的转义等逻辑\",{\"1\":{\"380\":2}}],[\"替换内置组件不再需要继承指定的类\",{\"1\":{\"23\":1}}],[\"个\",{\"1\":{\"402\":1,\"403\":2,\"404\":6}}],[\"个序列号\",{\"1\":{\"393\":1}}],[\"个人感觉取值不是很方便\",{\"1\":{\"136\":1}}],[\"个人认为一种消息由一个组件来处理就够了\",{\"1\":{\"115\":1}}],[\"递增\",{\"1\":{\"393\":1}}],[\"连续将\",{\"1\":{\"404\":1}}],[\"连续不间断\",{\"1\":{\"393\":1}}],[\"连接\",{\"1\":{\"179\":1,\"391\":1}}],[\"声明若干个\",{\"1\":{\"392\":1}}],[\"想要监听\",{\"1\":{\"392\":1}}],[\"阻塞的操作\",{\"1\":{\"392\":3}}],[\"新建的\",{\"1\":{\"392\":1}}],[\"新建事件\",{\"1\":{\"392\":1}}],[\"新增了\",{\"1\":{\"397\":1}}],[\"新增\",{\"1\":{\"23\":1,\"399\":1}}],[\"删除\",{\"1\":{\"392\":1}}],[\"key\",{\"1\":{\"391\":4}}],[\"keepalivetime\",{\"1\":{\"61\":1}}],[\"keep\",{\"0\":{\"61\":1}}],[\"统计请求次数的示例\",{\"1\":{\"388\":1}}],[\"回复客户端的消息也可以使用\",{\"1\":{\"422\":1}}],[\"回复给客户端的报文\",{\"1\":{\"387\":1}}],[\"回复终端\",{\"1\":{\"387\":1}}],[\"尚未解码的原始报文\",{\"1\":{\"387\":1}}],[\"尚未除以\",{\"1\":{\"128\":2,\"134\":1,\"272\":1}}],[\"拦截请求的处理流程\",{\"1\":{\"387\":1}}],[\"加入到\",{\"1\":{\"391\":1,\"394\":1}}],[\"加入自己的逻辑\",{\"1\":{\"387\":1}}],[\"加一个\",{\"1\":{\"143\":1}}],[\"合并后的请求\",{\"1\":{\"387\":1}}],[\"合并消息重新投递出去待处理器处理\",{\"1\":{\"225\":1}}],[\"再次\",{\"1\":{\"387\":1}}],[\"直到所有子包都到达之后自动合并请求\",{\"1\":{\"387\":1}}],[\"直接引\",{\"1\":{\"341\":1}}],[\"直接将实现了\",{\"1\":{\"219\":1}}],[\"直接省去了\",{\"1\":{\"218\":1}}],[\"直接返回\",{\"1\":{\"199\":1}}],[\"直接返回respmsgbody\",{\"0\":{\"156\":1}}],[\"直接实现\",{\"1\":{\"122\":1}}],[\"直接或间接\",{\"1\":{\"79\":1}}],[\"出去\",{\"1\":{\"387\":1}}],[\"分发给处理器链\",{\"1\":{\"387\":1}}],[\"分发\",{\"1\":{\"387\":1}}],[\"分包的阈值可以手动指定\",{\"1\":{\"236\":1}}],[\"分包方式\",{\"0\":{\"236\":1}}],[\"分包补传\",{\"0\":{\"226\":1,\"240\":1},\"1\":{\"241\":1}}],[\"分包请求也已经自动合并\",{\"1\":{\"384\":1}}],[\"分包请求\",{\"1\":{\"223\":1}}],[\"分包请求到达时回调该方法\",{\"1\":{\"223\":1}}],[\"分包暂存器发现所有子包都到达了\",{\"1\":{\"225\":1}}],[\"分包暂存器\",{\"0\":{\"223\":1,\"241\":1},\"1\":{\"222\":1}}],[\"分包合并\",{\"0\":{\"222\":1}}],[\"分包相关\",{\"0\":{\"394\":1},\"1\":{\"72\":1}}],[\"分包\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"分包消息中第一包的流水号\",{\"1\":{\"243\":1}}],[\"分包消息中的第一个子包的流水号\",{\"1\":{\"241\":1}}],[\"分包消息\",{\"1\":{\"30\":1,\"34\":1,\"102\":1,\"188\":1}}],[\"分包报文的处理\",{\"0\":{\"21\":1}}],[\"初步解码后的请求\",{\"1\":{\"387\":1}}],[\"初步解码为\",{\"1\":{\"387\":1}}],[\"初步解析为\",{\"1\":{\"381\":1}}],[\"过滤器链\",{\"1\":{\"384\":1}}],[\"多个\",{\"1\":{\"384\":1}}],[\"多个以逗号分隔\",{\"1\":{\"48\":1,\"52\":1,\"56\":1}}],[\"符合808标准\",{\"1\":{\"382\":2}}],[\"检验码\",{\"1\":{\"380\":1}}],[\"待发送给客户端的数据\",{\"1\":{\"377\":1}}],[\"与\",{\"1\":{\"376\":1}}],[\"计算校验码\",{\"1\":{\"380\":1}}],[\"计算后\",{\"1\":{\"375\":1}}],[\"计算消息长度\",{\"1\":{\"328\":1}}],[\"原始报文\",{\"1\":{\"375\":2}}],[\"里暂存分包\",{\"1\":{\"387\":1}}],[\"里\",{\"1\":{\"375\":1}}],[\"里实现了\",{\"1\":{\"156\":1}}],[\"端口为\",{\"1\":{\"371\":1}}],[\"优先使用自定义类型解析\",{\"1\":{\"362\":1}}],[\"优先级最高\",{\"1\":{\"116\":1}}],[\"优先级\",{\"1\":{\"115\":1}}],[\"点击展开\",{\"1\":{\"387\":1}}],[\"点击查看\",{\"1\":{\"361\":1,\"362\":1}}],[\"点击这里了解\",{\"1\":{\"139\":1,\"143\":1}}],[\"∈\",{\"1\":{\"357\":3,\"358\":3}}],[\"排除\",{\"1\":{\"357\":1,\"358\":1}}],[\"两个\",{\"1\":{\"355\":1,\"397\":1}}],[\"两个属性支持\",{\"1\":{\"327\":1}}],[\"两个属性其实在一定角度来看可以看成一回事\",{\"1\":{\"251\":1}}],[\"满足\",{\"1\":{\"353\":1}}],[\"见下表\",{\"1\":{\"352\":1}}],[\"见下面表格\",{\"1\":{\"344\":1}}],[\"写成了\",{\"1\":{\"351\":1,\"397\":1}}],[\"写jt\",{\"1\":{\"25\":1}}],[\"单独依赖该模块时必须满足\",{\"1\":{\"397\":2}}],[\"单词拼写错误\",{\"1\":{\"351\":1}}],[\"单个数据包的最大大小\",{\"1\":{\"334\":1}}],[\"单个消息包的最大字节数\",{\"1\":{\"238\":1}}],[\"单个消息包的最大大小\",{\"1\":{\"237\":1}}],[\"效果如下\",{\"1\":{\"349\":1}}],[\"命令\",{\"1\":{\"349\":1}}],[\"命令行编译\",{\"0\":{\"347\":1}}],[\"导入后\",{\"1\":{\"349\":1}}],[\"导入eclipse\",{\"0\":{\"349\":1}}],[\"导入idea\",{\"0\":{\"348\":1}}],[\"修饰的实体类的成员变量上\",{\"1\":{\"402\":1}}],[\"修饰的请求消息体实体类\",{\"1\":{\"115\":1}}],[\"修改为\",{\"1\":{\"397\":1,\"399\":1,\"400\":1}}],[\"修改\",{\"1\":{\"348\":1,\"397\":1}}],[\"打开\",{\"1\":{\"348\":1}}],[\"插件\",{\"1\":{\"348\":1,\"349\":1}}],[\"装好\",{\"1\":{\"348\":1,\"349\":1}}],[\"~\",{\"1\":{\"347\":2}}],[\"改为高版本\",{\"1\":{\"344\":1}}],[\"改为比\",{\"1\":{\"344\":1}}],[\"升级到\",{\"1\":{\"397\":1}}],[\"升级指南\",{\"0\":{\"395\":1}}],[\"升级\",{\"1\":{\"344\":1,\"397\":1}}],[\"语法不兼容\",{\"1\":{\"344\":1}}],[\"更低的版本\",{\"1\":{\"344\":1}}],[\"降级之后可能有一些\",{\"1\":{\"344\":1}}],[\"降级\",{\"1\":{\"344\":1}}],[\"各个厂商对\",{\"1\":{\"361\":1}}],[\"各个厂商对808协议都是选择性的实现\",{\"1\":{\"174\":1}}],[\"各个模块的\",{\"1\":{\"344\":1}}],[\"文件最低要求为\",{\"1\":{\"353\":1}}],[\"文件版本\",{\"1\":{\"397\":2}}],[\"文件版本依然是\",{\"1\":{\"344\":1}}],[\"文件版本为\",{\"1\":{\"344\":1}}],[\"文档\",{\"0\":{\"7\":1},\"1\":{\"1\":1}}],[\"模块名称拼写错误修改\",{\"1\":{\"397\":1}}],[\"模块依赖的\",{\"1\":{\"356\":1}}],[\"模块必须使用\",{\"1\":{\"344\":1}}],[\"模块是为\",{\"1\":{\"343\":1}}],[\"虽然源码要求的\",{\"1\":{\"344\":1}}],[\"虽然有这个\",{\"1\":{\"251\":1}}],[\"编译之后的\",{\"1\":{\"397\":2}}],[\"编译命令\",{\"1\":{\"347\":1}}],[\"编译\",{\"0\":{\"346\":1}}],[\"编译输出了\",{\"1\":{\"344\":1}}],[\"编译后的\",{\"1\":{\"344\":1}}],[\"编译源码\",{\"0\":{\"340\":1}}],[\"编码后的字节流\",{\"1\":{\"382\":1}}],[\"编码后子包消息字节流\",{\"1\":{\"241\":1}}],[\"编码为\",{\"1\":{\"382\":1}}],[\"编码解码相关\",{\"0\":{\"379\":1}}],[\"编码器日志\",{\"1\":{\"236\":1}}],[\"编码\",{\"1\":{\"185\":1,\"186\":1}}],[\"编码相关\",{\"1\":{\"72\":1}}],[\"永不为空\",{\"1\":{\"338\":1}}],[\"永远返回true的仅仅用于调试\",{\"1\":{\"193\":1}}],[\"值越小优先级越高\",{\"1\":{\"337\":1}}],[\"值越小越先编码\",{\"1\":{\"161\":1}}],[\"赋值顺序\",{\"1\":{\"337\":1}}],[\"绑定的\",{\"1\":{\"327\":1,\"338\":1}}],[\"正在迭代的当前对象\",{\"1\":{\"327\":1,\"338\":1}}],[\"映射到被该注解修饰的类\",{\"1\":{\"324\":1}}],[\"表明被该注解标记的类可以作为\",{\"1\":{\"333\":1}}],[\"表明被该注解修饰的方法具有处理请求的能力\",{\"1\":{\"321\":1}}],[\"表示这个模块是给\",{\"1\":{\"397\":1}}],[\"表示该类是给客户端回复数据的\",{\"1\":{\"231\":1}}],[\"表示该类是一个消息处理器累\",{\"1\":{\"216\":1}}],[\"表示该类中存在\",{\"1\":{\"140\":1}}],[\"表示给类用来接收请求体\",{\"1\":{\"210\":1}}],[\"表示被标记的类是响应体\",{\"1\":{\"230\":1}}],[\"表示被修饰的字段类型是一个\",{\"1\":{\"161\":1}}],[\"表示被注解的方法是一个\",{\"1\":{\"141\":1}}],[\"表示消息长度的字段占用几个字节\",{\"1\":{\"154\":2}}],[\"表示消息体经过\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"表示消息体不加密\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"表示\",{\"1\":{\"134\":1}}],[\"表示是否启用内置的一些消息处理器\",{\"1\":{\"91\":1}}],[\"表示是否开启服务启动完成后显示组件统计信息\",{\"1\":{\"65\":1,\"90\":1}}],[\"表示交由\",{\"1\":{\"42\":1,\"43\":1,\"99\":1,\"100\":1}}],[\"管理的类\",{\"1\":{\"320\":1}}],[\"附加信息内容\",{\"1\":{\"316\":1}}],[\"附加信息长度\",{\"1\":{\"316\":1}}],[\"附加信息id\",{\"1\":{\"316\":1}}],[\"附加项列表\",{\"1\":{\"316\":1}}],[\"附加项长度字段用1个字节表示\",{\"1\":{\"138\":1}}],[\"许多厂商实现的\",{\"1\":{\"312\":1,\"315\":1}}],[\"许多厂商实现的808协议位置上传报文\",{\"1\":{\"126\":1}}],[\"序列号bcd\",{\"0\":{\"287\":1,\"306\":1}}],[\"序列化string\",{\"0\":{\"290\":1,\"309\":1}}],[\"序列化dword\",{\"0\":{\"284\":1,\"303\":1}}],[\"序列化word\",{\"0\":{\"281\":1,\"300\":1}}],[\"序列化bytes\",{\"0\":{\"278\":1,\"297\":1}}],[\"序列化byte\",{\"0\":{\"275\":1,\"294\":1}}],[\"反序列化string\",{\"0\":{\"289\":1,\"308\":1}}],[\"反序列化bcd\",{\"0\":{\"286\":1,\"305\":1}}],[\"反序列化bytes\",{\"0\":{\"277\":1,\"296\":1}}],[\"反序列化byte\",{\"0\":{\"274\":1,\"293\":1}}],[\"反序列化dword\",{\"0\":{\"283\":1,\"302\":1}}],[\"反序列化word\",{\"0\":{\"280\":1,\"299\":1}}],[\"源类型\",{\"1\":{\"275\":1,\"278\":1,\"281\":1,\"284\":1,\"287\":1,\"290\":1,\"294\":1,\"297\":1,\"300\":1,\"303\":1,\"306\":1,\"309\":1}}],[\"源字段中的终止bit索引\",{\"1\":{\"153\":1,\"330\":1}}],[\"源字段中的起始bit索引\",{\"1\":{\"153\":1,\"330\":1}}],[\"源字段中的第几个bit\",{\"1\":{\"153\":1,\"330\":1}}],[\"源字段名\",{\"1\":{\"153\":1,\"330\":1}}],[\"备注\",{\"1\":{\"274\":1,\"275\":1,\"277\":1,\"278\":1,\"280\":1,\"281\":1,\"283\":1,\"284\":1,\"286\":1,\"287\":1,\"289\":1,\"290\":1,\"293\":1,\"294\":1,\"296\":1,\"297\":1,\"299\":1,\"300\":1,\"302\":1,\"303\":1,\"305\":1,\"306\":1,\"308\":1,\"309\":1}}],[\"地理位置\",{\"1\":{\"272\":1}}],[\"经纬度\",{\"1\":{\"272\":2}}],[\"经度\",{\"1\":{\"128\":3,\"251\":2,\"260\":1,\"263\":1,\"272\":1,\"316\":1}}],[\"传统方式\",{\"0\":{\"291\":1},\"1\":{\"271\":1,\"272\":1}}],[\"传送门\",{\"1\":{\"124\":1,\"126\":1,\"138\":1,\"139\":1,\"143\":1,\"144\":1,\"148\":1,\"162\":1,\"163\":1,\"168\":2,\"173\":2,\"176\":1,\"177\":2,\"178\":1,\"180\":1,\"189\":1,\"190\":1,\"194\":1,\"364\":1,\"365\":1,\"373\":1}}],[\"比如下面这个场景\",{\"1\":{\"403\":1}}],[\"比如\",{\"1\":{\"269\":1}}],[\"比较鸡肋的一个内置组件\",{\"1\":{\"162\":1}}],[\"比较繁琐\",{\"1\":{\"136\":1,\"203\":1}}],[\"现在可以通过自定义注解将\",{\"1\":{\"268\":1}}],[\"格式为\",{\"1\":{\"265\":1}}],[\"格式编码的字符串\",{\"1\":{\"265\":1}}],[\"格式打印\",{\"1\":{\"79\":1}}],[\"先执行\",{\"1\":{\"349\":1}}],[\"先委托内置的\",{\"1\":{\"262\":1}}],[\"先使用自定义解析器\",{\"1\":{\"176\":1}}],[\"`jt808bytewriter`\",{\"1\":{\"421\":1}}],[\"`jt808bytereader`\",{\"1\":{\"418\":1}}],[\"`jt808fielddeserializerregistry`\",{\"1\":{\"262\":1,\"267\":1}}],[\"`bytebufcontainerfieldserializer`\",{\"1\":{\"412\":3}}],[\"`mymsgtype`\",{\"1\":{\"362\":2}}],[\"`startindex`\",{\"1\":{\"313\":3,\"316\":3}}],[\"`0x8003`\",{\"1\":{\"223\":1}}],[\"也没必要修改源码中的\",{\"1\":{\"345\":1}}],[\"也可以直接提供一个已经写好内容的\",{\"1\":{\"424\":1}}],[\"也可以直接在这里指定具体的消息id\",{\"1\":{\"423\":1}}],[\"也可以通过\",{\"1\":{\"418\":2,\"421\":2}}],[\"也可以通过注解别名实现\",{\"1\":{\"269\":1}}],[\"也可以使用\",{\"1\":{\"407\":1,\"411\":1}}],[\"也可以用在被\",{\"1\":{\"402\":1}}],[\"也可以自己扩展注解的属性\",{\"1\":{\"266\":1}}],[\"也是同样的道理\",{\"1\":{\"269\":1}}],[\"也不需要\",{\"1\":{\"262\":1,\"267\":1}}],[\"也就是间接指定了\",{\"1\":{\"251\":2}}],[\"也就是说使用\",{\"1\":{\"344\":1}}],[\"也就是说\",{\"1\":{\"134\":1,\"226\":1,\"236\":1,\"251\":1,\"353\":1}}],[\"也就意味着所有的分包请求都会被丢弃\",{\"1\":{\"224\":3}}],[\"演示如何扩展自己的注解\",{\"1\":{\"258\":1}}],[\"别名\",{\"1\":{\"256\":1}}],[\"别忘了转义\",{\"1\":{\"171\":1}}],[\"底层是个\",{\"1\":{\"406\":2}}],[\"底层的\",{\"1\":{\"255\":1,\"256\":1}}],[\"底层由\",{\"1\":{\"142\":1}}],[\"扩展\",{\"1\":{\"255\":1}}],[\"扩展msgtype\",{\"0\":{\"175\":1}}],[\"兼容\",{\"1\":{\"255\":1}}],[\"兼容吗\",{\"1\":{\"255\":1}}],[\"兼容性\",{\"0\":{\"255\":1,\"350\":1}}],[\"快捷方式\",{\"1\":{\"252\":1,\"253\":1}}],[\"快速初始化一个\",{\"1\":{\"190\":1,\"365\":1}}],[\"快速开始\",{\"0\":{\"189\":1,\"364\":1},\"1\":{\"68\":1,\"72\":1,\"182\":1}}],[\"省去了\",{\"1\":{\"251\":1}}],[\"省域id\",{\"1\":{\"210\":1,\"328\":2,\"418\":4}}],[\"省域\",{\"1\":{\"165\":1}}],[\"说白了就是\",{\"1\":{\"251\":1}}],[\"说明\",{\"0\":{\"228\":1,\"230\":1,\"233\":1},\"1\":{\"322\":1,\"326\":1,\"327\":1,\"334\":1,\"337\":1,\"338\":1}}],[\"鉴于以上几个问题\",{\"1\":{\"251\":1}}],[\"鉴权码\",{\"1\":{\"231\":1,\"234\":1,\"339\":1,\"421\":1}}],[\"鉴权成功与否是由函数式接口\",{\"1\":{\"193\":1}}],[\"鉴权逻辑\",{\"1\":{\"171\":1}}],[\"鉴权消息\",{\"1\":{\"47\":1,\"162\":1}}],[\"了\",{\"1\":{\"251\":1,\"268\":1,\"391\":1}}],[\"了一个\",{\"1\":{\"199\":1}}],[\"了一个叫\",{\"1\":{\"125\":1}}],[\"没有其他任何属性\",{\"1\":{\"320\":1}}],[\"没有维护\",{\"1\":{\"251\":1}}],[\"没钱的捧个人场\",{\"1\":{\"5\":1}}],[\"因为这个是给\",{\"1\":{\"344\":1}}],[\"因为当前源码的最低要求是\",{\"1\":{\"344\":1}}],[\"因为此时没有\",{\"1\":{\"338\":2}}],[\"因为此时的鉴权逻辑已经完全交由你自定的\",{\"1\":{\"162\":1}}],[\"因为在特殊场景下\",{\"1\":{\"410\":1}}],[\"因为在\",{\"1\":{\"320\":1}}],[\"因为\",{\"1\":{\"251\":1,\"343\":1}}],[\"小节\",{\"0\":{\"244\":1}}],[\"小蒲的大门牙\",{\"1\":{\"8\":1}}],[\"获取子包\",{\"1\":{\"243\":1}}],[\"遇到分包补传请求\",{\"1\":{\"241\":1}}],[\"遇到分包请求时会回调\",{\"1\":{\"223\":1}}],[\"子包\",{\"1\":{\"241\":1}}],[\"子包保存多久看具体实现类的实现逻辑\",{\"1\":{\"241\":1}}],[\"保存某个子包\",{\"1\":{\"241\":1}}],[\"保留\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"日志的输出\",{\"1\":{\"239\":1}}],[\"日志的级别调整为\",{\"1\":{\"236\":1}}],[\"指向的\",{\"1\":{\"417\":1,\"420\":1}}],[\"指的就是你自定义的类型\",{\"1\":{\"362\":1}}],[\"指定单个消息包的最大大小\",{\"1\":{\"237\":1}}],[\"指南\",{\"0\":{\"66\":1,\"70\":1}}],[\"超过该值会自动分包发送\",{\"1\":{\"238\":1}}],[\"超过\",{\"1\":{\"237\":1}}],[\"级别\",{\"1\":{\"236\":1}}],[\"级别的日志\",{\"1\":{\"176\":1}}],[\"忽略请求读取过程\",{\"1\":{\"234\":1}}],[\"忽略所有分包请求\",{\"1\":{\"224\":1}}],[\"车辆标识\",{\"1\":{\"328\":1,\"418\":2}}],[\"车辆已被注册\",{\"1\":{\"231\":1,\"234\":1,\"339\":1,\"421\":1}}],[\"车牌颜色\",{\"1\":{\"165\":1,\"328\":1,\"418\":2}}],[\"部分依旧是\",{\"1\":{\"387\":1}}],[\"部分\",{\"1\":{\"231\":1,\"251\":1}}],[\"部分的处理逻辑和被\",{\"1\":{\"211\":1}}],[\"毕竟当注解不方便处理请求时\",{\"1\":{\"228\":1}}],[\"能执行到这里就意味着\",{\"1\":{\"384\":1}}],[\"能混合使用吗\",{\"1\":{\"256\":2}}],[\"能将处理被\",{\"1\":{\"228\":1}}],[\"能将消息路由到\",{\"1\":{\"213\":2}}],[\"能处理\",{\"1\":{\"228\":1}}],[\"是一样的\",{\"1\":{\"406\":1}}],[\"是位操作的工具类\",{\"1\":{\"402\":1}}],[\"是从之前的\",{\"1\":{\"397\":1}}],[\"是本次新增的模块\",{\"1\":{\"397\":1}}],[\"是其余模块用到的\",{\"1\":{\"344\":1,\"345\":1}}],[\"是\",{\"1\":{\"344\":1,\"345\":1,\"356\":1,\"401\":1,\"403\":1,\"404\":1,\"405\":1,\"409\":1}}],[\"是给\",{\"1\":{\"252\":1,\"253\":1,\"256\":1,\"355\":2}}],[\"是不是简介多了\",{\"1\":{\"251\":1}}],[\"是通过\",{\"1\":{\"251\":1}}],[\"是必须要指定的吗\",{\"1\":{\"251\":4}}],[\"是内置的\",{\"1\":{\"228\":1}}],[\"是由\",{\"1\":{\"228\":1}}],[\"是否是嵌套类型\",{\"1\":{\"161\":1}}],[\"是否是格式化过的\",{\"1\":{\"79\":1}}],[\"是否南纬\",{\"1\":{\"132\":1}}],[\"是否启用全局异常处理机制\",{\"1\":{\"55\":1}}],[\"是否启用基于注解的msghandler功能\",{\"1\":{\"51\":1}}],[\"是否启用实体扫描功能\",{\"1\":{\"46\":1}}],[\"是否自动注册内置的\",{\"1\":{\"47\":1,\"49\":1,\"53\":1,\"57\":1}}],[\"任何类型的消息处理器返回的结果都被包装成了\",{\"1\":{\"228\":1}}],[\"空的实现\",{\"1\":{\"224\":1,\"242\":1}}],[\"要替换内置的分包暂存器只需将对应类型的\",{\"1\":{\"394\":1}}],[\"要自定义\",{\"1\":{\"385\":1,\"393\":1}}],[\"要使用\",{\"1\":{\"384\":2}}],[\"要想替换该组件\",{\"1\":{\"380\":1}}],[\"要基于源码二次开发\",{\"1\":{\"341\":1}}],[\"要扩展一种不支持的数据类型\",{\"1\":{\"269\":1}}],[\"要扩展\",{\"1\":{\"269\":1}}],[\"要求\",{\"0\":{\"342\":1}}],[\"要求重传的子包id\",{\"1\":{\"241\":1}}],[\"要求终端重传某些子包<\",{\"1\":{\"223\":1}}],[\"要定制\",{\"1\":{\"179\":1,\"391\":1}}],[\"投递出去<\",{\"1\":{\"223\":1}}],[\"投递给消息处理器处理\",{\"1\":{\"222\":1}}],[\"联系起来\",{\"1\":{\"218\":1}}],[\"联系我们\",{\"0\":{\"4\":1}}],[\"需要你自己在恰当的时机释放掉\",{\"1\":{\"413\":1}}],[\"需要\",{\"1\":{\"413\":1}}],[\"需要在恰当的时机释放掉\",{\"1\":{\"406\":1}}],[\"需要对某个\",{\"1\":{\"403\":1}}],[\"需要配置\",{\"1\":{\"384\":2}}],[\"需要重传的子包id\",{\"1\":{\"243\":1}}],[\"需要借助\",{\"1\":{\"218\":1}}],[\"需要手动拼装为符合808协议格式的报文\",{\"1\":{\"145\":1}}],[\"作用\",{\"0\":{\"402\":1,\"406\":1,\"410\":1}}],[\"作用就是标记一下当前类是一个消息处理器类\",{\"1\":{\"215\":1}}],[\"作用和\",{\"1\":{\"326\":4}}],[\"作用和length相同\",{\"1\":{\"151\":1,\"154\":1}}],[\"作用和startindex相同\",{\"1\":{\"151\":1}}],[\"泛型\",{\"1\":{\"211\":1}}],[\"调用处理器处理请求\",{\"1\":{\"387\":1}}],[\"调用处理器方法之前回调\",{\"1\":{\"199\":1}}],[\"调试相关\",{\"0\":{\"13\":1},\"1\":{\"18\":1}}],[\"容器即可\",{\"1\":{\"394\":1}}],[\"容器中\",{\"1\":{\"362\":1}}],[\"容器中就可以替换内置的\",{\"1\":{\"391\":1}}],[\"容器中就可以\",{\"1\":{\"219\":1}}],[\"容器中就可以生效了\",{\"1\":{\"199\":1}}],[\"容器中即可\",{\"1\":{\"200\":1}}],[\"容易导致bean之间的循环依赖\",{\"1\":{\"164\":1}}],[\"会随着\",{\"1\":{\"413\":1}}],[\"会被\",{\"1\":{\"412\":3}}],[\"会在\",{\"1\":{\"392\":1,\"413\":1}}],[\"会在执行处理器方法之前\",{\"1\":{\"199\":1}}],[\"会将子包保存在\",{\"1\":{\"241\":1}}],[\"会将较大的消息自动分包\",{\"1\":{\"236\":1}}],[\"会发送\",{\"1\":{\"240\":1}}],[\"会自动分包发送\",{\"1\":{\"237\":1}}],[\"会自动将消息拆分为多个子包发送\",{\"1\":{\"237\":1}}],[\"会自动将消息分包发送给客户端\",{\"1\":{\"236\":1}}],[\"会先将分包消息\",{\"1\":{\"222\":1}}],[\"会正常调用处理器方法处理消息\",{\"1\":{\"199\":1}}],[\"会尽最大可能在非工作时间及时处理\",{\"1\":{\"4\":1}}],[\"借鉴\",{\"1\":{\"199\":1,\"215\":1,\"384\":1}}],[\"介绍\",{\"0\":{\"199\":1,\"203\":1,\"213\":1,\"215\":1,\"218\":1,\"387\":1}}],[\"生成配置\",{\"1\":{\"349\":1}}],[\"生成同样的key\",{\"1\":{\"197\":1}}],[\"生成key\",{\"1\":{\"197\":1}}],[\"放入\",{\"1\":{\"197\":1}}],[\"收到终端上报的分包请求时\",{\"1\":{\"222\":1}}],[\"收到终端回复时会根据这个key来匹配\",{\"1\":{\"197\":1}}],[\"收到结果后\",{\"1\":{\"197\":1}}],[\"无论以什么发包工具发包\",{\"1\":{\"194\":3,\"372\":1}}],[\"无符号双字节整型\",{\"1\":{\"186\":1}}],[\"无符号双字节整形\",{\"1\":{\"185\":1}}],[\"无符号单字节整型\",{\"1\":{\"186\":1}}],[\"无符号单字节整形\",{\"1\":{\"185\":1}}],[\"无符号四字节整形\",{\"1\":{\"185\":1}}],[\"无符号四字节整型\",{\"1\":{\"129\":1,\"186\":1}}],[\"启动项目\",{\"0\":{\"371\":1}}],[\"启动\",{\"1\":{\"193\":1,\"371\":1}}],[\"启用自动配置\",{\"1\":{\"192\":2}}],[\"启用后\",{\"1\":{\"46\":1,\"51\":1,\"55\":1}}],[\"至于\",{\"1\":{\"356\":1}}],[\"至少在\",{\"1\":{\"351\":1}}],[\"至少内置了鉴权消息的实体类\",{\"1\":{\"115\":1}}],[\"至此\",{\"1\":{\"193\":1,\"371\":1}}],[\"测试报文如下\",{\"1\":{\"314\":1,\"317\":1}}],[\"测试\",{\"0\":{\"193\":1,\"314\":1,\"317\":1,\"370\":1},\"1\":{\"194\":1}}],[\"<=\",{\"1\":{\"397\":1}}],[\"<h3\",{\"1\":{\"384\":1}}],[\"<groupid>org\",{\"1\":{\"357\":2,\"358\":2}}],[\"<groupid>io\",{\"1\":{\"191\":1,\"357\":1,\"358\":1}}],[\"<artifactid>spring\",{\"1\":{\"357\":2,\"358\":2}}],[\"<artifactid>jt\",{\"1\":{\"191\":1,\"357\":1,\"358\":1}}],[\"<exclusion>\",{\"1\":{\"357\":1,\"358\":1}}],[\"<exclusions>\",{\"1\":{\"357\":1,\"358\":1}}],[\"<version>3\",{\"1\":{\"358\":1}}],[\"<version>2\",{\"1\":{\"357\":2,\"358\":1}}],[\"<version>1\",{\"1\":{\"191\":1}}],[\"<dependencies>\",{\"1\":{\"357\":1,\"358\":1}}],[\"<dependency>\",{\"1\":{\"191\":1,\"357\":2,\"358\":2}}],[\"<<repo\",{\"1\":{\"347\":1}}],[\"<<<<<<<<<<<<<<<\",{\"1\":{\"239\":6}}],[\"<p>\",{\"1\":{\"223\":2,\"376\":2,\"381\":1,\"384\":6,\"392\":3}}],[\"<li>长时间未到达服务端的子包应该及时回收掉\",{\"1\":{\"223\":1}}],[\"<li>某些子包丢失未到达时应该自动发送\",{\"1\":{\"223\":1}}],[\"<li>当所有子包都到达后\",{\"1\":{\"223\":1}}],[\"<li>被\",{\"1\":{\"199\":3,\"387\":1}}],[\"<li>\",{\"1\":{\"199\":3,\"387\":1}}],[\"<ol>\",{\"1\":{\"199\":3,\"223\":1,\"387\":1}}],[\"<\",{\"1\":{\"191\":1,\"199\":3,\"223\":1,\"347\":6,\"357\":11,\"358\":11,\"387\":3}}],[\"工程\",{\"1\":{\"190\":2,\"365\":2}}],[\"工具发送\",{\"1\":{\"14\":1}}],[\"创建一个空的\",{\"1\":{\"190\":1,\"365\":1}}],[\"创建工程\",{\"0\":{\"190\":1,\"365\":1}}],[\"9\",{\"1\":{\"188\":3,\"316\":4,\"418\":2}}],[\"整个报文中最复杂也就是消息头的处理了\",{\"1\":{\"188\":1}}],[\"整体是一个\",{\"1\":{\"136\":1}}],[\"整体消息结构和\",{\"1\":{\"31\":1}}],[\"若无数据\",{\"1\":{\"185\":1,\"186\":1}}],[\"码\",{\"1\":{\"185\":1,\"186\":1}}],[\"双字\",{\"1\":{\"185\":1,\"186\":1}}],[\"非必须配置\",{\"1\":{\"181\":1,\"380\":1,\"381\":1,\"382\":1,\"391\":1,\"392\":2,\"393\":1,\"394\":2}}],[\"非常感谢老哥\",{\"1\":{\"181\":1}}],[\"非分包消息\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"贡献\",{\"1\":{\"181\":1}}],[\"鸣谢\",{\"1\":{\"181\":1}}],[\"事件\",{\"1\":{\"180\":1,\"392\":1}}],[\"移除事件\",{\"1\":{\"392\":1}}],[\"移除\",{\"1\":{\"180\":1}}],[\"添加了\",{\"1\":{\"397\":1,\"399\":1}}],[\"添加依赖\",{\"0\":{\"191\":1,\"366\":1}}],[\"添加\",{\"1\":{\"180\":1}}],[\"建议实现接口的时候使用枚举\",{\"1\":{\"174\":1,\"361\":1}}],[\"建议使用\",{\"1\":{\"67\":3,\"71\":1}}],[\"继承过来的\",{\"1\":{\"251\":1}}],[\"继承\",{\"1\":{\"171\":1}}],[\"又或者像这样\",{\"1\":{\"171\":1}}],[\"组装响应消息的字节数组\",{\"1\":{\"171\":1}}],[\"组件统计信息\",{\"1\":{\"193\":1,\"371\":1}}],[\"组件关系图源文件位于\",{\"1\":{\"118\":1}}],[\"组件关系图\",{\"0\":{\"118\":1}}],[\"组件\",{\"1\":{\"90\":1}}],[\"组件顺序\",{\"0\":{\"112\":1},\"1\":{\"68\":1,\"106\":1}}],[\"发报文\",{\"0\":{\"372\":1}}],[\"发现消息包的大小超过了阈值\",{\"1\":{\"236\":1}}],[\"发送下面这条测试报文\",{\"1\":{\"239\":1}}],[\"发送下面三条分包报文\",{\"1\":{\"225\":1}}],[\"发送三条报文之后\",{\"1\":{\"225\":1}}],[\"发送\",{\"1\":{\"194\":3,\"372\":1}}],[\"发送给客户端\",{\"1\":{\"169\":1,\"171\":1}}],[\"发包请移步\",{\"1\":{\"127\":1}}],[\"发包工具\",{\"1\":{\"14\":1}}],[\"负责将\",{\"1\":{\"382\":1}}],[\"负责将请求中的\",{\"1\":{\"381\":1}}],[\"负责将客户端请求中的\",{\"1\":{\"166\":1}}],[\"负责\",{\"1\":{\"380\":1}}],[\"负责解析\",{\"1\":{\"362\":1}}],[\"负责处理经过\",{\"1\":{\"169\":1}}],[\"必须满足\",{\"1\":{\"353\":2}}],[\"必须使用\",{\"1\":{\"343\":1}}],[\"必须\",{\"1\":{\"167\":1,\"169\":1}}],[\"必须实现标记接口\",{\"1\":{\"150\":1}}],[\"转为\",{\"1\":{\"265\":1}}],[\"转为浮点数\",{\"1\":{\"260\":1}}],[\"转为数字\",{\"1\":{\"260\":1}}],[\"转义响应消息\",{\"1\":{\"380\":1}}],[\"转义请求消息\",{\"1\":{\"380\":1}}],[\"转义\",{\"1\":{\"380\":1}}],[\"转义之后的消息\",{\"1\":{\"380\":2}}],[\"转义之后\",{\"1\":{\"225\":3,\"239\":3,\"375\":2}}],[\"转义之前\",{\"1\":{\"225\":3,\"236\":1,\"237\":3,\"238\":1,\"239\":3,\"334\":1}}],[\"转义相关配置\",{\"1\":{\"164\":1}}],[\"转义相关\",{\"0\":{\"163\":1},\"1\":{\"68\":1}}],[\"转换出来的其他类型\",{\"1\":{\"220\":1}}],[\"转换成可读性较强的自定义类型\",{\"1\":{\"203\":1}}],[\"转换之后的\",{\"1\":{\"169\":1,\"361\":1}}],[\"转换为\",{\"1\":{\"166\":1,\"268\":1}}],[\"制造商id\",{\"1\":{\"328\":1,\"418\":2}}],[\"制造商\",{\"1\":{\"165\":1}}],[\"市县域\",{\"1\":{\"165\":1}}],[\"流水号生成器\",{\"1\":{\"423\":1,\"424\":1}}],[\"流水号个数\",{\"1\":{\"393\":1}}],[\"流水号的生成策略\",{\"1\":{\"393\":1}}],[\"流水号\",{\"1\":{\"165\":1,\"376\":2}}],[\"终端补传分包请求\",{\"1\":{\"240\":1,\"243\":1}}],[\"终端已被注册\",{\"1\":{\"231\":1,\"234\":1,\"339\":1,\"421\":1}}],[\"终端注册消息\",{\"1\":{\"371\":1}}],[\"终端注册\",{\"1\":{\"219\":1,\"225\":1,\"234\":1,\"361\":1,\"371\":1}}],[\"终端鉴权\",{\"1\":{\"175\":1,\"193\":1,\"361\":1,\"371\":1}}],[\"终端\",{\"1\":{\"165\":1}}],[\"终端型号\",{\"1\":{\"165\":1,\"328\":1,\"418\":2}}],[\"终端id\",{\"1\":{\"165\":1,\"328\":1,\"418\":2}}],[\"终端手机号或设备id\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"终端手机号\",{\"1\":{\"25\":1,\"30\":1,\"34\":1,\"188\":1,\"241\":1,\"376\":2}}],[\"找到相关代码\",{\"1\":{\"163\":1,\"173\":1,\"176\":1,\"177\":2,\"178\":1,\"180\":1}}],[\"那么authcodevalidator也无需提供了\",{\"1\":{\"172\":1}}],[\"那么你也\",{\"1\":{\"162\":1}}],[\"那么此时到底由谁去处理\",{\"1\":{\"115\":1}}],[\"未知类型\",{\"1\":{\"186\":1}}],[\"未启用内置的\",{\"1\":{\"162\":1}}],[\"未定义\",{\"1\":{\"132\":1}}],[\"客户自定义给字段的编码实现\",{\"1\":{\"161\":1}}],[\"客户端请求消息中的字节流最终会解析到\",{\"1\":{\"375\":1}}],[\"客户端对该\",{\"1\":{\"148\":1}}],[\"客户端\",{\"1\":{\"20\":1,\"372\":1}}],[\"嵌套的类型\",{\"1\":{\"161\":1}}],[\"描述信息\",{\"1\":{\"322\":1,\"334\":1}}],[\"描述及要求\",{\"1\":{\"185\":1}}],[\"描述\",{\"1\":{\"160\":1}}],[\"还不如直接交给\",{\"1\":{\"320\":1}}],[\"还是很方便的🤣\",{\"1\":{\"162\":1}}],[\"还可以返回\",{\"1\":{\"158\":1}}],[\"还好附加项报文的格式也是有迹可循的\",{\"1\":{\"136\":1}}],[\"外\",{\"1\":{\"158\":1,\"356\":1}}],[\"除以上两种情况之外\",{\"1\":{\"413\":1}}],[\"除以10^6\",{\"1\":{\"134\":1}}],[\"除了使用注解\",{\"1\":{\"418\":1,\"421\":1}}],[\"除了使用\",{\"1\":{\"418\":1,\"421\":1}}],[\"除了可以使用\",{\"1\":{\"407\":1,\"411\":1}}],[\"除了\",{\"1\":{\"356\":1}}],[\"除了直接返回\",{\"1\":{\"158\":1}}],[\"返回\",{\"1\":{\"157\":1,\"220\":1,\"381\":1}}],[\"失败\",{\"1\":{\"156\":1,\"159\":1,\"423\":1,\"424\":1}}],[\"确认\",{\"1\":{\"156\":1,\"159\":1,\"423\":1,\"424\":1}}],[\"成功\",{\"1\":{\"156\":1,\"159\":1,\"231\":1,\"234\":1,\"339\":1,\"421\":1,\"423\":1,\"424\":1}}],[\"应该和初始化传入的是同一个对象\",{\"1\":{\"420\":1}}],[\"应该在恰当的时机释放被包装的\",{\"1\":{\"417\":1,\"420\":1}}],[\"应该先转换为数字\",{\"1\":{\"134\":1}}],[\"应答id\",{\"1\":{\"156\":1,\"159\":1,\"423\":1,\"424\":1}}],[\"应答流水号\",{\"1\":{\"156\":1,\"159\":1,\"423\":1,\"424\":1}}],[\"服务端\",{\"0\":{\"373\":1}}],[\"服务端将消息分包发送时\",{\"1\":{\"241\":1}}],[\"服务端下发消息的\",{\"1\":{\"160\":1}}],[\"服务端通用应答消息\",{\"1\":{\"156\":1}}],[\"服务器的tcp端口\",{\"1\":{\"41\":1,\"98\":1}}],[\"常用的\",{\"1\":{\"156\":1}}],[\"常见的报文\",{\"1\":{\"125\":1}}],[\"像下面这种处理方式\",{\"1\":{\"155\":1}}],[\"像处理器链一样逐个往下调用谁能处理就谁处理\",{\"1\":{\"115\":1}}],[\"而\",{\"1\":{\"228\":1,\"406\":1}}],[\"而应该以\",{\"1\":{\"176\":1}}],[\"而是定义了一个\",{\"1\":{\"174\":1,\"361\":1}}],[\"而言的\",{\"1\":{\"155\":1}}],[\"而没必要提供一个\",{\"1\":{\"125\":1}}],[\"适用于类似位置附加消息的结构\",{\"1\":{\"154\":1}}],[\"目录下的项目复制了一份改成了\",{\"1\":{\"363\":1}}],[\"目标类型\",{\"1\":{\"274\":1,\"277\":1,\"280\":1,\"283\":1,\"286\":1,\"289\":1,\"293\":1,\"296\":1,\"299\":1,\"302\":1,\"305\":1,\"308\":1}}],[\"目标属性\",{\"1\":{\"152\":1}}],[\"目的\",{\"0\":{\"260\":1,\"265\":1}}],[\"目前只支持\",{\"1\":{\"402\":1}}],[\"目前只提供了一个最基本的内测版的注解\",{\"1\":{\"125\":1}}],[\"目前内置的处理器有两种\",{\"1\":{\"387\":1}}],[\"目前支持自动注入的参数类型如下\",{\"1\":{\"142\":1}}],[\"目前为止\",{\"1\":{\"108\":1,\"150\":1,\"246\":1}}],[\"长度\",{\"1\":{\"151\":1,\"326\":1}}],[\"长度6字节\",{\"1\":{\"128\":1}}],[\"起始字节索引\",{\"1\":{\"151\":1,\"154\":1,\"326\":1}}],[\"取值示例\",{\"1\":{\"150\":1,\"151\":1,\"152\":1,\"153\":1,\"154\":2,\"160\":1,\"161\":1}}],[\"解释\",{\"1\":{\"150\":1,\"151\":1,\"152\":1,\"153\":1,\"154\":2,\"160\":1,\"161\":1}}],[\"解析之后的\",{\"1\":{\"381\":1}}],[\"解析请求\",{\"1\":{\"381\":1}}],[\"解析报文到实体类\",{\"0\":{\"313\":1,\"316\":1}}],[\"解析经纬度的实体类可能是下面这种写法\",{\"1\":{\"251\":1}}],[\"解析出了鉴权码\",{\"1\":{\"194\":1}}],[\"解析为\",{\"1\":{\"262\":1,\"272\":2}}],[\"解析为double\",{\"0\":{\"135\":1}}],[\"解析为4字节的int\",{\"0\":{\"134\":1}}],[\"解析位置基本信息\",{\"0\":{\"128\":1}}],[\"设置终端参数\",{\"1\":{\"148\":1,\"335\":1}}],[\"通过实体类来转换消息体内容\",{\"1\":{\"423\":1}}],[\"通过\",{\"1\":{\"423\":1}}],[\"通过commandsender下发\",{\"0\":{\"197\":1}}],[\"通过session发送数据\",{\"1\":{\"145\":1}}],[\"通过终端id获取session\",{\"1\":{\"145\":1}}],[\"通过以下截图\",{\"1\":{\"128\":1}}],[\"给\",{\"1\":{\"397\":2}}],[\"给你的\",{\"1\":{\"143\":1}}],[\"给处理器实例\",{\"1\":{\"111\":1}}],[\"交给spring来管理\",{\"1\":{\"143\":1}}],[\"来写入内容\",{\"1\":{\"424\":1}}],[\"来生成自增的流水号\",{\"1\":{\"423\":1,\"424\":1}}],[\"来指定了消息id\",{\"1\":{\"423\":1}}],[\"来构建报文\",{\"1\":{\"424\":1}}],[\"来构建\",{\"1\":{\"422\":1}}],[\"来手动写入数据\",{\"1\":{\"421\":2}}],[\"来手动读取数据\",{\"1\":{\"416\":1,\"418\":2}}],[\"来简化这种操作\",{\"1\":{\"411\":1}}],[\"来编译\",{\"1\":{\"347\":1}}],[\"来说\",{\"1\":{\"272\":1}}],[\"来解析的\",{\"1\":{\"251\":1}}],[\"来解析报文的\",{\"1\":{\"251\":1}}],[\"来观察分包请求的处理过程\",{\"1\":{\"225\":1}}],[\"来观察请求分包消息\",{\"1\":{\"225\":1}}],[\"来了解\",{\"1\":{\"220\":1}}],[\"来将请求和\",{\"1\":{\"218\":1}}],[\"来将原始的\",{\"1\":{\"203\":1}}],[\"来控制流水号生成策略\",{\"1\":{\"393\":1}}],[\"来控制\",{\"1\":{\"193\":1,\"371\":1}}],[\"来覆盖默认逻辑\",{\"1\":{\"177\":1}}],[\"来表示\",{\"1\":{\"156\":1,\"411\":1}}],[\"来完成注入\",{\"1\":{\"142\":1}}],[\"来处理了\",{\"1\":{\"162\":1}}],[\"来处理组件注册时的\",{\"1\":{\"115\":1}}],[\"来处理\",{\"1\":{\"51\":1,\"162\":1,\"320\":1}}],[\"用来充当消息体\",{\"1\":{\"424\":1}}],[\"用来构建调试报文\",{\"1\":{\"422\":1}}],[\"用来像\",{\"1\":{\"419\":1}}],[\"用来从\",{\"1\":{\"416\":1}}],[\"用来替代\",{\"1\":{\"410\":1}}],[\"用来生成流水号\",{\"1\":{\"393\":1}}],[\"用来控制单个消息包的最大大小\",{\"1\":{\"237\":1}}],[\"用来控制打印的\",{\"1\":{\"79\":1}}],[\"用的\",{\"1\":{\"344\":1}}],[\"用到的\",{\"1\":{\"344\":1,\"345\":1,\"348\":1}}],[\"用法类似\",{\"1\":{\"215\":1}}],[\"用法请参考示例\",{\"1\":{\"152\":1,\"153\":1,\"154\":1}}],[\"用发包工具发送如下报文给服务器\",{\"1\":{\"194\":1}}],[\"用于占位符或默认值\",{\"1\":{\"186\":1}}],[\"用于嵌套的附加信息实体类\",{\"1\":{\"154\":1}}],[\"用\",{\"1\":{\"142\":1}}],[\"up\",{\"1\":{\"262\":2,\"347\":1}}],[\"upload\",{\"1\":{\"141\":2,\"159\":3,\"167\":1,\"171\":1,\"172\":1,\"175\":1}}],[\"unsigneddword\",{\"1\":{\"417\":1}}],[\"unsigned\",{\"1\":{\"269\":1}}],[\"unmodifiablesetversion2013\",{\"1\":{\"234\":1}}],[\"unmodifiablesetversion2011\",{\"1\":{\"219\":1}}],[\"unknown\",{\"1\":{\"186\":1}}],[\"unpooled\",{\"1\":{\"145\":1,\"171\":1}}],[\"utils\",{\"1\":{\"165\":1}}],[\"util\",{\"1\":{\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"80\":1,\"176\":1}}],[\"被置为\",{\"1\":{\"404\":3}}],[\"被关闭的\",{\"1\":{\"392\":1}}],[\"被移除的\",{\"1\":{\"392\":1}}],[\"被该注解标记的类应该是被\",{\"1\":{\"320\":1}}],[\"被该注解标记的类中应该存在若干个能处理请求的方法\",{\"1\":{\"215\":1}}],[\"被\",{\"1\":{\"158\":1,\"204\":1,\"210\":1,\"215\":1}}],[\"被其注解的方法相当于一个实现了\",{\"1\":{\"141\":1}}],[\"被具体厂商精简过的文档\",{\"1\":{\"126\":1}}],[\"方法可以将消息体转换为\",{\"1\":{\"416\":1}}],[\"方法手动注册监听器\",{\"1\":{\"392\":1}}],[\"方法名\",{\"1\":{\"326\":1}}],[\"方法级别\",{\"1\":{\"213\":1}}],[\"方法来控制多个拦截器的执行顺序\",{\"1\":{\"200\":1}}],[\"方法来发送数据\",{\"1\":{\"196\":1}}],[\"方法的\",{\"1\":{\"169\":1}}],[\"方法返回值为\",{\"1\":{\"157\":1}}],[\"方法返回类型为\",{\"1\":{\"157\":1}}],[\"方法\",{\"1\":{\"140\":1,\"141\":2}}],[\"方向\",{\"1\":{\"128\":1,\"316\":1}}],[\"上次通信时间\",{\"1\":{\"377\":1}}],[\"上进行业务开发\",{\"1\":{\"353\":1}}],[\"上下文中的消息体总长度减去前面消费掉的字节数\",{\"1\":{\"328\":1}}],[\"上面代码中的\",{\"1\":{\"251\":1}}],[\"上面日志解释如下\",{\"1\":{\"225\":1,\"239\":1}}],[\"上一小节介绍了怎么接收请求\",{\"1\":{\"203\":1}}],[\"上\",{\"1\":{\"140\":1,\"141\":1,\"150\":1}}],[\"上班时间\",{\"1\":{\"4\":1}}],[\"示例2\",{\"0\":{\"264\":1}}],[\"示例1\",{\"0\":{\"259\":1}}],[\"示例如下\",{\"1\":{\"211\":1}}],[\"示例代码\",{\"0\":{\"159\":1}}],[\"示例\",{\"0\":{\"148\":1,\"200\":1,\"216\":1,\"219\":1,\"225\":1,\"231\":1,\"234\":1,\"239\":1,\"243\":1,\"323\":1,\"328\":1,\"331\":1,\"335\":1,\"339\":1},\"1\":{\"322\":1,\"326\":1,\"334\":1,\"337\":1,\"380\":1,\"381\":1}}],[\"示例文档中并没涉及到附加项嵌套的情况\",{\"1\":{\"138\":1}}],[\"示例项目\",{\"1\":{\"1\":1}}],[\"锁状态字段的说明\",{\"1\":{\"138\":1}}],[\"切记\",{\"1\":{\"138\":1}}],[\"仅仅用一个类无法定义确切类型\",{\"1\":{\"137\":1}}],[\"仅仅用一个类是无法定义确切类型\",{\"1\":{\"137\":1}}],[\"仅仅是消息体的区别\",{\"1\":{\"25\":1}}],[\"由谁来处理消息取决于\",{\"1\":{\"213\":1}}],[\"由于附加项的类型不固定\",{\"1\":{\"137\":1}}],[\"由以上源码不难看出组件的优先级问题\",{\"1\":{\"116\":1}}],[\"另外如果附加项内部有嵌套的时候也不好处理\",{\"1\":{\"136\":1}}],[\"另外拜托群里的各位大佬能解答一下新人的疑问\",{\"1\":{\"4\":1}}],[\"每个项目都应该提供一个自己的\",{\"1\":{\"361\":1,\"362\":1}}],[\"每个硬件厂商实现808协议的时候对转义的处理可能略有不同\",{\"1\":{\"163\":1}}],[\"每个\",{\"1\":{\"136\":1}}],[\"每次消息处理时为实体类注入\",{\"1\":{\"109\":1,\"110\":1,\"247\":1,\"248\":1}}],[\"暂且先忽略\",{\"1\":{\"251\":1}}],[\"暂且就认为是必须的吧\",{\"1\":{\"251\":1}}],[\"暂且将\",{\"1\":{\"136\":1}}],[\"暂存分包请求\",{\"1\":{\"223\":1}}],[\"暂存\",{\"1\":{\"222\":1}}],[\"暂时没有其他属性\",{\"1\":{\"324\":1}}],[\"暂时没想到一种比较优雅的\",{\"1\":{\"226\":1}}],[\"暂时没时间画了\",{\"1\":{\"147\":1}}],[\"暂时调整日志级别以便观察分包请求处理\",{\"1\":{\"225\":1}}],[\"暂时不支持\",{\"1\":{\"22\":1}}],[\"结果\",{\"1\":{\"156\":1,\"159\":1,\"423\":1,\"424\":1}}],[\"结构\",{\"1\":{\"136\":1}}],[\"结尾的示例是\",{\"1\":{\"27\":1,\"318\":1}}],[\"根据文档\",{\"1\":{\"136\":1}}],[\"根据安装后终端自身的手机号转换\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"到底该哪些属性是必须的\",{\"1\":{\"251\":1}}],[\"到\",{\"1\":{\"135\":1,\"222\":1,\"260\":1}}],[\"然后将自定义的\",{\"1\":{\"391\":1}}],[\"然后在下面的自定义\",{\"1\":{\"390\":1}}],[\"然后\",{\"1\":{\"349\":1}}],[\"然后观察\",{\"1\":{\"239\":1}}],[\"然后通过\",{\"1\":{\"169\":1}}],[\"然后指定\",{\"1\":{\"135\":1}}],[\"然后再根据自己的要求进一步转换\",{\"1\":{\"262\":1}}],[\"然后再手动除以\",{\"1\":{\"260\":1}}],[\"然后再除以\",{\"1\":{\"260\":1}}],[\"然后再\",{\"1\":{\"134\":1}}],[\"然后你可以将字节数组手动转换到\",{\"1\":{\"130\":1}}],[\"接收\",{\"1\":{\"213\":1,\"220\":1}}],[\"接收到的字节数组中的表示经纬度的\",{\"1\":{\"134\":1}}],[\"接口声明\",{\"1\":{\"387\":1}}],[\"接口内容如下\",{\"1\":{\"375\":1}}],[\"接口定义\",{\"1\":{\"361\":1,\"362\":1}}],[\"接口定义如下\",{\"1\":{\"199\":1}}],[\"接口以供用户自行扩展\",{\"1\":{\"174\":1,\"361\":1}}],[\"接口来实现的\",{\"1\":{\"169\":1}}],[\"接口实现转义逻辑\",{\"1\":{\"163\":1}}],[\"接口实现类\",{\"1\":{\"111\":1}}],[\"接口的处理器类加入到\",{\"1\":{\"219\":1}}],[\"接口的处理器类\",{\"1\":{\"141\":1}}],[\"接口的声明\",{\"1\":{\"116\":1}}],[\"接口是从\",{\"1\":{\"107\":1,\"245\":1}}],[\"接口\",{\"1\":{\"23\":1,\"114\":1,\"115\":1,\"376\":1}}],[\"精确到百万分之一度\",{\"1\":{\"133\":1}}],[\"乘以10的6次方\",{\"1\":{\"133\":1}}],[\"定义\",{\"1\":{\"361\":1,\"362\":1}}],[\"定义自己的注解\",{\"0\":{\"261\":1,\"266\":1}}],[\"定位数据批量上报\",{\"1\":{\"371\":1}}],[\"定位数据上报\",{\"1\":{\"371\":1}}],[\"定位\",{\"1\":{\"132\":1}}],[\"定制msgtypeparser\",{\"0\":{\"176\":1}}],[\"定制\",{\"0\":{\"164\":1,\"383\":1},\"1\":{\"68\":1,\"72\":1,\"182\":1}}],[\"定制化示例\",{\"1\":{\"1\":1}}],[\"西经\",{\"1\":{\"130\":1}}],[\"东经\",{\"1\":{\"130\":1}}],[\"关闭原因\",{\"1\":{\"392\":1}}],[\"关闭事件\",{\"1\":{\"392\":1}}],[\"关闭\",{\"1\":{\"180\":1,\"392\":1}}],[\"关\",{\"1\":{\"130\":1}}],[\"关于位置附加项的解析\",{\"0\":{\"136\":1}}],[\"关于经纬度的解析\",{\"0\":{\"133\":1}}],[\"关于status字段的解析\",{\"0\":{\"129\":1}}],[\"关于我们\",{\"0\":{\"3\":1}}],[\"代表正在迭代对象的上下文\",{\"1\":{\"327\":1}}],[\"代码段中的\",{\"1\":{\"130\":1}}],[\"代替\",{\"1\":{\"82\":1,\"176\":1}}],[\"代替了\",{\"1\":{\"23\":1}}],[\"速度\",{\"1\":{\"128\":1,\"316\":1}}],[\"高度\",{\"1\":{\"128\":1,\"316\":1}}],[\"8421\",{\"1\":{\"185\":1,\"186\":1}}],[\"8\",{\"1\":{\"128\":2,\"134\":1,\"135\":1,\"167\":1,\"185\":1,\"186\":1,\"251\":7,\"260\":1,\"263\":1,\"265\":2,\"268\":1,\"272\":1,\"316\":6,\"326\":1,\"331\":1,\"404\":2}}],[\"808数据类型处理器\",{\"0\":{\"415\":1}}],[\"808消息\",{\"1\":{\"371\":1}}],[\"808报文类型\",{\"1\":{\"150\":1}}],[\"808文档中的经纬度定义为\",{\"1\":{\"133\":1}}],[\"808文档中定义的位置上传报文有很多字段\",{\"1\":{\"126\":1,\"312\":1,\"315\":1}}],[\"808服务配置\",{\"0\":{\"35\":1}}],[\"808协议数据类型\",{\"0\":{\"185\":1}}],[\"808协议扫盲\",{\"1\":{\"182\":1}}],[\"808协议入门\",{\"1\":{\"68\":1}}],[\"808协议版本\",{\"1\":{\"38\":1}}],[\"808协议目前\",{\"1\":{\"25\":1}}],[\"808协议\",{\"1\":{\"20\":1,\"26\":1,\"182\":1,\"191\":1,\"312\":1,\"315\":1,\"361\":1,\"364\":1,\"367\":1,\"368\":1}}],[\"808的实现\",{\"1\":{\"1\":1}}],[\"808\",{\"0\":{\"9\":1,\"182\":1,\"425\":1,\"426\":1,\"428\":1},\"1\":{\"1\":9,\"27\":1,\"63\":1,\"79\":1,\"81\":1,\"86\":3,\"88\":2,\"92\":2,\"118\":1,\"126\":1,\"138\":1,\"139\":1,\"143\":1,\"144\":1,\"148\":1,\"162\":1,\"163\":1,\"165\":1,\"168\":1,\"173\":1,\"176\":1,\"177\":2,\"178\":1,\"180\":1,\"189\":1,\"191\":2,\"194\":1,\"225\":1,\"236\":2,\"341\":2,\"343\":1,\"344\":7,\"345\":1,\"347\":8,\"351\":3,\"352\":5,\"355\":4,\"356\":1,\"357\":4,\"358\":4,\"364\":1,\"367\":1,\"368\":1,\"369\":2,\"373\":1,\"388\":1,\"397\":7,\"399\":2,\"400\":2,\"416\":1,\"419\":1}}],[\"纬度\",{\"1\":{\"128\":2,\"134\":1,\"135\":1,\"251\":2,\"260\":1,\"263\":1,\"316\":1}}],[\"南纬\",{\"1\":{\"128\":1,\"131\":1,\"316\":1,\"331\":1}}],[\"北纬\",{\"1\":{\"128\":1,\"131\":1,\"316\":1,\"331\":1}}],[\"状态\",{\"1\":{\"128\":1,\"132\":1,\"316\":1,\"331\":1}}],[\"报警标志\",{\"1\":{\"128\":1,\"316\":1}}],[\"报文为例\",{\"1\":{\"251\":1}}],[\"报文构建器\",{\"0\":{\"165\":1,\"422\":1}}],[\"报文加密解密\",{\"0\":{\"22\":1}}],[\"报文解析相关\",{\"0\":{\"19\":1},\"1\":{\"18\":1}}],[\"报文\",{\"1\":{\"14\":1,\"372\":1}}],[\"如何创建实例\",{\"0\":{\"408\":1,\"412\":1}}],[\"如何以\",{\"1\":{\"127\":1}}],[\"如有必要\",{\"1\":{\"223\":1}}],[\"如下\",{\"1\":{\"204\":1}}],[\"如果是分包请求\",{\"1\":{\"387\":1}}],[\"如果默认的\",{\"1\":{\"381\":1}}],[\"如果内置的实现不符合要求\",{\"1\":{\"381\":1,\"382\":1}}],[\"如果内置的转义逻辑不符合要求\",{\"1\":{\"163\":1}}],[\"如果没有特殊需求\",{\"1\":{\"344\":1,\"345\":1}}],[\"如果终端没有收到某些子包\",{\"1\":{\"240\":1}}],[\"如果响应消息的大小\",{\"1\":{\"237\":1}}],[\"如果配置了\",{\"1\":{\"224\":3}}],[\"如果有多个拦截器\",{\"1\":{\"200\":1}}],[\"如果有嵌套的附加项\",{\"1\":{\"138\":1}}],[\"如果处理逻辑太复杂\",{\"1\":{\"115\":1}}],[\"如果你是将本项目发布的\",{\"1\":{\"353\":1}}],[\"如果你直接在\",{\"1\":{\"353\":1}}],[\"如果你在这里注册了自定义的鉴权消息处理器\",{\"1\":{\"172\":1}}],[\"如果你覆盖了\",{\"1\":{\"162\":1}}],[\"如果你要体验最新版\",{\"1\":{\"341\":1}}],[\"如果你要开启这个配置\",{\"1\":{\"79\":1}}],[\"如果你要使用\",{\"1\":{\"78\":1}}],[\"如果你的项目不需要\",{\"1\":{\"44\":1,\"101\":1}}],[\"如果消息体属性中相关标识位确定消息分包处理\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"只不过\",{\"1\":{\"406\":1}}],[\"只需声明一个\",{\"1\":{\"385\":1,\"393\":1}}],[\"只需要声明一个\",{\"1\":{\"380\":1}}],[\"只需自己声明一个\",{\"1\":{\"179\":1,\"391\":1}}],[\"只有一个为\",{\"1\":{\"351\":1}}],[\"只有\",{\"1\":{\"344\":1}}],[\"只有在成功后才有该字段\",{\"1\":{\"231\":1,\"234\":1,\"339\":1,\"421\":1}}],[\"只比较大小\",{\"1\":{\"326\":1,\"337\":1}}],[\"只能转为\",{\"1\":{\"265\":1}}],[\"只能写成\",{\"1\":{\"260\":1}}],[\"只能标记于字段上\",{\"1\":{\"151\":1}}],[\"只能标注于\",{\"1\":{\"140\":1,\"141\":1}}],[\"只是个辅助类\",{\"1\":{\"417\":1,\"420\":1}}],[\"只是个快捷方式或者扩展\",{\"1\":{\"256\":1}}],[\"只是演示可以这么使用\",{\"1\":{\"132\":1}}],[\"只是原始808的一个子集\",{\"1\":{\"126\":1,\"312\":1,\"315\":1}}],[\"只修改严重\",{\"1\":{\"67\":3,\"71\":1}}],[\"展示如何基于注解来解析报文\",{\"1\":{\"126\":1,\"312\":1,\"315\":1}}],[\"下一个流水号\",{\"1\":{\"393\":1}}],[\"下面依次从\",{\"1\":{\"417\":1}}],[\"下面两行代码给原始bytebuf中加入一些测试数据\",{\"1\":{\"417\":1}}],[\"下面示例中的\",{\"1\":{\"411\":1}}],[\"下面简单演示\",{\"1\":{\"411\":1}}],[\"下面以\",{\"1\":{\"371\":1}}],[\"下面以终端注册消息\",{\"1\":{\"225\":1}}],[\"下面代码中的\",{\"1\":{\"362\":1}}],[\"下面就以位置上报报文中的经纬度字段和时间字段为例\",{\"1\":{\"258\":1}}],[\"下面是\",{\"1\":{\"412\":1}}],[\"下面是使用注解别名实现的同样效果的实体类映射\",{\"1\":{\"251\":1}}],[\"下面是回复客户端的部分伪代码\",{\"1\":{\"231\":1}}],[\"下面是被\",{\"1\":{\"231\":1}}],[\"下面的\",{\"1\":{\"210\":1}}],[\"下发消息\",{\"1\":{\"148\":2,\"196\":1,\"197\":1}}],[\"下找到对应代码\",{\"1\":{\"126\":1,\"138\":1,\"139\":1,\"143\":1,\"144\":1,\"148\":1,\"162\":1,\"168\":1,\"189\":1,\"194\":1,\"364\":1,\"373\":1}}],[\"下载地址\",{\"1\":{\"16\":1}}],[\"对象编码为\",{\"1\":{\"382\":1}}],[\"对象\",{\"1\":{\"381\":1,\"387\":1}}],[\"对\",{\"1\":{\"371\":1}}],[\"对响应给客户端的消息类型没有强制指定固定类型\",{\"1\":{\"228\":1}}],[\"对808消息的处理流程已经搭建完毕\",{\"1\":{\"193\":1}}],[\"对于这种情况\",{\"1\":{\"411\":1}}],[\"对于这种直接返回\",{\"1\":{\"156\":1}}],[\"对于请求消息的处理完全是由\",{\"1\":{\"169\":1}}],[\"对于\",{\"1\":{\"125\":1}}],[\"对应上面描述的处理流程\",{\"1\":{\"387\":1}}],[\"对应的平台消息的\",{\"1\":{\"423\":1,\"424\":1}}],[\"对应的平台消息的流水号\",{\"1\":{\"423\":1,\"424\":1}}],[\"对应的\",{\"1\":{\"344\":1,\"357\":3,\"358\":3}}],[\"对应的终端注册消息的流水号\",{\"1\":{\"231\":1,\"234\":1,\"339\":1,\"421\":1}}],[\"对应java数据类型\",{\"0\":{\"186\":1}}],[\"对应到java中为\",{\"1\":{\"129\":1}}],[\"对应\",{\"1\":{\"39\":1,\"92\":2,\"95\":1}}],[\"字\",{\"1\":{\"185\":1,\"186\":1}}],[\"字节流\",{\"1\":{\"381\":1}}],[\"字节的\",{\"1\":{\"260\":1}}],[\"字节\",{\"1\":{\"185\":3,\"186\":2,\"236\":1,\"237\":1}}],[\"字节顺序\",{\"1\":{\"161\":1}}],[\"字节数\",{\"1\":{\"151\":1,\"154\":1,\"186\":1,\"327\":1}}],[\"字节数组到消息实体类的映射\",{\"1\":{\"125\":1}}],[\"字段解析顺序\",{\"1\":{\"326\":1}}],[\"字段的第2位取出转为\",{\"1\":{\"128\":1,\"131\":1,\"316\":1,\"331\":1}}],[\"字段的第0位取出转为\",{\"1\":{\"128\":2,\"131\":2,\"316\":2,\"331\":2}}],[\"字段长度等的计算可能会依赖于消息头中的一些属性\",{\"1\":{\"108\":1,\"246\":1}}],[\"具体流程可以结合\",{\"1\":{\"220\":1}}],[\"具体的处理器是该类中的部分方法\",{\"1\":{\"216\":1}}],[\"具体鉴权逻辑\",{\"1\":{\"171\":1}}],[\"具体配置请移步\",{\"1\":{\"122\":1}}],[\"具体分包信息由消息包封装项决定\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"次之\",{\"1\":{\"116\":1}}],[\"数字小的覆盖数字大的\",{\"1\":{\"116\":1}}],[\"数字越小优先级越高\",{\"1\":{\"116\":1}}],[\"数据项个数\",{\"1\":{\"313\":1}}],[\"数据转换方式要更简单一些\",{\"1\":{\"272\":1}}],[\"数据库中无该终端\",{\"1\":{\"231\":1,\"234\":1,\"339\":1,\"421\":1}}],[\"数据库中无该车辆\",{\"1\":{\"231\":1,\"234\":1,\"339\":1,\"421\":1}}],[\"数据加密方式\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"数据类型\",{\"0\":{\"184\":1},\"1\":{\"151\":1,\"161\":1,\"185\":1,\"326\":1,\"337\":1,\"416\":1,\"419\":1}}],[\"数据类型转换\",{\"0\":{\"270\":1,\"291\":1},\"1\":{\"27\":2,\"271\":1,\"272\":1}}],[\"数据类型的映射关系\",{\"1\":{\"27\":1}}],[\"问题\",{\"1\":{\"115\":1}}],[\"相对应\",{\"1\":{\"376\":1}}],[\"相同\",{\"1\":{\"326\":4}}],[\"相同功能的组件只会\",{\"1\":{\"116\":1}}],[\"相同功能的组件只会按照优先级注册其仅注册一个\",{\"1\":{\"115\":1}}],[\"相比于上一个章节\",{\"1\":{\"272\":1}}],[\"相比于\",{\"1\":{\"251\":1}}],[\"相当于\",{\"1\":{\"251\":1}}],[\"相互覆盖\",{\"1\":{\"115\":1}}],[\"相关配置\",{\"1\":{\"385\":1}}],[\"相关信息\",{\"1\":{\"344\":1,\"345\":1}}],[\"相关知识\",{\"0\":{\"271\":1}}],[\"相关的接入步骤\",{\"1\":{\"182\":1}}],[\"相关的配置\",{\"1\":{\"58\":1,\"76\":1,\"93\":1,\"96\":1,\"102\":1}}],[\"相关资料\",{\"0\":{\"9\":1,\"10\":1}}],[\"按需求引入需要的\",{\"1\":{\"357\":1,\"358\":1}}],[\"按文档格式组装字节数组\",{\"1\":{\"171\":1}}],[\"按照优先级注册其仅注册一个\",{\"1\":{\"116\":1}}],[\"按优先级找一个组件来处理\",{\"1\":{\"115\":1}}],[\"按发送顺序从\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"否则\",{\"1\":{\"387\":1}}],[\"否则直接抛到下游\",{\"1\":{\"115\":1}}],[\"否则无该项\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\">注意<\",{\"1\":{\"384\":1}}],[\">=17\",{\"1\":{\"397\":1}}],[\">=\",{\"1\":{\"344\":1,\"348\":1,\"349\":1,\"353\":3,\"393\":1,\"397\":3}}],[\">>>>>>>>>>>>>>>\",{\"1\":{\"225\":9}}],[\">>\",{\"1\":{\"186\":2,\"253\":2}}],[\">acc开关\",{\"1\":{\"130\":1}}],[\">\",{\"1\":{\"115\":1,\"116\":1,\"130\":2,\"131\":1,\"148\":1,\"162\":1,\"165\":6,\"176\":1,\"196\":1,\"225\":1,\"234\":1,\"243\":1,\"262\":1,\"267\":1,\"347\":7,\"357\":6,\"358\":6,\"362\":2,\"399\":2,\"400\":2,\"408\":1,\"412\":2,\"417\":2,\"418\":7,\"421\":1,\"423\":1,\"424\":2}}],[\"自带的\",{\"1\":{\"357\":2,\"358\":2}}],[\"自动释放掉\",{\"1\":{\"412\":3}}],[\"自动化的\",{\"1\":{\"226\":1}}],[\"自动配置\",{\"1\":{\"1\":2}}],[\"自定义反序列化器\",{\"1\":{\"337\":1}}],[\"自定义注解\",{\"0\":{\"257\":1}}],[\"自定义解析器无法解析\",{\"1\":{\"176\":1}}],[\"自定义的转换器\",{\"1\":{\"262\":1,\"267\":1}}],[\"自定义的消息处理器\",{\"1\":{\"169\":1}}],[\"自定义的消息体解析器\",{\"1\":{\"167\":1}}],[\"自定义的类型转换器\",{\"1\":{\"151\":1,\"326\":1}}],[\"自定义转换器\",{\"1\":{\"135\":1}}],[\"自定义并注册了\",{\"1\":{\"115\":1}}],[\"假如\",{\"1\":{\"115\":1}}],[\"为主\",{\"1\":{\"351\":1}}],[\"为\",{\"1\":{\"251\":4,\"341\":1,\"348\":1,\"349\":1,\"351\":2,\"353\":1,\"397\":2}}],[\"为什么编译源码一定要\",{\"0\":{\"343\":1},\"1\":{\"343\":1}}],[\"为什么要引入别名机制\",{\"0\":{\"251\":1}}],[\"为什么会提供\",{\"0\":{\"108\":1,\"246\":1}}],[\"为了编码简单\",{\"1\":{\"218\":1}}],[\"为零表示使用外部指定的长度\",{\"1\":{\"186\":1}}],[\"为例进行测试\",{\"1\":{\"371\":1}}],[\"为例来观察一下分包的过程\",{\"1\":{\"225\":1}}],[\"为例\",{\"1\":{\"115\":1,\"403\":1}}],[\"引入的别名\",{\"1\":{\"411\":1}}],[\"引入\",{\"1\":{\"341\":2}}],[\"引入为\",{\"1\":{\"191\":1}}],[\"引入了\",{\"1\":{\"79\":1}}],[\"引出的问题\",{\"0\":{\"115\":1}}],[\"手动构建一个\",{\"1\":{\"408\":5,\"412\":5}}],[\"手动编码消息时可能为空\",{\"1\":{\"338\":1}}],[\"手动编码后通过\",{\"1\":{\"196\":1}}],[\"手动实例化\",{\"1\":{\"262\":1,\"267\":1}}],[\"手动实现的\",{\"1\":{\"157\":1}}],[\"手动实现并注册的\",{\"1\":{\"116\":1}}],[\"手动实现并注册\",{\"0\":{\"167\":1,\"170\":1},\"1\":{\"113\":1,\"114\":1}}],[\"手动创建一个新的jt808response返回\",{\"1\":{\"234\":1}}],[\"手动将自定义处理器注册到\",{\"1\":{\"167\":1}}],[\"手动发送的数据\",{\"1\":{\"145\":1}}],[\"手动下发\",{\"0\":{\"145\":1,\"196\":1}}],[\"手动解析\",{\"0\":{\"130\":1}}],[\"手动注册\",{\"1\":{\"122\":1}}],[\"手机号不足12\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"都封装在了一个叫\",{\"1\":{\"378\":1}}],[\"都重写了\",{\"1\":{\"374\":1}}],[\"都是选择性的实现\",{\"1\":{\"361\":1}}],[\"都是\",{\"1\":{\"356\":1}}],[\"都是基于\",{\"1\":{\"155\":1}}],[\"都请记得以\",{\"1\":{\"194\":3,\"372\":1}}],[\"都实现了该接口\",{\"1\":{\"111\":1}}],[\"都叫\",{\"1\":{\"25\":1}}],[\"完全可以使用\",{\"1\":{\"111\":1}}],[\"当前终端对应的\",{\"1\":{\"387\":1}}],[\"当前终端的协议版本号\",{\"1\":{\"377\":1}}],[\"当前流水号\",{\"1\":{\"377\":1,\"393\":2}}],[\"当前请求上下文\",{\"1\":{\"199\":3,\"384\":1}}],[\"当服务端将消息分包发送给终端时\",{\"1\":{\"240\":1}}],[\"当\",{\"1\":{\"224\":2}}],[\"当然\",{\"1\":{\"167\":1,\"169\":1,\"402\":1}}],[\"当然如果是自定义的\",{\"1\":{\"111\":1}}],[\"当length无法直接指定时可根据该属性定义的方法名返回字节数\",{\"1\":{\"151\":1,\"154\":1}}],[\"当startindex无法直接指定时可根据该属性定义的方法名返回字节数\",{\"1\":{\"151\":1}}],[\"当且仅当计算结果为\",{\"1\":{\"337\":1}}],[\"当且仅当\",{\"1\":{\"104\":1,\"105\":2,\"162\":1}}],[\"实体类中只能使用\",{\"1\":{\"411\":1}}],[\"实体类映射关系如下\",{\"1\":{\"313\":1,\"316\":1}}],[\"实体类映射示例\",{\"1\":{\"27\":2,\"318\":2}}],[\"实际上\",{\"1\":{\"351\":1}}],[\"实际上这里演示的这个注解已经在\",{\"1\":{\"263\":1,\"268\":1}}],[\"实际上是借助于\",{\"1\":{\"255\":1}}],[\"实现并加入到\",{\"1\":{\"362\":1}}],[\"实现接口\",{\"1\":{\"200\":1}}],[\"实现\",{\"0\":{\"171\":1},\"1\":{\"167\":1,\"169\":1,\"361\":1,\"381\":1}}],[\"实现的\",{\"1\":{\"157\":1}}],[\"实现原理\",{\"0\":{\"147\":1}}],[\"实现类用来构建报文\",{\"1\":{\"422\":1}}],[\"实现类依赖于\",{\"1\":{\"251\":1}}],[\"实现类应该自行回收掉\",{\"1\":{\"223\":1}}],[\"实现类应该负责将消息合并\",{\"1\":{\"223\":1}}],[\"实现类至少应该实现下面几个功能\",{\"1\":{\"223\":1}}],[\"实现类至少有以下几个\",{\"1\":{\"116\":1}}],[\"实现类多了有点头大\",{\"1\":{\"115\":1}}],[\"实现也有点麻烦\",{\"1\":{\"115\":1}}],[\"实例的执行顺序和\",{\"1\":{\"384\":1}}],[\"实例\",{\"1\":{\"109\":1,\"110\":1,\"111\":1,\"247\":1,\"248\":1,\"327\":3,\"338\":3,\"361\":1,\"381\":2,\"387\":1}}],[\"时回调\",{\"1\":{\"392\":1}}],[\"时才会序列化\",{\"1\":{\"337\":1}}],[\"时才有效\",{\"1\":{\"162\":1}}],[\"时\",{\"1\":{\"241\":1,\"251\":1}}],[\"时可以通过这个方法获取之前发送过的子包\",{\"1\":{\"241\":1}}],[\"时启用\",{\"1\":{\"224\":2,\"242\":3}}],[\"时间格式的\",{\"1\":{\"272\":1}}],[\"时间\",{\"1\":{\"128\":1,\"251\":2,\"265\":1,\"268\":1,\"272\":1,\"316\":1}}],[\"时序图\",{\"0\":{\"119\":1}}],[\"时用于\",{\"1\":{\"108\":1,\"246\":1}}],[\"时生效\",{\"1\":{\"104\":1,\"105\":2}}],[\"等类型\",{\"1\":{\"411\":1}}],[\"等价于\",{\"1\":{\"327\":2,\"338\":2}}],[\"等注解功能类似\",{\"1\":{\"321\":1}}],[\"等注解同时出现\",{\"1\":{\"320\":1}}],[\"等所有子包都到达后会自动合并消息\",{\"1\":{\"222\":1}}],[\"等接口并\",{\"1\":{\"122\":1}}],[\"等就几乎没必要看本小节了\",{\"1\":{\"107\":1,\"245\":1}}],[\"等组件\",{\"1\":{\"65\":1}}],[\"抄袭\",{\"1\":{\"107\":1,\"199\":1,\"203\":1,\"215\":1,\"218\":1,\"230\":1,\"245\":1,\"384\":1}}],[\"首先声明这种\",{\"1\":{\"107\":1}}],[\"响应给客户端的消息\",{\"1\":{\"380\":1}}],[\"响应体\",{\"1\":{\"333\":1}}],[\"响应分包消息暂存器相关配置\",{\"1\":{\"105\":1}}],[\"响应消息实体类中出现的\",{\"1\":{\"413\":1}}],[\"响应消息最大字节数\",{\"1\":{\"237\":1}}],[\"响应消息大小超过该值\",{\"1\":{\"237\":1}}],[\"响应消息分包时会回调\",{\"1\":{\"241\":1}}],[\"响应消息分包\",{\"0\":{\"235\":1},\"1\":{\"72\":1}}],[\"响应消息处理器\",{\"0\":{\"227\":1},\"1\":{\"72\":1}}],[\"响应消息映射\",{\"0\":{\"155\":1,\"332\":1},\"1\":{\"68\":1,\"72\":1,\"125\":1}}],[\"响应消息\",{\"1\":{\"27\":1,\"318\":1,\"380\":2,\"382\":1}}],[\"最长暂存多久由具体实现类自行决定<\",{\"1\":{\"223\":1}}],[\"最直观的处理方式就是类似于\",{\"1\":{\"218\":1}}],[\"最少配置\",{\"1\":{\"189\":1,\"364\":1}}],[\"最大缓存时间\",{\"1\":{\"104\":1,\"105\":2}}],[\"最多缓存多少条消息\",{\"1\":{\"104\":1,\"105\":1}}],[\"||\",{\"1\":{\"104\":1,\"105\":2,\"262\":2}}],[\"详情看下面\",{\"1\":{\"410\":1}}],[\"详情\",{\"1\":{\"347\":1}}],[\"详情见\",{\"1\":{\"101\":1,\"411\":1}}],[\"详情请参考这位兄台的文章\",{\"1\":{\"14\":1}}],[\"onsessionclose\",{\"1\":{\"392\":1}}],[\"onsessionremove\",{\"1\":{\"392\":1}}],[\"onsessionadd\",{\"1\":{\"180\":1,\"392\":1}}],[\"operator1\",{\"1\":{\"404\":2}}],[\"operator\",{\"1\":{\"404\":5}}],[\"ops\",{\"1\":{\"224\":1,\"242\":1}}],[\"optional<msgtype>\",{\"1\":{\"175\":1,\"176\":2,\"361\":2,\"362\":1}}],[\"optional<respmsgbody>\",{\"1\":{\"171\":2}}],[\"optional<locationuploadmsgbody>\",{\"1\":{\"167\":1}}],[\"optional<jt808session>\",{\"1\":{\"145\":1}}],[\"optional\",{\"1\":{\"157\":1,\"167\":1,\"171\":1,\"175\":1,\"176\":1,\"361\":1}}],[\"ol>\",{\"1\":{\"199\":3,\"223\":1,\"387\":1}}],[\"out\",{\"1\":{\"165\":3}}],[\"originalbuf\",{\"1\":{\"424\":6}}],[\"originalbytebuf\",{\"1\":{\"417\":10,\"420\":7}}],[\"originalchecksum\",{\"1\":{\"211\":1,\"375\":1}}],[\"or\",{\"1\":{\"362\":1}}],[\"orelsethrow\",{\"1\":{\"196\":1,\"197\":1,\"243\":1}}],[\"org\",{\"1\":{\"165\":1,\"211\":1,\"218\":1,\"378\":1,\"384\":5}}],[\"ordered\",{\"1\":{\"384\":3}}],[\"orderedcomponent\",{\"0\":{\"116\":1},\"1\":{\"115\":1,\"116\":4,\"169\":1,\"199\":1,\"387\":1,\"391\":1,\"392\":1}}],[\"order\",{\"1\":{\"116\":4,\"137\":2,\"148\":5,\"159\":3,\"161\":1,\"210\":1,\"231\":3,\"251\":8,\"252\":9,\"253\":6,\"260\":2,\"261\":3,\"263\":2,\"265\":1,\"266\":3,\"268\":1,\"272\":6,\"313\":11,\"316\":27,\"326\":1,\"328\":7,\"331\":1,\"335\":1,\"337\":1,\"339\":3,\"384\":3,\"407\":5,\"411\":5,\"423\":3}}],[\"ofbytes\",{\"1\":{\"408\":1,\"412\":1}}],[\"ofbyte\",{\"1\":{\"408\":1,\"412\":1}}],[\"ofword\",{\"1\":{\"408\":1,\"412\":1}}],[\"ofstring\",{\"1\":{\"408\":1,\"412\":1}}],[\"ofdword\",{\"1\":{\"408\":1,\"412\":1}}],[\"ofpattern\",{\"1\":{\"267\":1}}],[\"ofnullable\",{\"1\":{\"175\":1,\"361\":1}}],[\"of\",{\"1\":{\"148\":2,\"156\":2,\"167\":1,\"171\":4,\"197\":3,\"219\":1,\"234\":1,\"408\":1,\"412\":1,\"417\":1,\"420\":1}}],[\"objectprovider<jt808sessionmanagereventlistener>\",{\"1\":{\"391\":1}}],[\"object\",{\"1\":{\"148\":2,\"197\":2,\"199\":3,\"203\":1,\"210\":1,\"262\":1,\"267\":1,\"313\":2,\"387\":2,\"391\":1}}],[\"override\",{\"1\":{\"135\":1,\"156\":2,\"162\":1,\"163\":3,\"167\":2,\"171\":5,\"172\":1,\"175\":1,\"176\":1,\"177\":1,\"179\":1,\"180\":2,\"181\":3,\"219\":3,\"234\":3,\"262\":1,\"267\":1,\"361\":3,\"388\":1,\"391\":1,\"421\":1}}],[\"overview\",{\"0\":{\"73\":1}}],[\"other\",{\"1\":{\"116\":2}}],[\"others\",{\"0\":{\"87\":1}}],[\"线程池的线程名前缀\",{\"1\":{\"86\":1}}],[\"线程池中线程的命名格式\",{\"1\":{\"63\":1}}],[\"之外\",{\"1\":{\"407\":1,\"411\":1}}],[\"之后已经处理器方法出现异常时回调对应方法\",{\"1\":{\"199\":1}}],[\"之后覆盖内置的处理逻辑即可\",{\"1\":{\"163\":1}}],[\"之后版本默认配置如下\",{\"1\":{\"101\":1}}],[\"之后\",{\"1\":{\"84\":1,\"86\":1,\"130\":1}}],[\"之前的版本中\",{\"1\":{\"411\":1}}],[\"之前\",{\"1\":{\"84\":1,\"86\":1}}],[\"之间新增了协议版本号属性\",{\"1\":{\"25\":1}}],[\"存在跨线程资源回收问题\",{\"1\":{\"82\":1}}],[\"系列配置在\",{\"1\":{\"82\":1}}],[\"参数项的值的类型不是固定的\",{\"1\":{\"411\":1}}],[\"参数项的值为例\",{\"1\":{\"407\":1}}],[\"参数解析器\",{\"1\":{\"204\":1}}],[\"参数中拿到\",{\"1\":{\"169\":1}}],[\"参数自动注入\",{\"0\":{\"142\":1}}],[\"参考下面的\",{\"1\":{\"361\":1,\"362\":1}}],[\"参考下面两个章节\",{\"1\":{\"27\":1}}],[\"参考stackoverflow\",{\"1\":{\"251\":1}}],[\"参考这里\",{\"1\":{\"167\":1,\"169\":1}}],[\"参见\",{\"1\":{\"80\":1}}],[\"依赖改为\",{\"1\":{\"399\":1,\"400\":1}}],[\"依赖升级\",{\"0\":{\"398\":1}}],[\"依赖为准\",{\"1\":{\"356\":1}}],[\"依赖的\",{\"1\":{\"356\":1}}],[\"依赖到你的项目里\",{\"1\":{\"353\":1}}],[\"依赖\",{\"1\":{\"79\":1}}],[\"批量位置上传报文解析示例\",{\"0\":{\"312\":1},\"1\":{\"72\":1}}],[\"基于\",{\"1\":{\"113\":1,\"114\":1,\"157\":1,\"224\":1,\"242\":2,\"353\":2}}],[\"基于注解来实现msghandler的功能\",{\"1\":{\"173\":1}}],[\"基于注解来实现\",{\"1\":{\"168\":1}}],[\"基于注解实现\",{\"0\":{\"168\":1,\"173\":1}}],[\"基于注解实现的\",{\"1\":{\"116\":1}}],[\"基于注解\",{\"1\":{\"167\":1,\"169\":1}}],[\"基于注解处理请求消息映射\",{\"1\":{\"108\":1,\"246\":1}}],[\"基于注解的响应消息映射\",{\"1\":{\"155\":1}}],[\"基于注解的消息处理器\",{\"1\":{\"155\":2}}],[\"基于注解的\",{\"1\":{\"52\":1,\"56\":1,\"122\":1}}],[\"基础\",{\"0\":{\"201\":1},\"1\":{\"72\":1}}],[\"基本术语\",{\"0\":{\"374\":1},\"1\":{\"72\":1}}],[\"入门\",{\"0\":{\"359\":1},\"1\":{\"72\":1}}],[\"深入\",{\"0\":{\"106\":1,\"249\":1},\"1\":{\"68\":1,\"72\":1}}],[\"异常处理\",{\"0\":{\"122\":1,\"310\":1},\"1\":{\"68\":1,\"72\":1,\"125\":1}}],[\"异常信息最好有完整的堆栈记录\",{\"1\":{\"4\":1}}],[\"内部结构也是一致的\",{\"1\":{\"136\":1}}],[\"内部已经\",{\"1\":{\"125\":1}}],[\"内容如下\",{\"1\":{\"68\":1}}],[\"内置实现返回的\",{\"1\":{\"381\":1}}],[\"内置版本\",{\"0\":{\"356\":1}}],[\"内置分包暂存器\",{\"0\":{\"224\":1,\"242\":1}}],[\"内置处理器有两种\",{\"1\":{\"199\":3}}],[\"内置组件的优先级最低\",{\"1\":{\"116\":1}}],[\"内置了两种\",{\"1\":{\"422\":1}}],[\"内置了两个\",{\"1\":{\"213\":1,\"228\":1}}],[\"内置了三个实现类\",{\"1\":{\"242\":1}}],[\"内置了\",{\"1\":{\"113\":1,\"114\":1}}],[\"内置消息处理器都在\",{\"1\":{\"91\":1}}],[\"内置消息说明\",{\"0\":{\"318\":1},\"1\":{\"27\":1,\"318\":1}}],[\"内置的支持\",{\"1\":{\"416\":1,\"419\":1}}],[\"内置的支持自动分包的返回类型有两种\",{\"1\":{\"236\":1}}],[\"内置的给\",{\"1\":{\"269\":1}}],[\"内置的分包请求暂存器目前就只有一种基于\",{\"1\":{\"226\":1}}],[\"内置的几种\",{\"1\":{\"204\":1}}],[\"内置的鉴权消息处理器打印出的日志\",{\"1\":{\"194\":1}}],[\"内置的异常处理器位于\",{\"1\":{\"124\":1}}],[\"内置的处理器仅仅是示例性的\",{\"1\":{\"91\":1}}],[\"内置的\",{\"1\":{\"47\":1,\"111\":1,\"116\":1}}],[\"注册到\",{\"1\":{\"262\":1,\"267\":1}}],[\"注册自定义msghandler\",{\"0\":{\"172\":1}}],[\"注册自定义\",{\"1\":{\"167\":1}}],[\"注意事项\",{\"0\":{\"413\":1}}],[\"注意和\",{\"1\":{\"357\":3,\"358\":3}}],[\"注意区分\",{\"1\":{\"355\":1}}],[\"注意\",{\"0\":{\"67\":1},\"1\":{\"71\":1,\"79\":1,\"91\":1,\"108\":1,\"125\":1,\"126\":1,\"127\":1,\"150\":1,\"152\":1,\"153\":1,\"162\":1,\"176\":1,\"194\":3,\"246\":1,\"344\":1,\"346\":1,\"348\":1,\"349\":1,\"362\":1,\"372\":1,\"392\":3}}],[\"注解是\",{\"1\":{\"411\":1}}],[\"注解标记的处理器方法\",{\"1\":{\"387\":1}}],[\"注解标记了\",{\"1\":{\"210\":1}}],[\"注解一样\",{\"1\":{\"324\":1}}],[\"注解功能类似\",{\"1\":{\"324\":1}}],[\"注解的作用类似于\",{\"1\":{\"320\":1}}],[\"注解的方法支持参数自动注入\",{\"1\":{\"142\":1}}],[\"注解提供了快捷方式\",{\"1\":{\"251\":2}}],[\"注解提供了别名\",{\"1\":{\"251\":2}}],[\"注解中包含了这么多属性\",{\"1\":{\"251\":1}}],[\"注解也有个\",{\"1\":{\"238\":1}}],[\"注解修饰的返回类型\",{\"1\":{\"228\":1}}],[\"注解修饰的\",{\"1\":{\"213\":1}}],[\"注解即可\",{\"1\":{\"143\":1}}],[\"注解来映射为一个可嵌套的实体\",{\"1\":{\"136\":1}}],[\"注解\",{\"1\":{\"123\":1,\"124\":1,\"150\":1,\"230\":1,\"272\":1,\"274\":1,\"275\":1,\"277\":1,\"278\":1,\"280\":1,\"281\":1,\"283\":1,\"284\":1,\"286\":1,\"287\":1,\"289\":1,\"290\":1,\"293\":1,\"294\":1,\"296\":1,\"297\":1,\"299\":1,\"300\":1,\"302\":1,\"303\":1,\"305\":1,\"306\":1,\"308\":1,\"309\":1}}],[\"注解方式处理\",{\"1\":{\"113\":1,\"114\":1}}],[\"注解驱动开发\",{\"0\":{\"125\":1,\"311\":1},\"1\":{\"68\":1,\"72\":1,\"112\":1,\"411\":1}}],[\"注解别名就是对\",{\"1\":{\"255\":1}}],[\"注解别名和原来的\",{\"1\":{\"255\":1}}],[\"注解别名是\",{\"1\":{\"250\":1}}],[\"注解别名\",{\"0\":{\"250\":1,\"270\":1},\"1\":{\"27\":1,\"271\":1,\"272\":1,\"411\":1}}],[\"注解属性支持\",{\"1\":{\"23\":1}}],[\"注解相关的示例\",{\"1\":{\"1\":1}}],[\"类来表示\",{\"1\":{\"377\":1}}],[\"类级别\",{\"1\":{\"213\":1,\"228\":1}}],[\"类似\",{\"1\":{\"211\":1}}],[\"类似于\",{\"1\":{\"142\":1,\"150\":1,\"411\":1}}],[\"类似于下图所示\",{\"1\":{\"65\":1,\"90\":1}}],[\"类\",{\"1\":{\"140\":1}}],[\"类比于hibernate\",{\"1\":{\"151\":1}}],[\"类比于\",{\"1\":{\"123\":1,\"124\":1}}],[\"类型固定长度就是2字节\",{\"1\":{\"328\":1}}],[\"类型参数\",{\"1\":{\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1}}],[\"类型的实例\",{\"1\":{\"408\":5,\"412\":5}}],[\"类型的响应数据\",{\"1\":{\"228\":1}}],[\"类型的\",{\"1\":{\"213\":1,\"228\":1,\"380\":1,\"382\":1,\"385\":1,\"391\":1,\"392\":1,\"393\":1}}],[\"类型的bean即可\",{\"1\":{\"179\":1}}],[\"类型的字段\",{\"1\":{\"152\":1,\"153\":1,\"329\":1}}],[\"类型不固定\",{\"1\":{\"136\":1,\"137\":1}}],[\"类型为\",{\"1\":{\"129\":1}}],[\"类型\",{\"1\":{\"38\":1,\"41\":1,\"42\":1,\"43\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1,\"57\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"65\":1,\"84\":1,\"85\":1,\"86\":1,\"90\":1,\"91\":1,\"98\":1,\"99\":1,\"100\":1,\"128\":3,\"131\":3,\"133\":1,\"203\":1,\"316\":3,\"329\":1,\"331\":3}}],[\"类型映射\",{\"0\":{\"27\":1},\"1\":{\"26\":1}}],[\"question\",{\"1\":{\"255\":1,\"256\":1}}],[\"queue\",{\"0\":{\"62\":1}}],[\"quick\",{\"1\":{\"162\":1}}],[\"qq交流群\",{\"1\":{\"4\":1}}],[\"同时支持\",{\"1\":{\"397\":1}}],[\"同时尽量兼容\",{\"1\":{\"351\":1}}],[\"同时提供了\",{\"1\":{\"272\":1}}],[\"同时又能方便地扩展自定义注解\",{\"1\":{\"251\":1}}],[\"同时还有自定义的消息类型\",{\"1\":{\"174\":1,\"361\":1}}],[\"同时扫描了\",{\"1\":{\"115\":1}}],[\"同时其实现类\",{\"1\":{\"101\":1}}],[\"同\",{\"1\":{\"60\":1,\"61\":1,\"327\":1}}],[\"即便是和内置的重复了也会使用你自定义的\",{\"1\":{\"361\":1}}],[\"即便是无法处理的消息也不要返回\",{\"1\":{\"176\":1}}],[\"即为真实的经纬度\",{\"1\":{\"134\":1}}],[\"即\",{\"1\":{\"59\":1}}],[\"即可\",{\"1\":{\"44\":1,\"101\":1,\"135\":1,\"341\":1,\"353\":1,\"380\":1,\"385\":1,\"391\":1,\"392\":1,\"393\":1}}],[\"+\",{\"1\":{\"59\":1,\"145\":1,\"196\":1,\"225\":9,\"239\":6,\"262\":3,\"267\":3,\"326\":2,\"394\":1,\"408\":1,\"412\":1}}],[\"几个关键接口如下\",{\"1\":{\"374\":1}}],[\"几个关键参数的配置\",{\"1\":{\"58\":1}}],[\"几乎所有的自定义的配置都需要继承配置类\",{\"1\":{\"164\":1}}],[\"几乎零配置的示例\",{\"1\":{\"1\":2}}],[\"其中的报警标志字段中\",{\"1\":{\"403\":1}}],[\"其余模块编译后的\",{\"1\":{\"344\":1}}],[\"其他位没变\",{\"1\":{\"404\":1}}],[\"其他模块依赖的\",{\"1\":{\"356\":1}}],[\"其他模块虽然也用了\",{\"1\":{\"343\":1}}],[\"其他说明\",{\"0\":{\"269\":1}}],[\"其他配置\",{\"0\":{\"64\":1}}],[\"其实这个属性是从\",{\"1\":{\"251\":1}}],[\"其实转换逻辑已经在\",{\"1\":{\"156\":1}}],[\"其实就是\",{\"1\":{\"58\":1}}],[\"其它保留\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"此时消息整体结构已经解码完成\",{\"1\":{\"387\":1}}],[\"此时可以从控制台看到\",{\"1\":{\"194\":1}}],[\"此时可以使用自定义的类型转换器\",{\"1\":{\"135\":1}}],[\"此时会跳过这种未知类型的消息处理\",{\"1\":{\"176\":1}}],[\"此处还是以\",{\"1\":{\"407\":1}}],[\"此处以\",{\"1\":{\"312\":1,\"315\":1}}],[\"此处将展示一个\",{\"1\":{\"189\":1,\"364\":1}}],[\"此处也可以从spring容器中获取bean来注入\",{\"1\":{\"172\":1}}],[\"此处不再赘述\",{\"1\":{\"156\":1}}],[\"此处的内容自动定义成了byte\",{\"1\":{\"137\":1}}],[\"此处为\",{\"1\":{\"58\":1}}],[\"此三位都为\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"所有的核心\",{\"1\":{\"374\":1}}],[\"所有模块\",{\"1\":{\"349\":1}}],[\"所有请求的处理都是一个风格\",{\"1\":{\"220\":1}}],[\"所有支持的参数解析器都委托给了\",{\"1\":{\"142\":1}}],[\"所谓手动下发就是指使用\",{\"1\":{\"196\":1}}],[\"所在的包名\",{\"1\":{\"48\":1,\"52\":1,\"56\":1}}],[\"所以提供了\",{\"1\":{\"411\":1}}],[\"所以提供了一个\",{\"1\":{\"115\":1}}],[\"所以现在可以测试接收内置的这些类型的消息了\",{\"1\":{\"371\":1}}],[\"所以编译源码的\",{\"1\":{\"344\":1}}],[\"所以无需指定length\",{\"1\":{\"328\":1}}],[\"所以服务端分包补传消息暂时不支持\",{\"1\":{\"226\":1}}],[\"所以本项目也提供了几个内置的\",{\"1\":{\"203\":1}}],[\"所以本小节所说的\",{\"1\":{\"155\":1}}],[\"所以一般的消息处理步骤应该像下面这样\",{\"1\":{\"171\":1}}],[\"所以内置了一个commandsender来自动转换为符合808协议格式的报文并发送给客户端\",{\"1\":{\"145\":1}}],[\"所以额外提供了一个\",{\"1\":{\"136\":1}}],[\"所以至少有以下几种解析方式\",{\"1\":{\"129\":1}}],[\"所以此处选择了这种优先级的处理方式\",{\"1\":{\"115\":1}}],[\"所以此处不按这种方式处理\",{\"1\":{\"115\":1}}],[\"所以在基于注解的实体类映射时\",{\"1\":{\"108\":1,\"246\":1}}],[\"所以你要是知道\",{\"1\":{\"107\":1,\"245\":1}}],[\"所以\",{\"1\":{\"25\":1,\"125\":2,\"137\":1,\"174\":1,\"228\":1,\"251\":1,\"327\":1,\"338\":1,\"361\":1}}],[\"标记该类\",{\"1\":{\"216\":1}}],[\"标记的类型\",{\"1\":{\"236\":1}}],[\"标记的类\",{\"1\":{\"231\":1}}],[\"标记的类的处理逻辑相同\",{\"1\":{\"211\":1}}],[\"标记的这种处理器也是从\",{\"1\":{\"215\":1}}],[\"标记的方法<\",{\"1\":{\"199\":3}}],[\"标记的实体类来构建报文\",{\"1\":{\"423\":1}}],[\"标记的实体类来编码请求\",{\"1\":{\"421\":1}}],[\"标记的实体类来解析请求\",{\"1\":{\"418\":1}}],[\"标记的实体类\",{\"1\":{\"158\":1}}],[\"标记的\",{\"1\":{\"46\":1}}],[\"标识位\",{\"1\":{\"29\":2,\"33\":2,\"187\":2}}],[\"配置界面\",{\"1\":{\"348\":1}}],[\"配置文件里有两个\",{\"1\":{\"344\":1,\"345\":1}}],[\"配置文档\",{\"1\":{\"122\":1}}],[\"配置繁琐\",{\"1\":{\"320\":1}}],[\"配置提示\",{\"1\":{\"193\":1,\"371\":1}}],[\"配置\",{\"0\":{\"192\":1,\"369\":1},\"1\":{\"164\":1,\"213\":1,\"348\":2}}],[\"配置为\",{\"1\":{\"44\":1,\"101\":1}}],[\"配置项总览\",{\"0\":{\"74\":1,\"77\":1,\"81\":1,\"88\":1,\"94\":1,\"97\":1,\"103\":1}}],[\"配置项\",{\"0\":{\"36\":1},\"1\":{\"242\":3}}],[\"将之前的\",{\"1\":{\"399\":1,\"400\":1}}],[\"将上一步初步解码的\",{\"1\":{\"387\":1}}],[\"将上面的\",{\"1\":{\"128\":3,\"131\":3,\"316\":3,\"331\":3}}],[\"将子包发送给终端\",{\"1\":{\"243\":1}}],[\"将请求\",{\"1\":{\"387\":1}}],[\"将请求分包暂存器\",{\"1\":{\"225\":1}}],[\"将请求消息映射为实体类\",{\"1\":{\"115\":1}}],[\"将默认解码器的日志级别调整到debug\",{\"1\":{\"225\":1}}],[\"将合并后的完整消息使用\",{\"1\":{\"223\":1}}],[\"将分包暂存起来\",{\"1\":{\"223\":1}}],[\"将结果放入commandwaitingpool\",{\"1\":{\"197\":1}}],[\"将被修饰的字段拆分之后赋值给另一个bean\",{\"1\":{\"152\":1}}],[\"将第0位和第1位同时取出并转为int\",{\"1\":{\"132\":1}}],[\"将status字段拆分之后放入statusinfo字段\",{\"1\":{\"132\":1}}],[\"将\",{\"1\":{\"44\":1,\"101\":1,\"199\":1,\"378\":1,\"382\":1,\"387\":1}}],[\"三个属性\",{\"1\":{\"44\":1,\"101\":1}}],[\"三个版本\",{\"1\":{\"25\":1}}],[\"该实现类通过\",{\"1\":{\"424\":1}}],[\"该实现类通过被\",{\"1\":{\"423\":1}}],[\"该方法中不宜做耗时太长\",{\"1\":{\"392\":3}}],[\"该功能默认不开启\",{\"1\":{\"384\":2}}],[\"该字段所占的字节数\",{\"1\":{\"326\":1}}],[\"该接口定义如下\",{\"1\":{\"241\":1}}],[\"该类定义如下\",{\"1\":{\"211\":1}}],[\"该类和\",{\"1\":{\"211\":1}}],[\"该组件由\",{\"1\":{\"181\":1}}],[\"该组件可以监听\",{\"1\":{\"180\":1}}],[\"该组件用来管理每个终端的\",{\"1\":{\"179\":1,\"391\":1}}],[\"该组件\",{\"1\":{\"162\":1}}],[\"该注解的作用类似于\",{\"1\":{\"333\":1}}],[\"该注解的\",{\"1\":{\"327\":1}}],[\"该注解仅仅起一个标记作用\",{\"1\":{\"324\":1}}],[\"该注解和\",{\"1\":{\"321\":1,\"324\":1}}],[\"该注解目前仅仅适用于\",{\"1\":{\"152\":1,\"153\":1,\"329\":1}}],[\"该注解只能标记于\",{\"1\":{\"150\":1}}],[\"该注解只能用户数字\",{\"1\":{\"132\":1}}],[\"该注解类似于\",{\"1\":{\"140\":1,\"141\":1}}],[\"该章节介绍的是除前面章节内容之外的其他杂项配置\",{\"1\":{\"87\":1}}],[\"该章节介绍的是\",{\"1\":{\"76\":1,\"80\":1,\"93\":1,\"96\":1,\"102\":1}}],[\"该配置项对应\",{\"1\":{\"44\":1,\"101\":1}}],[\"该消息分包后得总包数\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"==\",{\"1\":{\"141\":2,\"159\":2,\"180\":1,\"231\":1,\"337\":1,\"339\":1,\"391\":1}}],[\"=\",{\"1\":{\"42\":1,\"43\":1,\"78\":1,\"104\":1,\"105\":2,\"115\":1,\"116\":3,\"128\":34,\"130\":6,\"131\":8,\"132\":10,\"134\":2,\"135\":3,\"137\":12,\"138\":19,\"141\":3,\"145\":1,\"148\":25,\"150\":2,\"151\":6,\"155\":3,\"156\":2,\"159\":10,\"162\":3,\"165\":3,\"167\":2,\"171\":7,\"175\":3,\"176\":1,\"180\":2,\"186\":3,\"193\":1,\"196\":5,\"197\":16,\"205\":2,\"206\":2,\"207\":2,\"208\":2,\"209\":2,\"210\":4,\"211\":1,\"216\":4,\"224\":5,\"231\":12,\"237\":1,\"243\":9,\"251\":18,\"252\":24,\"253\":20,\"260\":2,\"261\":7,\"262\":3,\"263\":2,\"265\":3,\"266\":8,\"267\":5,\"268\":3,\"272\":16,\"277\":5,\"286\":3,\"289\":3,\"293\":7,\"294\":7,\"296\":10,\"297\":5,\"299\":6,\"300\":6,\"302\":5,\"303\":5,\"305\":6,\"306\":3,\"308\":6,\"309\":3,\"313\":25,\"316\":58,\"323\":4,\"328\":18,\"331\":8,\"335\":4,\"339\":9,\"361\":3,\"371\":1,\"376\":1,\"384\":2,\"388\":1,\"390\":1,\"391\":4,\"393\":5,\"403\":4,\"404\":5,\"407\":16,\"408\":3,\"411\":11,\"412\":3,\"417\":2,\"420\":3,\"423\":12,\"424\":4}}],[\"处理当前请求的处理器\",{\"1\":{\"387\":1}}],[\"处理当前消息的处理器\",{\"1\":{\"199\":3}}],[\"处理完消息之后回复给客户端的数据对应着\",{\"1\":{\"376\":1}}],[\"处理业务逻辑\",{\"1\":{\"220\":1}}],[\"处理器返回的结果\",{\"1\":{\"387\":1}}],[\"处理器\",{\"1\":{\"213\":2,\"228\":1}}],[\"处理器处理消息时候出现的异常\",{\"1\":{\"199\":1}}],[\"处理器处理结果\",{\"1\":{\"199\":1}}],[\"处理器执行结束之后回调\",{\"1\":{\"199\":1}}],[\"处理器拦截器\",{\"0\":{\"198\":1},\"1\":{\"72\":1}}],[\"处理的\",{\"1\":{\"193\":1,\"228\":1}}],[\"处理逻辑位于\",{\"1\":{\"193\":1}}],[\"处理鉴权消息\",{\"1\":{\"155\":1}}],[\"处理位置上报消息\",{\"1\":{\"141\":1,\"159\":1}}],[\"处理msgid为0x0200的消息\",{\"1\":{\"141\":1}}],[\"处理\",{\"1\":{\"42\":1,\"43\":1,\"99\":1,\"100\":1,\"213\":1,\"219\":2,\"234\":2,\"387\":1}}],[\"属性代表当前正在迭代的数据大小\",{\"1\":{\"327\":1}}],[\"属性用来控制单个消息包的最大大小\",{\"1\":{\"238\":1}}],[\"属性解释\",{\"0\":{\"160\":1}}],[\"属性\",{\"0\":{\"322\":1,\"326\":1,\"330\":1,\"334\":1,\"337\":1},\"1\":{\"39\":1,\"95\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":1,\"154\":2,\"160\":1,\"161\":1,\"251\":3,\"313\":3,\"316\":3,\"322\":1,\"326\":1,\"327\":1,\"334\":1,\"337\":1,\"338\":1}}],[\"可能是\",{\"1\":{\"411\":1}}],[\"可能会对映射关系更清晰一些\",{\"1\":{\"128\":1}}],[\"可取值为\",{\"1\":{\"345\":2}}],[\"可用的\",{\"1\":{\"327\":1}}],[\"可扩展的服务端分包补传处理流程\",{\"1\":{\"226\":1}}],[\"可替换内置\",{\"1\":{\"181\":1}}],[\"可配置的\",{\"1\":{\"90\":1}}],[\"可以有多个\",{\"1\":{\"392\":2}}],[\"可以声明一个\",{\"1\":{\"382\":1}}],[\"可以提供自己的实现类在这里返回自己的\",{\"1\":{\"381\":1}}],[\"可以省略\",{\"1\":{\"327\":1,\"328\":1,\"331\":1,\"338\":1}}],[\"可以混合使用\",{\"1\":{\"256\":1}}],[\"可以从启动日志中的组件统计信息中看到内置了一些消息处理器\",{\"1\":{\"371\":1}}],[\"可以从启动日志中的组件统计信息中看到内置了一个对\",{\"1\":{\"193\":1}}],[\"可以从\",{\"1\":{\"241\":1}}],[\"可以将\",{\"1\":{\"236\":1,\"324\":1}}],[\"可以观察到类似如下日志\",{\"1\":{\"225\":1}}],[\"可以参考下文的说明来编译源码\",{\"1\":{\"341\":1}}],[\"可以参考\",{\"1\":{\"194\":3,\"269\":1,\"372\":1}}],[\"可以使用\",{\"1\":{\"190\":1,\"365\":1,\"423\":1,\"424\":1}}],[\"可以通过复写\",{\"1\":{\"200\":1}}],[\"可以通过\",{\"1\":{\"169\":1}}],[\"可以通过如下代码片段的方式来自定义组件\",{\"1\":{\"164\":1}}],[\"可以自己实现\",{\"1\":{\"163\":1}}],[\"可以用内置的\",{\"1\":{\"156\":1}}],[\"可以用类似如下的方式去嵌套解析\",{\"1\":{\"138\":1}}],[\"可以用类似于\",{\"1\":{\"55\":1}}],[\"可以用\",{\"1\":{\"134\":1}}],[\"可以直接基于注解来完成自动映射\",{\"1\":{\"125\":1}}],[\"可以在单个组件内调用其他专门的复杂逻辑处理流程\",{\"1\":{\"115\":1}}],[\"可以是支持\",{\"1\":{\"20\":1}}],[\"可选值位于\",{\"1\":{\"38\":1}}],[\"默认实现类\",{\"1\":{\"423\":1,\"424\":1}}],[\"默认的\",{\"1\":{\"371\":1}}],[\"默认的配置可以在default\",{\"1\":{\"35\":1,\"75\":1}}],[\"默认\",{\"1\":{\"237\":2,\"352\":1}}],[\"默认为基于caffeine的实现\",{\"1\":{\"225\":1}}],[\"默认tcp端口\",{\"1\":{\"194\":1}}],[\"默认是\",{\"1\":{\"79\":1}}],[\"默认配置\",{\"0\":{\"75\":1}}],[\"默认值是\",{\"1\":{\"236\":1}}],[\"默认值都是\",{\"1\":{\"44\":1}}],[\"默认值\",{\"1\":{\"38\":1,\"39\":1,\"41\":1,\"42\":2,\"43\":2,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1,\"57\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"65\":1,\"84\":1,\"85\":1,\"86\":2,\"90\":1,\"91\":1,\"95\":1,\"98\":1,\"99\":2,\"100\":2,\"161\":1,\"322\":1,\"326\":1,\"334\":1,\"337\":1}}],[\"plugins\",{\"1\":{\"384\":2}}],[\"placeholderfiledserializer\",{\"1\":{\"253\":2}}],[\"peek\",{\"1\":{\"243\":1}}],[\"pending\",{\"0\":{\"85\":1},\"1\":{\"81\":1}}],[\"pull\",{\"1\":{\"181\":1}}],[\"putifnecessary\",{\"1\":{\"197\":1}}],[\"put\",{\"1\":{\"175\":1,\"361\":1}}],[\"public\",{\"1\":{\"109\":1,\"110\":1,\"111\":1,\"116\":1,\"123\":1,\"124\":2,\"128\":2,\"132\":2,\"135\":2,\"137\":1,\"138\":1,\"140\":1,\"141\":2,\"142\":2,\"145\":2,\"148\":5,\"150\":1,\"151\":1,\"155\":2,\"156\":5,\"159\":3,\"162\":2,\"163\":4,\"164\":1,\"165\":3,\"167\":4,\"169\":1,\"171\":6,\"172\":2,\"175\":2,\"176\":2,\"177\":2,\"179\":3,\"180\":4,\"181\":4,\"186\":1,\"192\":2,\"196\":3,\"197\":5,\"199\":1,\"203\":1,\"205\":2,\"206\":2,\"207\":2,\"208\":2,\"209\":2,\"210\":3,\"211\":3,\"216\":3,\"219\":4,\"223\":1,\"231\":3,\"234\":4,\"237\":1,\"238\":1,\"241\":1,\"243\":3,\"247\":1,\"248\":1,\"251\":2,\"252\":1,\"253\":1,\"260\":1,\"261\":1,\"262\":2,\"263\":1,\"265\":1,\"266\":1,\"267\":2,\"268\":1,\"272\":1,\"313\":4,\"316\":4,\"323\":2,\"328\":1,\"331\":1,\"335\":1,\"339\":1,\"361\":5,\"362\":3,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"380\":3,\"381\":3,\"382\":3,\"384\":1,\"385\":1,\"387\":1,\"388\":3,\"390\":3,\"391\":5,\"392\":4,\"393\":3,\"394\":3,\"407\":3,\"411\":3,\"418\":2,\"421\":2,\"423\":1,\"424\":2}}],[\"pattern\",{\"1\":{\"266\":1,\"267\":4,\"268\":1}}],[\"parsemsgtype\",{\"1\":{\"362\":1}}],[\"parseexception\",{\"1\":{\"267\":1}}],[\"parse\",{\"1\":{\"267\":2}}],[\"parsefromint\",{\"1\":{\"175\":1,\"176\":2,\"361\":2,\"362\":2}}],[\"paramcount\",{\"1\":{\"407\":1,\"411\":1}}],[\"params\",{\"1\":{\"197\":1}}],[\"paramitemlist\",{\"1\":{\"407\":1,\"408\":3,\"411\":1,\"412\":4}}],[\"paramitem\",{\"1\":{\"148\":3,\"197\":2,\"407\":2,\"408\":5,\"411\":2,\"412\":5}}],[\"paramitem>\",{\"1\":{\"148\":1,\"197\":1,\"408\":1,\"412\":1}}],[\"paramlist\",{\"1\":{\"148\":4,\"197\":3,\"335\":1}}],[\"param\",{\"0\":{\"79\":1},\"1\":{\"77\":1,\"79\":2,\"148\":5,\"197\":4,\"199\":8,\"223\":1,\"237\":1,\"241\":4,\"361\":1,\"377\":1,\"380\":3,\"381\":1,\"382\":1,\"384\":2,\"387\":11,\"392\":4,\"393\":2,\"408\":1,\"412\":1}}],[\"packageid\",{\"1\":{\"243\":1}}],[\"packageidlist\",{\"1\":{\"243\":2}}],[\"packageids\",{\"1\":{\"241\":2}}],[\"package\",{\"0\":{\"102\":1,\"104\":1,\"105\":1},\"1\":{\"74\":2,\"104\":2,\"105\":3,\"224\":5,\"237\":3,\"238\":2,\"242\":3,\"376\":1,\"380\":2,\"381\":1}}],[\"packages\",{\"0\":{\"48\":1,\"52\":1,\"56\":1}}],[\"posthandle\",{\"1\":{\"199\":1}}],[\"port\",{\"0\":{\"41\":1,\"98\":1},\"1\":{\"97\":1}}],[\"pool\",{\"0\":{\"58\":1,\"59\":1,\"60\":1,\"86\":1},\"1\":{\"36\":1,\"81\":1,\"82\":1}}],[\"private\",{\"1\":{\"128\":14,\"130\":1,\"131\":4,\"132\":7,\"134\":1,\"135\":1,\"137\":4,\"138\":8,\"145\":1,\"148\":6,\"151\":2,\"156\":4,\"165\":1,\"171\":2,\"175\":3,\"186\":3,\"196\":2,\"197\":2,\"210\":1,\"211\":7,\"231\":3,\"243\":2,\"251\":6,\"260\":2,\"262\":1,\"263\":2,\"265\":1,\"267\":1,\"268\":3,\"272\":4,\"313\":5,\"316\":18,\"328\":7,\"331\":4,\"335\":1,\"339\":3,\"361\":3,\"388\":1,\"390\":1,\"391\":2,\"403\":1,\"407\":8,\"411\":8,\"423\":1,\"424\":1}}],[\"println\",{\"1\":{\"165\":3}}],[\"printstacktrace\",{\"1\":{\"145\":1}}],[\"printer\",{\"0\":{\"79\":1},\"1\":{\"77\":1,\"79\":2}}],[\"print\",{\"0\":{\"65\":1},\"1\":{\"36\":1,\"65\":1,\"192\":1,\"193\":1,\"371\":1}}],[\"prehandle\",{\"1\":{\"199\":1}}],[\"pretty\",{\"1\":{\"77\":1,\"79\":1}}],[\"press\",{\"1\":{\"1\":1}}],[\"prometheusmetricsexporter\",{\"1\":{\"388\":2}}],[\"prometheus\",{\"1\":{\"388\":1}}],[\"project\",{\"1\":{\"347\":1}}],[\"properties\",{\"1\":{\"344\":1,\"345\":1,\"347\":1}}],[\"propertysources\",{\"1\":{\"35\":1,\"75\":1}}],[\"provinceid\",{\"1\":{\"210\":1,\"328\":1,\"418\":2}}],[\"protected\",{\"1\":{\"171\":3,\"391\":1}}],[\"protocolversion\",{\"1\":{\"377\":1,\"391\":1}}],[\"protocol\",{\"0\":{\"37\":1,\"93\":1},\"1\":{\"74\":1,\"93\":1,\"94\":1}}],[\"processed\",{\"1\":{\"388\":1}}],[\"processer\",{\"1\":{\"86\":2}}],[\"processlocationuploadmsgv2019\",{\"1\":{\"316\":1}}],[\"processlocationbatchuploadmsgv2019\",{\"1\":{\"313\":1}}],[\"processlocationmsg\",{\"1\":{\"141\":1,\"159\":1}}],[\"processretransmissionmsg\",{\"1\":{\"243\":1}}],[\"processrequest\",{\"1\":{\"216\":2,\"219\":1}}],[\"processregistermsgv2013\",{\"1\":{\"210\":1}}],[\"processterminalregistermsgv2019\",{\"1\":{\"216\":1,\"231\":1}}],[\"processterminalregistermsgv2011\",{\"1\":{\"216\":1}}],[\"processthrowable\",{\"1\":{\"124\":1}}],[\"processmsg0704\",{\"1\":{\"211\":1}}],[\"processmsg0001\",{\"1\":{\"197\":1,\"205\":1}}],[\"process\",{\"1\":{\"206\":2,\"207\":2,\"208\":2,\"209\":2}}],[\"processauthmsg\",{\"1\":{\"155\":1}}],[\"processor\",{\"0\":{\"58\":1,\"80\":1,\"83\":1},\"1\":{\"36\":1,\"63\":1,\"74\":1,\"80\":1,\"81\":2,\"82\":2,\"86\":1,\"382\":2}}],[\"program\",{\"0\":{\"79\":1},\"1\":{\"77\":1,\"79\":2}}],[\"pruidong\",{\"1\":{\"8\":1}}],[\"名称为\",{\"1\":{\"35\":1,\"75\":1}}],[\"并自增\",{\"1\":{\"377\":1}}],[\"并没有为\",{\"1\":{\"351\":1}}],[\"并没有内置所有类型的消息\",{\"1\":{\"174\":1,\"361\":1}}],[\"并加入到\",{\"1\":{\"200\":1}}],[\"并等待\",{\"1\":{\"197\":1}}],[\"并会在日志里打印\",{\"1\":{\"176\":1}}],[\"并手动转义\",{\"1\":{\"145\":1}}],[\"并且模块名中的\",{\"1\":{\"351\":1}}],[\"并且已经回复客户端\",{\"1\":{\"194\":1}}],[\"并且已经将默认的配置加入到了\",{\"1\":{\"35\":1,\"75\":1}}],[\"并且内置了一个\",{\"1\":{\"193\":1}}],[\"并且不再支持使用\",{\"1\":{\"164\":1}}],[\"并且可能在后续版本删除\",{\"1\":{\"125\":1}}],[\"并将其置于最后\",{\"1\":{\"35\":1,\"75\":1}}],[\"中写入指定类型的\",{\"1\":{\"419\":1}}],[\"中读取\",{\"1\":{\"417\":1}}],[\"中读取指定类型的\",{\"1\":{\"416\":1}}],[\"中自动释放\",{\"1\":{\"413\":1}}],[\"中提供的一系列工厂方法来构建\",{\"1\":{\"412\":1}}],[\"中给\",{\"1\":{\"411\":1}}],[\"中改成了\",{\"1\":{\"397\":1}}],[\"中新增\",{\"1\":{\"392\":1}}],[\"中替换为自定义的\",{\"1\":{\"390\":1}}],[\"中扩展枚举就行了\",{\"1\":{\"362\":1}}],[\"中默认的\",{\"1\":{\"356\":1}}],[\"中还是能正常解析\",{\"1\":{\"351\":1}}],[\"中去掉了配置包手动扫描的功能\",{\"1\":{\"320\":1}}],[\"中内置的一堆别名\",{\"1\":{\"269\":1}}],[\"中内置了\",{\"1\":{\"263\":1,\"268\":1}}],[\"中引入的辅助类\",{\"1\":{\"401\":1,\"405\":1,\"409\":1}}],[\"中引入的注解别名机制来扩展的自定义注解\",{\"1\":{\"258\":1}}],[\"中引入了\",{\"1\":{\"78\":1}}],[\"中可以不用指定这个属性了\",{\"1\":{\"251\":1}}],[\"中可以实现该接口以注入\",{\"1\":{\"111\":1}}],[\"中获取子包信息\",{\"1\":{\"241\":1}}],[\"中唯一的选择\",{\"1\":{\"228\":1}}],[\"中使用如下类型中的若干个\",{\"1\":{\"204\":1}}],[\"中使用spring容器的其他bean\",{\"1\":{\"143\":1}}],[\"中对应的\",{\"1\":{\"130\":1}}],[\"中借鉴\",{\"1\":{\"107\":1,\"245\":1}}],[\"中已经废弃\",{\"1\":{\"82\":1}}],[\"中\",{\"1\":{\"35\":1,\"75\":1,\"108\":1,\"124\":1,\"186\":1,\"241\":1,\"246\":1,\"251\":1,\"262\":1,\"267\":1,\"269\":1,\"321\":1,\"324\":1,\"374\":1,\"411\":1}}],[\"中查看\",{\"1\":{\"35\":1,\"75\":1}}],[\"中的诸如\",{\"1\":{\"107\":1,\"245\":1}}],[\"中的\",{\"1\":{\"23\":1,\"150\":1,\"151\":1,\"218\":1,\"320\":1,\"333\":1,\"378\":1,\"397\":1}}],[\"y\",{\"1\":{\"404\":3}}],[\"yymmddhhmmss\",{\"1\":{\"128\":1,\"265\":1,\"266\":1,\"268\":1}}],[\"yml\",{\"1\":{\"35\":1,\"75\":1,\"192\":1,\"369\":1}}],[\"yezhihao\",{\"1\":{\"9\":1}}],[\"55\",{\"1\":{\"344\":5,\"352\":4,\"397\":1}}],[\"5\",{\"1\":{\"34\":2,\"148\":1,\"165\":1,\"316\":3,\"328\":2,\"357\":2,\"376\":1,\"397\":1,\"418\":3}}],[\"59e0a396f0b9c0a4a2c034ba6d44fae22297e979\",{\"1\":{\"10\":1}}],[\"一批连续递增的流水号\",{\"1\":{\"393\":1}}],[\"一次性\",{\"1\":{\"393\":1}}],[\"一个终端请求的处理\",{\"1\":{\"387\":1}}],[\"一个空的\",{\"1\":{\"47\":1}}],[\"一般情况下\",{\"1\":{\"341\":1}}],[\"一般来说应该和\",{\"1\":{\"320\":1}}],[\"一句话概括就是\",{\"1\":{\"251\":1}}],[\"一样给你一个\",{\"1\":{\"203\":1}}],[\"一样\",{\"1\":{\"199\":1}}],[\"一致\",{\"1\":{\"31\":1,\"384\":1}}],[\"一些公共类\",{\"1\":{\"1\":1}}],[\"从第\",{\"1\":{\"404\":1}}],[\"从其他服务验证鉴权码是否正确\",{\"1\":{\"162\":1}}],[\"从逻辑上来理解\",{\"1\":{\"141\":1}}],[\"从消息体的\",{\"1\":{\"136\":1}}],[\"从客户端接收消息时\",{\"1\":{\"125\":1}}],[\"从\",{\"1\":{\"30\":1,\"34\":1,\"112\":1,\"143\":1,\"164\":1,\"188\":1,\"199\":1,\"265\":1,\"313\":3,\"316\":3,\"328\":1,\"331\":1,\"344\":1,\"355\":1,\"397\":2}}],[\"则该项有内容\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"则在前面补\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"则消息头中无消息包封装项字段\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"位操作的场景都可以用到\",{\"1\":{\"403\":1}}],[\"位置汇报数据体\",{\"1\":{\"313\":1}}],[\"位置汇报数据体长度\",{\"1\":{\"313\":1}}],[\"位置数据类型\",{\"1\":{\"313\":1}}],[\"位置上传报文\",{\"1\":{\"312\":1,\"315\":1}}],[\"位置上传报文解析示例\",{\"0\":{\"126\":1,\"315\":1},\"1\":{\"68\":1,\"72\":1,\"125\":1}}],[\"位置上报报文中的时间字段是以\",{\"1\":{\"265\":1}}],[\"位置上报\",{\"1\":{\"175\":1,\"251\":1}}],[\"位\",{\"1\":{\"30\":1,\"34\":1,\"185\":3,\"186\":3,\"188\":1}}],[\"位为\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"算法加密\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"第一次导入报错\",{\"1\":{\"349\":1}}],[\"第28个字节开始\",{\"1\":{\"136\":1}}],[\"第\",{\"1\":{\"30\":1,\"34\":1,\"188\":1,\"403\":1,\"404\":3}}],[\"校验码\",{\"1\":{\"29\":1,\"33\":1,\"187\":1,\"375\":2}}],[\"消息中\",{\"1\":{\"411\":1}}],[\"消息中的用法\",{\"1\":{\"410\":1}}],[\"消息中的\",{\"1\":{\"407\":1}}],[\"消息给终端\",{\"1\":{\"223\":1}}],[\"消息\",{\"1\":{\"219\":1,\"226\":1,\"234\":1}}],[\"消息的处理器\",{\"1\":{\"193\":1}}],[\"消息有误\",{\"1\":{\"156\":1,\"159\":1,\"423\":1,\"424\":1}}],[\"消息下发\",{\"0\":{\"144\":1,\"195\":1},\"1\":{\"68\":1,\"72\":1,\"125\":1}}],[\"消息转换器配置\",{\"1\":{\"164\":1}}],[\"消息转换器\",{\"0\":{\"166\":1},\"1\":{\"68\":1}}],[\"消息类型配置\",{\"1\":{\"164\":1}}],[\"消息类型\",{\"0\":{\"174\":1,\"360\":1},\"1\":{\"68\":1,\"72\":1,\"322\":1,\"334\":1}}],[\"消息处理服务的搭建\",{\"1\":{\"364\":1}}],[\"消息处理\",{\"1\":{\"226\":1}}],[\"消息处理完成后对客户端的响应也是一个\",{\"1\":{\"169\":1}}],[\"消息处理流程\",{\"0\":{\"117\":1},\"1\":{\"68\":1,\"106\":1}}],[\"消息处理器截图如下\",{\"1\":{\"314\":1,\"317\":1}}],[\"消息处理器如下\",{\"1\":{\"313\":1,\"316\":1}}],[\"消息处理器配置\",{\"1\":{\"164\":1}}],[\"消息处理器注册\",{\"0\":{\"139\":1},\"1\":{\"68\":1,\"125\":1}}],[\"消息处理器\",{\"0\":{\"169\":1},\"1\":{\"68\":1,\"90\":1}}],[\"消息处理线程池相关的配置\",{\"1\":{\"80\":1}}],[\"消息处理线程池的核心线程数\",{\"1\":{\"59\":1}}],[\"消息处理线程池\",{\"1\":{\"58\":1}}],[\"消息处理可以用\",{\"1\":{\"51\":1}}],[\"消息包最大大小\",{\"1\":{\"237\":1}}],[\"消息包总数\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"消息包封装项\",{\"1\":{\"30\":2,\"34\":2,\"188\":2}}],[\"消息流水号\",{\"1\":{\"30\":2,\"34\":2,\"188\":2}}],[\"消息id占用几个字节\",{\"1\":{\"154\":2}}],[\"消息id用1个字节表示\",{\"1\":{\"138\":1}}],[\"消息id\",{\"1\":{\"30\":2,\"34\":2,\"150\":1,\"165\":1,\"188\":2,\"361\":2,\"375\":1,\"376\":1}}],[\"消息体借助\",{\"1\":{\"424\":1}}],[\"消息体中第4~7个字节\",{\"1\":{\"131\":1}}],[\"消息体总长度\",{\"1\":{\"128\":1}}],[\"消息体卫长消息\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"消息体长度自动计算\",{\"1\":{\"165\":1}}],[\"消息体长度\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"消息体\",{\"1\":{\"29\":1,\"33\":1,\"165\":1,\"187\":1,\"375\":1,\"387\":1}}],[\"消息体属性中保留的第15个\",{\"1\":{\"334\":1}}],[\"消息体属性\",{\"1\":{\"25\":1,\"30\":2,\"34\":2,\"165\":1,\"188\":2}}],[\"消息头中的前两个字节\",{\"1\":{\"361\":1}}],[\"消息头的结构如下所示\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"消息头\",{\"0\":{\"30\":1,\"34\":1,\"188\":1},\"1\":{\"29\":1,\"33\":1,\"165\":1,\"187\":1}}],[\"消息结构\",{\"0\":{\"29\":1,\"33\":1,\"187\":1}}],[\"你也可以根据需求来实现自己的\",{\"1\":{\"390\":1}}],[\"你只需要在你自己的\",{\"1\":{\"362\":1}}],[\"你应该直接使用项目中指定版本的\",{\"1\":{\"346\":1}}],[\"你应该复制一份出来修改\",{\"1\":{\"27\":1,\"318\":1}}],[\"你无需编译源码\",{\"1\":{\"341\":1}}],[\"你可能会对于上面的代码片段有几个疑问\",{\"1\":{\"251\":1}}],[\"你可以像下面这样修改\",{\"1\":{\"357\":1,\"358\":1}}],[\"你可以按你的需求调整\",{\"1\":{\"356\":1}}],[\"你可以按需在\",{\"1\":{\"204\":1}}],[\"你可以定义自己的注解来完成这种特殊需求\",{\"1\":{\"265\":1}}],[\"你可以自定义一个解码器\",{\"1\":{\"381\":1}}],[\"你可以自定义\",{\"1\":{\"226\":1}}],[\"你可以根据文档中表17的定义将\",{\"1\":{\"130\":1}}],[\"你可以将其映射为\",{\"1\":{\"129\":1}}],[\"你可以给实体类实现这些接口以自动注入一些其他信息\",{\"1\":{\"108\":1,\"246\":1}}],[\"你完全可以\",{\"1\":{\"167\":1,\"169\":1}}],[\"你使用了内置的\",{\"1\":{\"162\":1}}],[\"你现在看的是\",{\"1\":{\"71\":1}}],[\"你正在浏览的文档是基于\",{\"1\":{\"6\":1,\"7\":1}}],[\"很可能不符合你的需求\",{\"1\":{\"27\":1,\"318\":1}}],[\"这样就可以看到分包消息的详情了\",{\"1\":{\"236\":1}}],[\"这样一来\",{\"1\":{\"136\":1}}],[\"这种\",{\"1\":{\"245\":1}}],[\"这种类型的\",{\"1\":{\"228\":1}}],[\"这种实现接口并手动注册的方式显得非常繁琐\",{\"1\":{\"167\":1,\"169\":1}}],[\"这部分也是借鉴\",{\"1\":{\"203\":1}}],[\"这里使用一个永远返回0的生成器用来调试\",{\"1\":{\"423\":1,\"424\":1}}],[\"这里使用\",{\"1\":{\"423\":1}}],[\"这里返回的\",{\"1\":{\"420\":1}}],[\"这里替换为自定义的session\",{\"1\":{\"391\":1}}],[\"这里是一个使用\",{\"1\":{\"388\":1}}],[\"这里只是将源码中\",{\"1\":{\"363\":1}}],[\"这里只讨论\",{\"1\":{\"356\":1}}],[\"这里说的自定义注解是通过\",{\"1\":{\"258\":1}}],[\"这里指的是\",{\"1\":{\"240\":1}}],[\"这里的经纬度其实就是将\",{\"1\":{\"260\":1}}],[\"这里的分包补传指的是\",{\"1\":{\"226\":1}}],[\"这里的\",{\"1\":{\"171\":1}}],[\"这里缺一个图\",{\"1\":{\"147\":1}}],[\"这里写成list仅仅为了示例\",{\"1\":{\"138\":1}}],[\"这里要介绍的是\",{\"1\":{\"27\":1}}],[\"这个接口也是从\",{\"1\":{\"384\":1}}],[\"这个接口的作用和\",{\"1\":{\"199\":1}}],[\"这个问题暂且不讨论\",{\"1\":{\"251\":1}}],[\"这个注解也是借鉴\",{\"1\":{\"230\":1}}],[\"这个泛型接口\",{\"1\":{\"167\":1,\"169\":1}}],[\"这个报文格式可能和你使用的有所不同\",{\"1\":{\"127\":1}}],[\"这个配置项必须\",{\"1\":{\"344\":1}}],[\"这个配置\",{\"1\":{\"78\":1}}],[\"这些转换功能都是依赖于参数解析器\",{\"1\":{\"203\":1}}],[\"这些aware接口只能在\",{\"1\":{\"108\":1,\"246\":1}}],[\"这些统计信息可以显示已经注册的\",{\"1\":{\"65\":1,\"90\":1}}],[\"这些类只是个示例\",{\"1\":{\"27\":1,\"318\":1}}],[\"这些类命名格式都是\",{\"1\":{\"27\":1,\"318\":1}}],[\"包含下面几个比较关键的步骤\",{\"1\":{\"387\":1}}],[\"包含了本次请求的所有信息\",{\"1\":{\"211\":1}}],[\"包中\",{\"1\":{\"353\":1}}],[\"包下\",{\"1\":{\"91\":1}}],[\"包下内置了一些\",{\"1\":{\"27\":2,\"318\":2}}],[\"包括合并后的分包请求\",{\"1\":{\"387\":1}}],[\"包括\",{\"1\":{\"47\":1,\"344\":1}}],[\"包序号\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"包起来\",{\"1\":{\"14\":1}}],[\"it\",{\"1\":{\"412\":2}}],[\"itemlist\",{\"1\":{\"313\":1}}],[\"itemdatatype\",{\"1\":{\"138\":1}}],[\"item\",{\"1\":{\"136\":2}}],[\"i\",{\"1\":{\"225\":2,\"393\":4}}],[\"illegalargumentexception\",{\"1\":{\"196\":1}}],[\"import\",{\"1\":{\"165\":5}}],[\"implementation\",{\"1\":{\"191\":1}}],[\"implements\",{\"1\":{\"128\":1,\"132\":1,\"135\":1,\"142\":1,\"150\":1,\"156\":1,\"167\":1,\"171\":1,\"175\":1,\"179\":1,\"180\":1,\"219\":1,\"234\":1,\"361\":1,\"388\":1,\"391\":1,\"418\":1,\"421\":1}}],[\"impl\",{\"1\":{\"92\":2,\"193\":1,\"225\":1,\"381\":2}}],[\"if\",{\"1\":{\"145\":1,\"171\":2,\"180\":1,\"262\":3,\"267\":3}}],[\"isassignablefrom\",{\"1\":{\"262\":5,\"267\":3}}],[\"isauthcodevalid\",{\"1\":{\"162\":1}}],[\"isvalidauthcode\",{\"1\":{\"171\":2}}],[\"isnestedcommandfield\",{\"1\":{\"161\":1}}],[\"isnestedextrafield\",{\"1\":{\"138\":1}}],[\"ispresent\",{\"1\":{\"145\":1,\"176\":1}}],[\"issuccess\",{\"1\":{\"171\":1}}],[\"issues\",{\"1\":{\"101\":1,\"186\":1}}],[\"issue\",{\"1\":{\"4\":1}}],[\"issouthlat\",{\"1\":{\"132\":1}}],[\"ids\",{\"1\":{\"393\":3}}],[\"idea\",{\"1\":{\"348\":2}}],[\"id12345\",{\"1\":{\"165\":1}}],[\"id\",{\"1\":{\"136\":1,\"137\":1,\"165\":4,\"316\":1,\"377\":1,\"388\":1,\"391\":1,\"393\":1,\"407\":1,\"411\":1,\"423\":1,\"424\":1}}],[\"idlestatehandler\",{\"1\":{\"44\":2,\"101\":2}}],[\"idle\",{\"0\":{\"44\":1,\"101\":1},\"1\":{\"44\":1,\"97\":4,\"101\":5}}],[\"instance\",{\"1\":{\"391\":2}}],[\"increment\",{\"1\":{\"388\":1,\"393\":3}}],[\"in\",{\"1\":{\"347\":1}}],[\"initializer\",{\"1\":{\"190\":1,\"365\":1}}],[\"info\",{\"1\":{\"88\":4,\"92\":4,\"124\":1,\"128\":1,\"141\":3,\"148\":1,\"155\":1,\"159\":4,\"162\":1,\"167\":1,\"171\":2,\"172\":1,\"175\":1,\"180\":1,\"192\":1,\"197\":1,\"210\":1,\"211\":1,\"225\":1,\"231\":1,\"243\":1,\"313\":1,\"316\":1,\"323\":1,\"369\":2,\"418\":7}}],[\"intvalue=16470\",{\"1\":{\"225\":1}}],[\"intto2bytes\",{\"1\":{\"156\":2}}],[\"intfrombytes\",{\"1\":{\"135\":1,\"167\":7}}],[\"intfrom4bytes\",{\"1\":{\"130\":1}}],[\"int即可\",{\"1\":{\"134\":1}}],[\"intbitops\",{\"1\":{\"130\":1,\"135\":1,\"156\":2}}],[\"intlng\",{\"1\":{\"128\":1,\"272\":1}}],[\"intlat\",{\"1\":{\"128\":1,\"134\":1,\"272\":1}}],[\"interruptedexception\",{\"1\":{\"145\":1,\"169\":1,\"171\":2,\"197\":1}}],[\"interface\",{\"1\":{\"109\":1,\"110\":1,\"111\":1,\"116\":1,\"169\":1,\"199\":1,\"203\":1,\"223\":1,\"237\":1,\"238\":1,\"241\":1,\"247\":1,\"248\":1,\"252\":4,\"253\":3,\"261\":1,\"266\":1,\"361\":1,\"362\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"380\":1,\"381\":1,\"382\":1,\"384\":1,\"385\":1,\"387\":1,\"392\":1,\"393\":1}}],[\"integer\",{\"1\":{\"128\":4,\"129\":1,\"132\":1,\"134\":1,\"137\":2,\"181\":1,\"186\":3,\"274\":1,\"275\":1,\"280\":1,\"281\":1,\"283\":1,\"284\":1,\"293\":1,\"294\":1,\"299\":1,\"300\":1,\"302\":1,\"303\":1,\"316\":2}}],[\"int\",{\"1\":{\"41\":1,\"42\":1,\"43\":1,\"59\":1,\"60\":1,\"62\":1,\"84\":1,\"85\":1,\"98\":1,\"99\":1,\"100\":1,\"116\":4,\"128\":8,\"129\":1,\"130\":5,\"131\":6,\"132\":3,\"138\":4,\"148\":4,\"151\":1,\"152\":1,\"153\":1,\"156\":4,\"159\":2,\"163\":4,\"175\":3,\"186\":5,\"197\":1,\"210\":1,\"231\":1,\"237\":3,\"238\":2,\"241\":1,\"243\":1,\"252\":4,\"253\":2,\"261\":1,\"262\":2,\"266\":1,\"267\":2,\"274\":1,\"275\":1,\"280\":1,\"281\":1,\"283\":1,\"284\":1,\"293\":1,\"294\":1,\"299\":1,\"300\":1,\"302\":1,\"303\":1,\"313\":3,\"316\":8,\"328\":2,\"329\":1,\"331\":5,\"339\":1,\"361\":6,\"362\":1,\"376\":3,\"377\":1,\"393\":12,\"404\":1,\"407\":2,\"411\":2,\"423\":4}}],[\"ioexception\",{\"1\":{\"169\":1,\"171\":1}}],[\"io\",{\"1\":{\"27\":2,\"38\":1,\"39\":1,\"44\":1,\"80\":1,\"88\":1,\"91\":1,\"92\":3,\"95\":1,\"101\":1,\"115\":1,\"164\":2,\"165\":3,\"186\":1,\"191\":1,\"192\":1,\"193\":2,\"196\":2,\"225\":1,\"263\":1,\"268\":1,\"318\":2,\"369\":1,\"380\":2,\"381\":3,\"387\":3,\"390\":1}}],[\"协议版本\",{\"1\":{\"322\":1}}],[\"协议版本号\",{\"1\":{\"34\":2}}],[\"协议入门\",{\"1\":{\"112\":1}}],[\"协议中定义的\",{\"1\":{\"27\":1}}],[\"协议扫盲\",{\"0\":{\"24\":1,\"183\":1},\"1\":{\"68\":1}}],[\"本次请求对应的\",{\"1\":{\"327\":2,\"338\":2}}],[\"本章节介绍的通过\",{\"1\":{\"272\":1}}],[\"本质上和上一个问题是同一个问题\",{\"1\":{\"256\":1}}],[\"本项目源码\",{\"1\":{\"353\":1}}],[\"本项目借鉴\",{\"1\":{\"218\":1}}],[\"本项目将\",{\"1\":{\"25\":1}}],[\"本节内容是\",{\"1\":{\"155\":1}}],[\"本节将以位置上传报文为例\",{\"1\":{\"126\":1}}],[\"本框架并不支持直接从\",{\"1\":{\"135\":1}}],[\"本示例中结果为\",{\"1\":{\"134\":1}}],[\"本文举例用到的报文也\",{\"1\":{\"126\":1,\"312\":1,\"315\":1}}],[\"本文档暂时不会介绍这部分内容\",{\"1\":{\"125\":1}}],[\"本文档将介绍808协议处理方式\",{\"1\":{\"68\":1}}],[\"本小节主要介绍\",{\"1\":{\"228\":1}}],[\"本小节主要内容如下\",{\"1\":{\"125\":1,\"164\":1}}],[\"本小节将介绍\",{\"1\":{\"182\":1}}],[\"本小节将介绍如何主动下发消息给终端\",{\"1\":{\"144\":1}}],[\"本小节示例可以在\",{\"1\":{\"163\":1,\"173\":1,\"176\":1,\"177\":2,\"178\":1,\"180\":1}}],[\"本小节的示例代码可以在\",{\"1\":{\"139\":1,\"143\":1}}],[\"本小节的示例可以在\",{\"1\":{\"126\":1,\"138\":1,\"144\":1,\"148\":1,\"162\":1,\"168\":1,\"189\":1,\"194\":1,\"364\":1,\"373\":1}}],[\"本小节内容如下\",{\"1\":{\"106\":1}}],[\"本小节会介绍808服务的配置选项\",{\"1\":{\"35\":1}}],[\"本人\",{\"1\":{\"4\":1}}],[\"版的\",{\"1\":{\"371\":1}}],[\"版的位置上传报文为例\",{\"1\":{\"315\":1}}],[\"版的位置批量上传报文为例\",{\"1\":{\"312\":1}}],[\"版的消息\",{\"1\":{\"219\":1,\"234\":1}}],[\"版统一处理\",{\"1\":{\"25\":1}}],[\"版在\",{\"1\":{\"25\":1}}],[\"版本改为\",{\"1\":{\"399\":1,\"400\":1}}],[\"版本限制如下\",{\"1\":{\"397\":1}}],[\"版本的配置\",{\"1\":{\"344\":1,\"345\":1}}],[\"版本必须在\",{\"1\":{\"344\":2}}],[\"版本不支持自动化的\",{\"1\":{\"226\":1}}],[\"版本标识\",{\"1\":{\"34\":1}}],[\"版本\",{\"1\":{\"20\":1,\"345\":3,\"356\":1,\"357\":2,\"358\":2,\"397\":1}}],[\"在其他地方手动构建的\",{\"1\":{\"413\":1}}],[\"在使用方面\",{\"1\":{\"413\":1}}],[\"在响应消息中的用法\",{\"1\":{\"411\":1}}],[\"在某些特殊场景下\",{\"1\":{\"410\":1}}],[\"在实际处理消息的过程中\",{\"1\":{\"378\":1}}],[\"在这里继续扩你的消息类型就行了\",{\"1\":{\"361\":1}}],[\"在编码消息时\",{\"1\":{\"236\":1}}],[\"在本项目中\",{\"1\":{\"220\":1}}],[\"在处理器方法中注入\",{\"1\":{\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1}}],[\"在默认配置的情况下\",{\"1\":{\"204\":1}}],[\"在msgid重复时可以使用list类型\",{\"1\":{\"138\":1}}],[\"在此处无实际意义\",{\"1\":{\"132\":1}}],[\"在用注解解析映射请求报文到实体类的时候\",{\"1\":{\"108\":1,\"246\":1}}],[\"在\",{\"1\":{\"101\":1,\"344\":1,\"345\":1,\"357\":1,\"358\":1,\"374\":1,\"387\":1,\"397\":1,\"411\":2}}],[\"在消息整体结构上没任何区别\",{\"1\":{\"25\":1}}],[\"在写\",{\"1\":{\"10\":1}}],[\"据官方文档描述\",{\"1\":{\"25\":1}}],[\"警告\",{\"1\":{\"25\":1,\"101\":1,\"145\":1,\"224\":3,\"312\":1,\"315\":1,\"320\":1,\"329\":1,\"351\":1,\"355\":1,\"372\":1,\"397\":1}}],[\"就需要指定\",{\"1\":{\"251\":1}}],[\"就类似于\",{\"1\":{\"203\":1}}],[\"就是校验码\",{\"1\":{\"380\":1}}],[\"就是当前正在迭代的对象\",{\"1\":{\"327\":1,\"338\":1}}],[\"就是标记一下被该注解修饰的类中存在若干个能处理请求的处理器方法\",{\"1\":{\"320\":1}}],[\"就是附加项列表了\",{\"1\":{\"136\":1}}],[\"就是消息体中第4~7个字节\",{\"1\":{\"130\":1}}],[\"就\",{\"1\":{\"25\":1}}],[\"但是编译之后的\",{\"1\":{\"353\":1}}],[\"但是编译级别是\",{\"1\":{\"343\":1}}],[\"但是你可以将\",{\"1\":{\"344\":1}}],[\"但是实际上\",{\"1\":{\"344\":1}}],[\"但是该属性返回的是一个\",{\"1\":{\"326\":1}}],[\"但是该属性返回的是一个方法名\",{\"1\":{\"326\":1}}],[\"但是该属性是基于\",{\"1\":{\"326\":2}}],[\"但是内置的反序列化器并不支持直接从\",{\"1\":{\"265\":1}}],[\"但是内置的转换器实际上不支持从\",{\"1\":{\"260\":1}}],[\"但是在使用时难免会疑惑\",{\"1\":{\"251\":1}}],[\"但是接收到的都是\",{\"1\":{\"203\":1}}],[\"但是这种情况在原始808文档中确实是存在的\",{\"1\":{\"138\":1}}],[\"但是如果将这个附加项解析为一个\",{\"1\":{\"136\":1}}],[\"但是关键部分会截图展示\",{\"1\":{\"126\":1}}],[\"但是原理都一样\",{\"1\":{\"126\":1,\"312\":1,\"315\":1}}],[\"但是默认是没有启用的\",{\"1\":{\"78\":1}}],[\"但是\",{\"1\":{\"23\":1,\"126\":1,\"135\":1,\"218\":1,\"251\":2,\"312\":1,\"315\":1,\"411\":1}}],[\"e636f6d0000008102000b000000840101000000320416320a1efe7e\",{\"1\":{\"408\":1,\"412\":1}}],[\"eclipse\",{\"1\":{\"349\":3}}],[\"else\",{\"1\":{\"262\":2,\"267\":2}}],[\"elementtype\",{\"1\":{\"252\":3,\"253\":2,\"261\":1,\"266\":1}}],[\"error\",{\"1\":{\"171\":5}}],[\"empty\",{\"1\":{\"157\":1,\"176\":1}}],[\"emptyrequestbody\",{\"1\":{\"47\":1}}],[\"e\",{\"1\":{\"145\":2,\"267\":2}}],[\"equals\",{\"1\":{\"141\":2,\"159\":2}}],[\"encryptiontype=0\",{\"1\":{\"225\":1}}],[\"encode\",{\"1\":{\"382\":1,\"408\":1,\"412\":1}}],[\"encodemsgbody\",{\"1\":{\"171\":2}}],[\"encoder\",{\"1\":{\"88\":1,\"92\":1,\"236\":2,\"369\":1}}],[\"encoding\",{\"1\":{\"165\":1}}],[\"end\",{\"1\":{\"163\":2}}],[\"endbitindex\",{\"1\":{\"153\":1,\"330\":1}}],[\"endindex\",{\"1\":{\"132\":1}}],[\"environmentaware\",{\"1\":{\"107\":1,\"245\":1}}],[\"enablejt808serverautoconfig\",{\"1\":{\"192\":2}}],[\"enable\",{\"0\":{\"47\":1},\"1\":{\"115\":1}}],[\"enabled\",{\"0\":{\"46\":1,\"51\":1,\"55\":1,\"90\":1,\"91\":1},\"1\":{\"44\":1,\"77\":2,\"78\":1,\"79\":1,\"88\":2,\"90\":1,\"91\":1,\"97\":1,\"101\":2,\"369\":2,\"384\":2}}],[\"enum\",{\"1\":{\"38\":1,\"175\":1,\"186\":1,\"361\":1}}],[\"entityjt808msgbuilder\",{\"0\":{\"423\":1},\"1\":{\"423\":1}}],[\"entity\",{\"0\":{\"45\":1,\"47\":1},\"1\":{\"36\":1,\"115\":2,\"423\":2}}],[\"executed\",{\"1\":{\"347\":1}}],[\"executor\",{\"0\":{\"83\":1},\"1\":{\"80\":1,\"81\":1,\"82\":1}}],[\"exclusions>\",{\"1\":{\"357\":1,\"358\":1}}],[\"exclusion>\",{\"1\":{\"357\":1,\"358\":1}}],[\"exchange\",{\"1\":{\"199\":6,\"208\":3,\"209\":1,\"219\":2,\"234\":5,\"384\":2,\"387\":8,\"418\":3,\"421\":5}}],[\"exceptionargumentresolver\",{\"1\":{\"142\":1}}],[\"exceptionhandler\",{\"1\":{\"56\":1,\"57\":1,\"124\":1}}],[\"exceptionhandler请参考这里\",{\"1\":{\"55\":1}}],[\"exception\",{\"0\":{\"54\":1,\"57\":1},\"1\":{\"36\":1,\"148\":1,\"199\":2}}],[\"expectedtargetclasstype\",{\"1\":{\"186\":4}}],[\"expression\",{\"1\":{\"23\":1}}],[\"ext\",{\"1\":{\"193\":1}}],[\"extendedjt808fielddeserializergeopoint\",{\"1\":{\"261\":1,\"262\":1}}],[\"extends\",{\"1\":{\"162\":1,\"163\":1,\"164\":1,\"167\":1,\"169\":2,\"171\":2,\"172\":1,\"176\":1,\"177\":1,\"179\":1,\"180\":1,\"181\":1,\"199\":1,\"237\":1,\"253\":2,\"262\":1,\"267\":1,\"376\":1,\"377\":1,\"387\":1,\"390\":1,\"392\":1,\"403\":1,\"408\":1,\"412\":1}}],[\"extension\",{\"0\":{\"69\":1}}],[\"extraitem\",{\"1\":{\"316\":1}}],[\"extraitemlist\",{\"1\":{\"316\":1}}],[\"extrainfo\",{\"1\":{\"138\":1}}],[\"extrainfoitemlist\",{\"1\":{\"137\":1}}],[\"extrainfoitem\",{\"1\":{\"137\":1}}],[\"extramsgbody\",{\"0\":{\"154\":1},\"1\":{\"138\":1,\"154\":1}}],[\"extramsgbody注解不能丢\",{\"1\":{\"138\":1}}],[\"extrafield解析\",{\"0\":{\"138\":1}}],[\"extrafield\",{\"0\":{\"154\":1},\"1\":{\"136\":1,\"138\":8,\"154\":1}}],[\"eyerh264decoder\",{\"1\":{\"10\":2}}],[\"支持\",{\"1\":{\"263\":2,\"272\":1,\"337\":1}}],[\"支持哪些类型的响应消息取决于\",{\"1\":{\"228\":1}}],[\"支持哪些版本的协议\",{\"0\":{\"20\":1}}],[\"支持的参数类型\",{\"0\":{\"204\":1}}],[\"支持将\",{\"1\":{\"143\":1}}],[\"支持混合版本\",{\"1\":{\"23\":1}}],[\"支持分包\",{\"1\":{\"23\":1}}],[\"风格\",{\"1\":{\"23\":1,\"374\":1}}],[\"fff\",{\"1\":{\"408\":1,\"412\":1}}],[\"from\",{\"1\":{\"262\":1,\"267\":1,\"347\":1}}],[\"frame\",{\"0\":{\"39\":1,\"95\":1},\"1\":{\"94\":1}}],[\"framework内置的\",{\"1\":{\"357\":1,\"358\":1}}],[\"framework\",{\"1\":{\"25\":1,\"186\":1,\"356\":2,\"357\":2,\"358\":2,\"363\":2}}],[\"function\",{\"1\":{\"218\":1}}],[\"future\",{\"1\":{\"171\":3}}],[\"flow\",{\"1\":{\"393\":1}}],[\"flowids\",{\"1\":{\"393\":1}}],[\"flowid=2\",{\"1\":{\"225\":1}}],[\"flowid\",{\"1\":{\"156\":1,\"159\":1,\"206\":1,\"208\":1,\"210\":1,\"211\":1,\"231\":2,\"234\":2,\"313\":1,\"316\":1,\"323\":1,\"339\":1,\"376\":1,\"393\":5,\"421\":2}}],[\"fluent\",{\"1\":{\"23\":1,\"374\":1}}],[\"foreach\",{\"1\":{\"243\":1,\"391\":1,\"412\":1}}],[\"forname\",{\"1\":{\"196\":1}}],[\"for\",{\"1\":{\"162\":1,\"175\":1,\"361\":1,\"388\":1,\"393\":1}}],[\"format\",{\"0\":{\"63\":1}}],[\"found\",{\"1\":{\"145\":1,\"196\":1}}],[\"file\",{\"1\":{\"347\":1}}],[\"filter\",{\"0\":{\"78\":1},\"1\":{\"77\":1,\"78\":1,\"384\":6}}],[\"fieldmetadata\",{\"1\":{\"262\":1,\"267\":2}}],[\"field\",{\"1\":{\"252\":3,\"253\":2,\"261\":1,\"266\":1}}],[\"field0xe6\",{\"1\":{\"138\":1}}],[\"field0xe5\",{\"1\":{\"138\":1}}],[\"field0xe4\",{\"1\":{\"138\":1}}],[\"field0xe1\",{\"1\":{\"138\":1}}],[\"field0x31\",{\"1\":{\"138\":1}}],[\"field0x30\",{\"1\":{\"138\":1}}],[\"field0x0001\",{\"1\":{\"138\":1}}],[\"firstsubpackageflowid\",{\"1\":{\"243\":2}}],[\"firstflowidofsubpackage\",{\"1\":{\"241\":2}}],[\"findbyterminalid\",{\"1\":{\"145\":1,\"196\":1,\"197\":1,\"243\":1}}],[\"finally\",{\"1\":{\"417\":1,\"420\":1}}],[\"final\",{\"1\":{\"145\":1,\"148\":1,\"156\":1,\"162\":2,\"165\":3,\"171\":4,\"175\":3,\"186\":3,\"196\":2,\"197\":11,\"211\":7,\"243\":7,\"262\":3,\"267\":5,\"323\":1,\"361\":3,\"388\":1,\"391\":2,\"393\":1,\"403\":4,\"404\":5,\"408\":3,\"412\":3,\"417\":2,\"420\":3,\"423\":4,\"424\":4}}],[\"features\",{\"0\":{\"76\":1},\"1\":{\"74\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":2}}],[\"fasterxml\",{\"1\":{\"79\":2}}],[\"false\",{\"1\":{\"44\":1,\"77\":2,\"79\":1,\"101\":1,\"148\":2,\"161\":1,\"165\":3,\"196\":1,\"197\":1,\"199\":1}}],[\"faq\",{\"0\":{\"17\":1,\"254\":1},\"1\":{\"68\":1}}],[\"attr\",{\"1\":{\"391\":1}}],[\"attributekey\",{\"1\":{\"391\":1}}],[\"attribute\",{\"1\":{\"252\":9,\"253\":8,\"261\":2,\"266\":2}}],[\"a\",{\"1\":{\"388\":1}}],[\"actionable\",{\"1\":{\"347\":1}}],[\"acc开\",{\"1\":{\"132\":1}}],[\"accstatus\",{\"1\":{\"130\":1,\"132\":1}}],[\"accbooleanstatus\",{\"1\":{\"128\":1,\"131\":1,\"316\":1,\"331\":1}}],[\"accintstatus\",{\"1\":{\"128\":1,\"131\":1,\"316\":1,\"331\":1}}],[\"accessors\",{\"1\":{\"128\":1,\"148\":2,\"150\":1,\"156\":1,\"231\":1,\"265\":1,\"268\":1,\"272\":1,\"313\":2,\"316\":1,\"339\":1,\"407\":2,\"411\":2,\"423\":1}}],[\"abstractjt808requestmsgqueuelistener\",{\"1\":{\"387\":1}}],[\"abstractextendedjt808fielddeserializer<object>\",{\"1\":{\"262\":1,\"267\":1}}],[\"abstractmsghandler<locationuploadmsgbody>\",{\"1\":{\"171\":1}}],[\"abstractmsghandler<authrequestmsgbody>\",{\"1\":{\"171\":1}}],[\"abstractmsghandler\",{\"1\":{\"171\":1}}],[\"admin\",{\"1\":{\"231\":1}}],[\"addlistener\",{\"1\":{\"391\":1,\"392\":1}}],[\"addresolver\",{\"1\":{\"142\":5}}],[\"adddefaulthandlermethodargumentresolver\",{\"1\":{\"142\":2}}],[\"afterwrite\",{\"1\":{\"420\":3}}],[\"afterread\",{\"1\":{\"417\":2}}],[\"aftercompletion\",{\"1\":{\"199\":1}}],[\"afieldname\",{\"1\":{\"154\":1}}],[\"argumentcontext\",{\"1\":{\"203\":1}}],[\"args\",{\"1\":{\"192\":2}}],[\"artifactid>\",{\"1\":{\"191\":1,\"357\":3,\"358\":3}}],[\"assertsame\",{\"1\":{\"417\":1,\"420\":1}}],[\"assertequals\",{\"1\":{\"403\":2,\"404\":9,\"408\":1,\"412\":2,\"417\":3,\"420\":3,\"423\":4,\"424\":6}}],[\"assertmsg\",{\"1\":{\"403\":2}}],[\"assert\",{\"1\":{\"141\":4,\"159\":4}}],[\"application\",{\"1\":{\"192\":1,\"369\":1}}],[\"applicationcontextaware\",{\"1\":{\"107\":1,\"245\":1}}],[\"appendstring\",{\"1\":{\"165\":1}}],[\"appendbyte\",{\"1\":{\"165\":1}}],[\"appendbytes\",{\"1\":{\"165\":4}}],[\"appendword\",{\"1\":{\"165\":3}}],[\"api\",{\"1\":{\"23\":1,\"374\":1}}],[\"aware\",{\"1\":{\"107\":1,\"245\":1}}],[\"aware接口\",{\"0\":{\"107\":1,\"245\":1},\"1\":{\"68\":1,\"72\":1,\"106\":1}}],[\"availableprocessors\",{\"1\":{\"59\":1,\"84\":1}}],[\"author\",{\"1\":{\"223\":1}}],[\"authmsgv2013\",{\"1\":{\"210\":2}}],[\"authmsg\",{\"1\":{\"171\":1}}],[\"authmsghandler\",{\"1\":{\"114\":1,\"162\":3,\"171\":1}}],[\"auth\",{\"1\":{\"155\":1,\"171\":7,\"175\":1,\"176\":2,\"361\":1,\"362\":2}}],[\"authcode2019\",{\"1\":{\"231\":1,\"323\":1}}],[\"authcode2013debugdemo\",{\"1\":{\"210\":1}}],[\"authcodexxx\",{\"1\":{\"206\":1,\"208\":1}}],[\"authcodevalidator\",{\"1\":{\"162\":2,\"171\":1,\"193\":1}}],[\"authcode\",{\"1\":{\"155\":1,\"162\":5,\"171\":3,\"231\":1,\"234\":1,\"339\":1,\"421\":1}}],[\"authvalidator\",{\"0\":{\"162\":1},\"1\":{\"68\":1,\"164\":1}}],[\"authrequestmsgbodyconverter\",{\"1\":{\"113\":1}}],[\"authrequestmsgbody\",{\"1\":{\"47\":1,\"155\":1,\"162\":2,\"171\":2}}],[\"autoconfigure\",{\"1\":{\"344\":1,\"347\":2,\"352\":1}}],[\"autowired\",{\"1\":{\"145\":1,\"148\":1}}],[\"auto\",{\"1\":{\"38\":1,\"197\":1,\"205\":1,\"322\":1}}],[\"always\",{\"1\":{\"423\":2,\"424\":2}}],[\"alarmstatus\",{\"1\":{\"403\":4}}],[\"alarmflag\",{\"1\":{\"128\":1,\"316\":1}}],[\"all\",{\"1\":{\"97\":1,\"101\":1}}],[\"allideltime\",{\"1\":{\"44\":1,\"101\":1}}],[\"aliyun\",{\"1\":{\"347\":6}}],[\"alive\",{\"0\":{\"61\":1}}],[\"aliasfor\",{\"1\":{\"252\":9,\"253\":8,\"255\":1,\"261\":2,\"266\":2}}],[\"alias\",{\"1\":{\"27\":1,\"256\":1,\"318\":1}}],[\"answer\",{\"1\":{\"255\":1,\"256\":1}}],[\"anotherme17\",{\"1\":{\"181\":2}}],[\"another17\",{\"1\":{\"8\":1}}],[\"annotationdecodercontext\",{\"1\":{\"327\":1}}],[\"annotationhandler01\",{\"1\":{\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1}}],[\"annotation\",{\"1\":{\"1\":1,\"116\":1,\"126\":1,\"138\":1,\"139\":1,\"143\":1,\"144\":1,\"148\":1,\"252\":9,\"253\":8,\"261\":2,\"263\":1,\"266\":2,\"267\":2,\"268\":1,\"384\":2,\"387\":1}}],[\"或者可以直接调用\",{\"1\":{\"392\":1}}],[\"或者\",{\"1\":{\"341\":1,\"381\":1,\"423\":1,\"424\":1}}],[\"或其他类型\",{\"1\":{\"265\":1}}],[\"或可以转换为\",{\"1\":{\"220\":1}}],[\"或由\",{\"1\":{\"220\":1}}],[\"或\",{\"1\":{\"20\":1,\"27\":1,\"129\":1,\"151\":1,\"265\":1,\"268\":1,\"318\":1,\"344\":1,\"381\":1,\"392\":1,\"411\":2}}],[\"不满足需求\",{\"1\":{\"381\":1}}],[\"不符合要求\",{\"1\":{\"381\":2}}],[\"不包含分隔符\",{\"1\":{\"380\":2,\"381\":1}}],[\"不包括\",{\"1\":{\"101\":1}}],[\"不推荐\",{\"1\":{\"353\":1}}],[\"不建议自己单独安装\",{\"1\":{\"346\":1}}],[\"不建议对\",{\"1\":{\"344\":1}}],[\"不要求连续\",{\"1\":{\"326\":1,\"337\":1}}],[\"不要直接使用\",{\"1\":{\"91\":1}}],[\"不需要手动\",{\"1\":{\"406\":1}}],[\"不需要\",{\"1\":{\"262\":1,\"267\":1}}],[\"不过你可以扩展自定义注解实现这个转换\",{\"1\":{\"260\":1}}],[\"不过用来\",{\"1\":{\"162\":1}}],[\"不一定要手动new一个handler注册\",{\"1\":{\"172\":1}}],[\"不用转义\",{\"1\":{\"171\":1}}],[\"不用\",{\"1\":{\"162\":1}}],[\"不给客户端回复数据\",{\"0\":{\"157\":1}}],[\"不支持\",{\"1\":{\"156\":1,\"159\":1,\"423\":1,\"424\":1}}],[\"不会改变内部\",{\"1\":{\"417\":2,\"420\":1}}],[\"不会自增\",{\"1\":{\"393\":1}}],[\"不会影响到你阅读本示例\",{\"1\":{\"126\":1}}],[\"不会回复\",{\"1\":{\"4\":1}}],[\"不便全部展示出来\",{\"1\":{\"126\":1}}],[\"不是标准完整的位置上传报文\",{\"1\":{\"126\":1,\"312\":1,\"315\":1}}],[\"不再调用处理器方法\",{\"1\":{\"199\":1}}],[\"不再增加新特性\",{\"1\":{\"67\":3,\"71\":1}}],[\"不再依赖\",{\"1\":{\"23\":1}}],[\"不同\",{\"1\":{\"407\":1,\"411\":1}}],[\"不同版本可能有改动\",{\"1\":{\"27\":1,\"318\":1}}],[\"不同终端\",{\"1\":{\"20\":1}}],[\"不向下兼容\",{\"1\":{\"23\":1}}],[\"混合使用问题\",{\"1\":{\"256\":1}}],[\"混合使用\",{\"0\":{\"256\":1}}],[\"混合\",{\"1\":{\"20\":1}}],[\"开\",{\"1\":{\"130\":1}}],[\"开头的所有配置项在运行时读取到的最终值\",{\"1\":{\"79\":1}}],[\"开始可以不再指定\",{\"1\":{\"313\":3,\"316\":3}}],[\"开始引入了注解别名机制\",{\"1\":{\"251\":1}}],[\"开始\",{\"1\":{\"30\":1,\"34\":1,\"143\":1,\"164\":1,\"188\":1,\"265\":1,\"328\":1,\"331\":1,\"351\":1,\"355\":1,\"397\":1,\"404\":1}}],[\"开始循环累加\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"开始加入的\",{\"1\":{\"27\":1,\"318\":1}}],[\"开始支持\",{\"1\":{\"20\":1,\"21\":1,\"274\":3,\"275\":3,\"277\":2,\"278\":2,\"280\":3,\"281\":3,\"283\":3,\"284\":3,\"286\":2,\"287\":2,\"289\":2,\"290\":2,\"293\":3,\"294\":3,\"296\":2,\"297\":2,\"299\":3,\"300\":3,\"302\":3,\"303\":3,\"305\":2,\"306\":2,\"308\":2,\"309\":2,\"316\":3,\"329\":1,\"344\":1}}],[\"开发中的\",{\"1\":{\"203\":1}}],[\"开发者\",{\"0\":{\"8\":1}}],[\"开发时用来debug的项目\",{\"1\":{\"1\":2}}],[\"章节目录\",{\"0\":{\"18\":1,\"26\":1,\"68\":1,\"72\":1}}],[\"www\",{\"1\":{\"408\":1,\"412\":1}}],[\"writable\",{\"1\":{\"420\":2}}],[\"write\",{\"1\":{\"420\":1}}],[\"writedword\",{\"1\":{\"417\":1,\"420\":1}}],[\"writebcd\",{\"1\":{\"417\":1,\"420\":1}}],[\"writebyte\",{\"1\":{\"206\":1,\"208\":1,\"234\":1,\"421\":1,\"424\":1}}],[\"writebytes\",{\"1\":{\"196\":1}}],[\"writestring\",{\"1\":{\"206\":1,\"208\":1,\"234\":1,\"420\":1,\"421\":1}}],[\"writeword\",{\"1\":{\"206\":1,\"208\":1,\"234\":1,\"421\":1,\"424\":2}}],[\"writeint\",{\"1\":{\"197\":2}}],[\"writeandflush\",{\"1\":{\"171\":1}}],[\"writer\",{\"1\":{\"97\":1,\"101\":1,\"234\":2,\"420\":2,\"421\":2,\"424\":2}}],[\"writeridletime\",{\"1\":{\"44\":1,\"101\":1}}],[\"wrapper\",{\"1\":{\"346\":1}}],[\"webfilter\",{\"1\":{\"384\":1}}],[\"webflux\",{\"1\":{\"12\":1,\"218\":2,\"320\":1,\"321\":1,\"324\":1,\"333\":1,\"378\":1}}],[\"webmvc\",{\"1\":{\"320\":1,\"321\":1,\"324\":1,\"333\":1}}],[\"web\",{\"1\":{\"218\":1,\"378\":1,\"384\":1}}],[\"warn\",{\"1\":{\"176\":1}}],[\"will\",{\"1\":{\"145\":1,\"157\":1,\"196\":1,\"347\":1}}],[\"withflowid\",{\"1\":{\"165\":2}}],[\"withterminalid\",{\"1\":{\"165\":2}}],[\"withreversedbit14andbit15\",{\"1\":{\"165\":2}}],[\"withsubpackage\",{\"1\":{\"165\":2}}],[\"withencryptiontype\",{\"1\":{\"165\":2}}],[\"withmsgbodypropsspec\",{\"1\":{\"165\":2}}],[\"withmsgid\",{\"1\":{\"165\":2}}],[\"with\",{\"1\":{\"145\":1,\"162\":1,\"196\":1}}],[\"windows端调试工具\",{\"0\":{\"16\":1}}],[\"workqueue\",{\"1\":{\"62\":1}}],[\"workthreadcount\",{\"1\":{\"43\":1,\"100\":1}}],[\"workergroup=new\",{\"1\":{\"100\":1}}],[\"workergroup\",{\"1\":{\"43\":1}}],[\"worker\",{\"0\":{\"43\":1,\"100\":1},\"1\":{\"97\":1}}],[\"wordvalue\",{\"1\":{\"404\":2}}],[\"word\",{\"0\":{\"279\":1,\"298\":1},\"1\":{\"27\":1,\"30\":5,\"34\":5,\"128\":3,\"151\":1,\"156\":2,\"159\":4,\"165\":2,\"185\":1,\"186\":1,\"188\":5,\"210\":2,\"231\":2,\"234\":1,\"252\":2,\"253\":2,\"269\":1,\"280\":6,\"281\":6,\"299\":6,\"300\":6,\"313\":9,\"316\":9,\"328\":5,\"337\":1,\"339\":2,\"376\":6,\"408\":1,\"411\":1,\"412\":1,\"418\":2,\"421\":1,\"423\":4,\"424\":2}}],[\"十六进制格式\",{\"1\":{\"127\":1,\"194\":3,\"372\":1}}],[\"十六进制报文\",{\"0\":{\"127\":1}}],[\"十六进制\",{\"1\":{\"14\":1}}],[\"使用jt808bytewriter手动编码响应体\",{\"0\":{\"421\":1}}],[\"使用jt808bytereader来解析请求体\",{\"0\":{\"418\":1}}],[\"使用示例\",{\"0\":{\"388\":1}}],[\"使用内置类型解析\",{\"1\":{\"362\":1}}],[\"使用内置解析器\",{\"1\":{\"176\":1}}],[\"使用3\",{\"1\":{\"358\":1}}],[\"使用2\",{\"1\":{\"357\":1}}],[\"使用自定义注解\",{\"0\":{\"263\":1,\"268\":1}}],[\"使用方式\",{\"1\":{\"219\":1}}],[\"使用方法也很简单\",{\"1\":{\"143\":1}}],[\"使用发包工具测试鉴权消息\",{\"0\":{\"194\":1}}],[\"使用commandsender下发\",{\"0\":{\"146\":1}}],[\"使用转换器除以10^6转为double类型\",{\"1\":{\"128\":2,\"135\":1}}],[\"使用基于注解的\",{\"1\":{\"46\":1,\"51\":1,\"55\":1}}],[\"使用\",{\"0\":{\"131\":1,\"132\":1,\"137\":1,\"138\":1},\"1\":{\"14\":1,\"23\":1,\"82\":1,\"167\":1,\"169\":1,\"328\":1,\"347\":1,\"367\":1,\"368\":1,\"399\":1,\"400\":1}}],[\"mutable\",{\"1\":{\"403\":1,\"404\":6}}],[\"md\",{\"1\":{\"347\":2}}],[\"module\",{\"1\":{\"344\":1,\"352\":1,\"397\":1}}],[\"myrequestsubpackagestorage\",{\"1\":{\"394\":1}}],[\"myresponsesubpackagestorage\",{\"1\":{\"394\":1}}],[\"mysession\",{\"1\":{\"390\":1,\"391\":3}}],[\"mysessionmanager\",{\"1\":{\"179\":2,\"391\":5}}],[\"myjt808requestsubpackagestorage\",{\"1\":{\"394\":1}}],[\"myjt808responsesubpackagestorage\",{\"1\":{\"394\":1}}],[\"myjt808sessioneventlistener02\",{\"1\":{\"392\":1}}],[\"myjt808sessioneventlistener01\",{\"1\":{\"392\":1}}],[\"myjt808sessionmanagereventlistener\",{\"1\":{\"180\":2}}],[\"myjt808config\",{\"1\":{\"362\":2,\"380\":1,\"381\":1,\"382\":1,\"391\":1,\"392\":1,\"393\":1,\"394\":1}}],[\"mymsgtype\",{\"1\":{\"361\":4,\"362\":1}}],[\"myextendedjt808fielddeserializerbcdtime\",{\"1\":{\"266\":1,\"267\":1}}],[\"mybatis\",{\"1\":{\"150\":1,\"151\":1}}],[\"mergedrequest\",{\"1\":{\"225\":1}}],[\"meterregistry\",{\"1\":{\"388\":7}}],[\"methodparameter\",{\"1\":{\"203\":4}}],[\"metadata\",{\"1\":{\"110\":1,\"141\":3,\"159\":3,\"167\":2,\"169\":1,\"171\":9,\"181\":2}}],[\"messagebuilder\",{\"1\":{\"165\":2}}],[\"message\",{\"0\":{\"80\":1}}],[\"msglength\",{\"1\":{\"313\":3,\"407\":2,\"411\":2}}],[\"msg0704item\",{\"1\":{\"313\":1}}],[\"msgdatatype\",{\"1\":{\"186\":3,\"231\":3,\"252\":3,\"253\":2,\"261\":1,\"262\":4,\"266\":1,\"267\":4,\"335\":1,\"339\":3,\"376\":5,\"407\":5}}],[\"msgdispatcher\",{\"0\":{\"120\":1}}],[\"msgheaderspecbuilder\",{\"1\":{\"165\":2}}],[\"msghandlermapping\",{\"1\":{\"172\":1}}],[\"msghandler<authrequestmsgbody>\",{\"1\":{\"171\":1}}],[\"msghandler<t\",{\"1\":{\"169\":1}}],[\"msghandler注入到spring容器\",{\"0\":{\"143\":1}}],[\"msghandler\",{\"1\":{\"52\":1,\"53\":1,\"65\":1,\"111\":3,\"114\":1,\"116\":2,\"122\":2,\"139\":1,\"140\":1,\"141\":2,\"143\":4,\"156\":1,\"157\":2,\"158\":1,\"169\":5,\"171\":1}}],[\"msghandler请参考这里\",{\"1\":{\"51\":1}}],[\"msgescapeexception\",{\"1\":{\"163\":2}}],[\"msgbodylength\",{\"1\":{\"313\":2,\"316\":3,\"326\":1,\"327\":1,\"328\":1,\"418\":1}}],[\"msgbodylength=86\",{\"1\":{\"225\":1}}],[\"msgbodyprops=msgbodyprops\",{\"1\":{\"225\":1}}],[\"msgbodypropsspecbuilder\",{\"1\":{\"165\":4}}],[\"msgbodybuilder\",{\"1\":{\"165\":2}}],[\"msgbody\",{\"1\":{\"141\":3,\"155\":2,\"159\":3}}],[\"msgid=256\",{\"1\":{\"225\":2}}],[\"msgid\",{\"1\":{\"138\":8,\"148\":4,\"159\":1,\"160\":1,\"175\":7,\"181\":1,\"206\":1,\"208\":1,\"231\":1,\"234\":1,\"313\":1,\"316\":1,\"334\":1,\"335\":1,\"339\":1,\"361\":10,\"362\":4,\"407\":5,\"408\":1,\"411\":5,\"412\":1,\"421\":1,\"423\":4,\"424\":1}}],[\"msgtype>\",{\"1\":{\"361\":1}}],[\"msgtype=builtinmsgtype\",{\"1\":{\"225\":1}}],[\"msgtypeparser\",{\"1\":{\"176\":2}}],[\"msgtype\",{\"0\":{\"361\":1},\"1\":{\"128\":1,\"132\":1,\"141\":1,\"150\":2,\"155\":1,\"156\":3,\"159\":1,\"174\":1,\"175\":1,\"176\":3,\"197\":1,\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":4,\"216\":2,\"231\":1,\"243\":1,\"272\":1,\"313\":1,\"316\":1,\"322\":1,\"323\":1,\"361\":6,\"362\":1,\"375\":2,\"376\":1}}],[\"msgcontent\",{\"1\":{\"148\":5,\"407\":8,\"411\":8}}],[\"msgconsumer\",{\"0\":{\"121\":1}}],[\"msgconvertermapping\",{\"1\":{\"167\":2}}],[\"msgconverter\",{\"1\":{\"65\":1}}],[\"msg\",{\"0\":{\"49\":1,\"53\":1,\"58\":1,\"83\":1},\"1\":{\"27\":2,\"36\":1,\"63\":1,\"74\":1,\"80\":1,\"81\":2,\"82\":2,\"86\":3,\"148\":1,\"165\":1,\"196\":1,\"243\":1,\"263\":1,\"268\":1,\"318\":2,\"403\":5,\"408\":2,\"412\":2}}],[\"manufacturerid\",{\"1\":{\"328\":1,\"418\":2}}],[\"main\",{\"1\":{\"192\":1}}],[\"maven版示例项目\",{\"1\":{\"363\":1}}],[\"maven版示例\",{\"0\":{\"363\":1}}],[\"mavenrepo\",{\"1\":{\"347\":6}}],[\"maven\",{\"1\":{\"191\":1,\"347\":1,\"363\":3}}],[\"map\",{\"1\":{\"243\":1}}],[\"map<integer\",{\"1\":{\"175\":1,\"361\":1}}],[\"mappings\",{\"1\":{\"361\":3}}],[\"mapping\",{\"1\":{\"167\":3,\"172\":3,\"175\":3}}],[\"maxpackagesize\",{\"1\":{\"231\":1,\"237\":4,\"238\":3,\"334\":1}}],[\"maximumspringbootbomversion=3\",{\"1\":{\"345\":1}}],[\"maximumspringbootbomversion\",{\"1\":{\"345\":2}}],[\"maximumjavaversion=17\",{\"1\":{\"344\":1}}],[\"maximumjavaversion\",{\"1\":{\"344\":3}}],[\"maximumpoolsize\",{\"1\":{\"60\":1}}],[\"maximum\",{\"0\":{\"60\":1},\"1\":{\"104\":1,\"105\":1}}],[\"maxframelength\",{\"1\":{\"39\":1,\"95\":1}}],[\"max\",{\"0\":{\"39\":1,\"85\":1,\"95\":1},\"1\":{\"81\":1,\"94\":1,\"237\":3,\"238\":2,\"376\":1,\"393\":1}}],[\"mac下的socket调试工具\",{\"1\":{\"14\":1}}],[\"mac端调试工具\",{\"0\":{\"14\":1}}],[\"matrixy\",{\"1\":{\"10\":2}}],[\"mvc\",{\"1\":{\"12\":1}}],[\"后缀\",{\"1\":{\"397\":1,\"399\":2}}],[\"后续版本会以\",{\"1\":{\"351\":1}}],[\"后续版本升级会实现\",{\"1\":{\"226\":1}}],[\"后续所有解析操作都要手动进行\",{\"1\":{\"203\":1}}],[\"后端\",{\"0\":{\"12\":1}}],[\"后期可能删除\",{\"1\":{\"1\":1}}],[\"后期可能改名为\",{\"1\":{\"1\":1}}],[\"ls\",{\"1\":{\"347\":1}}],[\"lword\",{\"1\":{\"269\":1}}],[\"li>\",{\"1\":{\"199\":6,\"223\":3,\"387\":2}}],[\"link\",{\"1\":{\"199\":6,\"223\":4,\"361\":1,\"376\":9,\"380\":2,\"381\":6,\"382\":1,\"384\":2,\"387\":3,\"392\":6}}],[\"linux端调试工具\",{\"0\":{\"15\":1}}],[\"listener2\",{\"1\":{\"392\":1}}],[\"listener1\",{\"1\":{\"392\":1}}],[\"listener\",{\"1\":{\"392\":1}}],[\"listeners\",{\"1\":{\"391\":2}}],[\"lists\",{\"1\":{\"148\":1}}],[\"list<builtinmsg8103alias\",{\"1\":{\"412\":1}}],[\"list<builtinmsg8103\",{\"1\":{\"408\":1}}],[\"list<extraitem>\",{\"1\":{\"316\":1}}],[\"list<extrainfoitem>\",{\"1\":{\"137\":1}}],[\"list<msg0704item>\",{\"1\":{\"313\":1}}],[\"list<paramitem>\",{\"1\":{\"148\":1,\"335\":1,\"407\":1,\"411\":1}}],[\"list<respterminalsettings\",{\"1\":{\"148\":1,\"197\":1}}],[\"list<integer>\",{\"1\":{\"138\":1,\"243\":1}}],[\"list\",{\"1\":{\"136\":3,\"137\":1,\"138\":1,\"197\":1,\"313\":2,\"316\":3,\"335\":1,\"407\":1,\"408\":1,\"411\":1,\"412\":1}}],[\"lngtype\",{\"1\":{\"130\":1,\"132\":1}}],[\"lngbystartindexmethod\",{\"1\":{\"128\":1}}],[\"lng\",{\"1\":{\"128\":1,\"251\":2,\"260\":1,\"263\":1,\"316\":1}}],[\"lnglatreqmsgfieldconverter\",{\"1\":{\"128\":3,\"135\":2}}],[\"last\",{\"1\":{\"393\":2}}],[\"lastcommunicatetimestamp\",{\"1\":{\"377\":3,\"391\":1}}],[\"lang\",{\"1\":{\"252\":5,\"253\":4,\"261\":1,\"266\":1,\"402\":1}}],[\"language\",{\"1\":{\"23\":1}}],[\"lat\",{\"1\":{\"128\":1,\"135\":1,\"251\":2,\"260\":1,\"263\":1,\"316\":1}}],[\"lattype\",{\"1\":{\"128\":1,\"131\":1,\"316\":1,\"331\":1}}],[\"lombok\",{\"1\":{\"348\":1,\"349\":1}}],[\"load\",{\"1\":{\"347\":1}}],[\"localdatetime\",{\"1\":{\"265\":1,\"267\":2,\"268\":2,\"272\":2,\"316\":1}}],[\"locationbatchupload\",{\"1\":{\"313\":1}}],[\"locationbatchuploadmsgv2019\",{\"1\":{\"313\":1}}],[\"locationmsghandler\",{\"1\":{\"313\":1,\"316\":1}}],[\"locationinfo\",{\"1\":{\"313\":1}}],[\"locationinfouploadmsghandler\",{\"1\":{\"171\":1,\"172\":1}}],[\"location\",{\"1\":{\"141\":2,\"159\":3,\"167\":1,\"171\":1,\"172\":1,\"175\":1}}],[\"locationupload\",{\"1\":{\"316\":1}}],[\"locationuploadmsgv2019\",{\"1\":{\"313\":1,\"316\":1}}],[\"locationuploadmsgbodyconverter2\",{\"1\":{\"167\":2}}],[\"locationuploadmsgbody\",{\"1\":{\"128\":1,\"132\":1,\"141\":1,\"150\":1,\"167\":2,\"171\":1}}],[\"locationuploadreqmsgv2019aliastest\",{\"1\":{\"272\":1}}],[\"locationuploadrequestmsgbody\",{\"1\":{\"159\":1}}],[\"locationuploadstatus\",{\"1\":{\"132\":2}}],[\"longfielddeserializer\",{\"1\":{\"262\":3}}],[\"long\",{\"1\":{\"148\":1,\"186\":2,\"251\":4,\"260\":4,\"262\":4,\"263\":2,\"269\":1,\"272\":3,\"274\":2,\"275\":2,\"280\":2,\"281\":2,\"283\":2,\"284\":2,\"293\":2,\"294\":2,\"299\":2,\"300\":2,\"302\":2,\"303\":2,\"316\":3,\"329\":1,\"377\":2,\"402\":1,\"404\":2,\"407\":2,\"411\":2}}],[\"log\",{\"1\":{\"124\":1,\"128\":1,\"141\":1,\"148\":1,\"155\":1,\"159\":1,\"162\":1,\"171\":3,\"180\":1,\"197\":1,\"210\":1,\"211\":1,\"231\":1,\"243\":1,\"313\":1,\"316\":1,\"323\":1,\"418\":7}}],[\"logging\",{\"0\":{\"92\":1},\"1\":{\"88\":1,\"92\":1,\"192\":1,\"225\":1,\"236\":1,\"369\":1}}],[\"level\",{\"1\":{\"88\":1,\"92\":1,\"192\":2,\"225\":3,\"236\":1,\"369\":4}}],[\"lengthmethod\",{\"1\":{\"252\":2,\"326\":1}}],[\"lengthexpression\",{\"1\":{\"252\":2,\"313\":4,\"316\":5,\"326\":1,\"327\":1,\"328\":1}}],[\"length\",{\"0\":{\"39\":1,\"95\":1},\"1\":{\"94\":1,\"128\":1,\"130\":1,\"135\":1,\"136\":1,\"137\":1,\"148\":1,\"151\":2,\"154\":1,\"175\":1,\"186\":1,\"251\":8,\"252\":2,\"262\":2,\"265\":1,\"266\":1,\"267\":2,\"272\":2,\"277\":5,\"286\":3,\"289\":3,\"296\":5,\"305\":3,\"308\":3,\"316\":2,\"326\":3,\"328\":3,\"361\":1,\"407\":1,\"411\":1}}],[\"l11\",{\"1\":{\"10\":1}}],[\"ldming\",{\"1\":{\"10\":1}}],[\"n\",{\"1\":{\"185\":4,\"186\":1,\"313\":1,\"316\":1,\"328\":1,\"418\":1}}],[\"nullable\",{\"1\":{\"180\":1,\"199\":3,\"392\":3}}],[\"null\",{\"1\":{\"176\":1,\"180\":1,\"391\":1}}],[\"numbers\",{\"1\":{\"130\":2}}],[\"nio\",{\"1\":{\"165\":1}}],[\"nioeventloopgroup\",{\"1\":{\"42\":1,\"43\":1,\"99\":1,\"100\":1}}],[\"noargsconstructor\",{\"1\":{\"407\":1,\"411\":1}}],[\"no\",{\"1\":{\"157\":1,\"196\":1,\"224\":1,\"242\":1}}],[\"not\",{\"1\":{\"145\":1}}],[\"none\",{\"1\":{\"104\":1,\"105\":1,\"224\":4}}],[\"name\",{\"0\":{\"63\":1,\"86\":1},\"1\":{\"81\":1,\"148\":2,\"191\":1,\"196\":1,\"197\":1,\"388\":1}}],[\"nalupps\",{\"1\":{\"10\":1}}],[\"nextflowid\",{\"1\":{\"197\":3,\"234\":1,\"393\":1,\"421\":1}}],[\"needvalidate\",{\"1\":{\"181\":1}}],[\"nestedfield\",{\"1\":{\"138\":1}}],[\"nestedfieldmapping\",{\"1\":{\"138\":8}}],[\"newbytebufbuilder\",{\"1\":{\"424\":1}}],[\"newbuilder\",{\"1\":{\"234\":1,\"421\":1}}],[\"newentitybuilder\",{\"1\":{\"423\":1}}],[\"newhashset\",{\"1\":{\"169\":1,\"171\":1,\"186\":7}}],[\"newarraylist\",{\"1\":{\"148\":1}}],[\"new\",{\"1\":{\"42\":1,\"43\":1,\"142\":5,\"145\":1,\"148\":2,\"156\":2,\"159\":1,\"163\":1,\"167\":2,\"171\":1,\"172\":1,\"175\":1,\"177\":1,\"180\":1,\"181\":1,\"196\":1,\"197\":3,\"210\":1,\"231\":1,\"262\":4,\"267\":4,\"323\":1,\"361\":1,\"380\":1,\"381\":1,\"382\":1,\"391\":2,\"392\":2,\"393\":2,\"394\":4,\"408\":7,\"412\":7,\"423\":1}}],[\"netty相关配置需要继承\",{\"1\":{\"177\":1}}],[\"netty相关配置\",{\"1\":{\"164\":1}}],[\"netty相关\",{\"0\":{\"177\":1,\"385\":1},\"1\":{\"68\":1,\"72\":1}}],[\"netty\",{\"1\":{\"2\":1,\"12\":1,\"23\":1,\"39\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"80\":1,\"95\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"164\":1,\"169\":1,\"196\":1,\"251\":2,\"385\":1}}],[\"roundingmode\",{\"1\":{\"262\":2}}],[\"routerfunction\",{\"1\":{\"218\":2}}],[\"rootobject\",{\"1\":{\"327\":1,\"338\":1}}],[\"root\",{\"1\":{\"88\":1,\"92\":1,\"225\":1,\"369\":1}}],[\"rawbytebuf\",{\"1\":{\"211\":1,\"223\":1,\"375\":1}}],[\"rawbytes\",{\"1\":{\"137\":1}}],[\"rawtypes\",{\"1\":{\"148\":1}}],[\"run\",{\"1\":{\"192\":1}}],[\"runtime\",{\"1\":{\"59\":1,\"84\":1,\"252\":3,\"253\":2,\"261\":1,\"266\":1}}],[\"rust版本的音频库\",{\"1\":{\"10\":1}}],[\"rsa\",{\"1\":{\"30\":1,\"34\":1,\"188\":1}}],[\"registry\",{\"1\":{\"381\":2}}],[\"registerconverter\",{\"1\":{\"167\":1,\"172\":1}}],[\"register\",{\"0\":{\"49\":1,\"53\":1,\"57\":1},\"1\":{\"165\":1,\"219\":1,\"234\":2,\"323\":1,\"361\":1,\"388\":1,\"421\":1}}],[\"refcnt\",{\"1\":{\"412\":1,\"417\":2,\"420\":2,\"423\":2,\"424\":6}}],[\"refresh\",{\"1\":{\"349\":1}}],[\"reflectionbasedrequestmsgbodyconverter\",{\"1\":{\"125\":1}}],[\"repo\",{\"1\":{\"347\":2}}],[\"replymsgtype\",{\"1\":{\"156\":1}}],[\"replymsgid\",{\"1\":{\"156\":1,\"159\":1}}],[\"replyfor\",{\"1\":{\"156\":4}}],[\"replyflowid\",{\"1\":{\"156\":5,\"159\":1}}],[\"reply\",{\"1\":{\"148\":2,\"156\":1,\"197\":2,\"206\":1,\"208\":1,\"234\":1,\"421\":1,\"423\":1,\"424\":1}}],[\"reversedbit15inheader\",{\"1\":{\"334\":1}}],[\"re\",{\"1\":{\"243\":1}}],[\"retain\",{\"1\":{\"413\":2}}],[\"retentionpolicy\",{\"1\":{\"252\":3,\"253\":2,\"261\":1,\"266\":1}}],[\"retention\",{\"1\":{\"252\":3,\"253\":2,\"261\":1,\"266\":1}}],[\"retransmissionhandler\",{\"1\":{\"243\":2}}],[\"return\",{\"1\":{\"116\":2,\"128\":1,\"135\":1,\"141\":1,\"148\":1,\"151\":1,\"155\":1,\"156\":4,\"159\":2,\"162\":2,\"163\":3,\"167\":1,\"169\":1,\"171\":7,\"175\":1,\"176\":2,\"177\":1,\"179\":1,\"180\":2,\"181\":3,\"197\":1,\"199\":2,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"216\":2,\"219\":3,\"231\":1,\"234\":3,\"237\":3,\"238\":1,\"241\":1,\"262\":3,\"267\":3,\"313\":1,\"316\":1,\"323\":1,\"361\":5,\"362\":1,\"375\":6,\"377\":4,\"380\":4,\"381\":2,\"382\":2,\"387\":6,\"388\":1,\"390\":1,\"391\":4,\"392\":2,\"393\":8,\"394\":2,\"421\":1,\"423\":2,\"424\":2}}],[\"readbyte\",{\"1\":{\"418\":1}}],[\"readbcd\",{\"1\":{\"417\":1}}],[\"readstring\",{\"1\":{\"418\":4}}],[\"readunsignedword\",{\"1\":{\"418\":2}}],[\"readunsigneddword\",{\"1\":{\"417\":1}}],[\"readable\",{\"1\":{\"417\":2}}],[\"read\",{\"1\":{\"417\":1}}],[\"readme\",{\"1\":{\"347\":1}}],[\"readerindex\",{\"1\":{\"251\":2}}],[\"readeridletime\",{\"1\":{\"44\":1,\"101\":1}}],[\"reader\",{\"1\":{\"97\":1,\"101\":1}}],[\"reactive\",{\"1\":{\"218\":1}}],[\"receive\",{\"1\":{\"171\":1}}],[\"release<\",{\"1\":{\"191\":1}}],[\"release\",{\"1\":{\"143\":1,\"164\":1,\"191\":1,\"347\":6,\"406\":1,\"413\":2,\"417\":1,\"420\":1,\"423\":1,\"424\":1}}],[\"resetrange\",{\"1\":{\"404\":1}}],[\"reset\",{\"1\":{\"404\":2}}],[\"resolveargument\",{\"1\":{\"203\":1}}],[\"resolvers\",{\"1\":{\"142\":6}}],[\"result\",{\"1\":{\"156\":3,\"159\":1,\"162\":1,\"171\":3,\"231\":2,\"337\":1,\"339\":2,\"423\":6,\"424\":5}}],[\"restcontroller\",{\"1\":{\"148\":1,\"196\":1,\"197\":1,\"215\":1,\"320\":1}}],[\"respmsgid\",{\"1\":{\"148\":1,\"159\":1,\"160\":1}}],[\"respmsgbody\",{\"1\":{\"141\":1,\"155\":1,\"156\":3,\"158\":1,\"171\":3}}],[\"respterminalsettings的类注解上指定了下发类型\",{\"1\":{\"148\":1}}],[\"respterminalsettings\",{\"1\":{\"148\":4,\"197\":4,\"335\":1}}],[\"responsesubpackagestorage\",{\"1\":{\"243\":5}}],[\"responsefieldalias\",{\"0\":{\"253\":1},\"1\":{\"251\":2,\"253\":2,\"256\":1,\"269\":1,\"275\":7,\"278\":5,\"281\":6,\"284\":5,\"287\":3,\"290\":3,\"402\":1,\"411\":6}}],[\"responsefield\",{\"0\":{\"336\":1},\"1\":{\"231\":3,\"251\":2,\"253\":11,\"255\":3,\"256\":2,\"269\":1,\"294\":7,\"297\":5,\"300\":6,\"303\":5,\"306\":3,\"309\":3,\"335\":1,\"339\":3,\"402\":1,\"407\":5,\"411\":1,\"423\":3}}],[\"responsebody\",{\"1\":{\"230\":1,\"333\":1}}],[\"response\",{\"0\":{\"105\":1},\"1\":{\"74\":1,\"88\":1,\"92\":1,\"105\":3,\"206\":2,\"207\":1,\"208\":1,\"209\":1,\"236\":2,\"242\":3,\"369\":1,\"378\":1,\"382\":2,\"387\":2}}],[\"resp\",{\"1\":{\"27\":1,\"148\":5,\"197\":4,\"318\":1}}],[\"red\",{\"1\":{\"384\":1}}],[\"redisjt808responsesubpackagestorage\",{\"1\":{\"242\":1}}],[\"redispatch\",{\"1\":{\"225\":1}}],[\"redis\",{\"1\":{\"105\":3,\"242\":1}}],[\"redknotmiaoyuqiao\",{\"1\":{\"10\":1}}],[\"required\",{\"1\":{\"148\":2,\"196\":1,\"197\":1}}],[\"requestbody\",{\"1\":{\"324\":1}}],[\"requestentity\",{\"1\":{\"211\":5}}],[\"requestfields\",{\"1\":{\"272\":1}}],[\"requestfieldalias\",{\"0\":{\"252\":1},\"1\":{\"251\":6,\"252\":2,\"256\":1,\"260\":2,\"263\":1,\"265\":1,\"268\":1,\"269\":1,\"272\":5,\"274\":7,\"277\":5,\"280\":6,\"283\":5,\"286\":3,\"289\":3,\"313\":5,\"316\":13,\"402\":1}}],[\"requestfield\",{\"0\":{\"325\":1},\"1\":{\"210\":1,\"251\":7,\"252\":13,\"255\":3,\"256\":2,\"261\":3,\"266\":3,\"269\":1,\"272\":2,\"293\":7,\"296\":5,\"299\":6,\"302\":5,\"305\":3,\"308\":3,\"313\":6,\"316\":14,\"328\":7,\"331\":1,\"402\":1}}],[\"requestparam\",{\"1\":{\"148\":2,\"196\":1,\"197\":1}}],[\"requestmapping\",{\"1\":{\"141\":1,\"148\":1,\"196\":2,\"197\":2,\"251\":1,\"321\":1,\"411\":1}}],[\"requestmsgbody>\",{\"1\":{\"169\":1}}],[\"requestmsgbodyargumentresolver\",{\"1\":{\"142\":1}}],[\"requestmsgbody\",{\"1\":{\"128\":1,\"132\":1,\"142\":1,\"150\":2}}],[\"requestmsgbodyconverter<locationuploadmsgbody>\",{\"1\":{\"167\":1}}],[\"requestmsgbodyconverter\",{\"1\":{\"49\":1,\"113\":1,\"115\":2,\"116\":2,\"125\":1,\"166\":1,\"167\":5,\"168\":1,\"169\":1}}],[\"requestmsgmetadataargumentresolver\",{\"1\":{\"142\":1}}],[\"requestmsgmetadataaware\",{\"0\":{\"110\":1},\"1\":{\"110\":1}}],[\"requestmsgmetadata\",{\"1\":{\"110\":2,\"128\":1,\"141\":1,\"142\":1,\"159\":1,\"162\":1,\"167\":1,\"169\":1,\"171\":4,\"181\":2}}],[\"requestmsgheaderargumentresolver\",{\"1\":{\"142\":1}}],[\"requestmsgheaderaware\",{\"0\":{\"109\":1},\"1\":{\"109\":1}}],[\"requestmsgheader\",{\"1\":{\"109\":2,\"141\":1,\"142\":1,\"155\":1,\"159\":1}}],[\"request\",{\"0\":{\"49\":1,\"78\":1,\"91\":1,\"104\":1},\"1\":{\"74\":1,\"77\":1,\"78\":1,\"88\":2,\"91\":1,\"92\":1,\"104\":2,\"181\":1,\"197\":3,\"205\":1,\"206\":3,\"207\":1,\"208\":2,\"209\":1,\"210\":2,\"216\":4,\"224\":5,\"225\":1,\"231\":3,\"234\":3,\"243\":5,\"248\":1,\"313\":4,\"316\":5,\"323\":3,\"327\":1,\"338\":3,\"369\":2,\"378\":1,\"381\":1,\"384\":2,\"387\":4,\"388\":5,\"418\":2,\"421\":3}}],[\"reqmsgfieldconverter<double>\",{\"1\":{\"135\":1}}],[\"req\",{\"1\":{\"27\":1,\"263\":1,\"268\":1,\"318\":1}}],[\"的引用指向\",{\"1\":{\"417\":1}}],[\"的类\",{\"1\":{\"416\":1,\"419\":1}}],[\"的一起被自动释放掉\",{\"1\":{\"413\":1}}],[\"的显著区别是\",{\"1\":{\"413\":1}}],[\"的简单用法示例\",{\"1\":{\"412\":1}}],[\"的实例\",{\"1\":{\"412\":1}}],[\"的实现\",{\"1\":{\"226\":1,\"242\":2}}],[\"的实现类中几乎没用到这个属性\",{\"1\":{\"251\":1}}],[\"的实现类来实现这个功能\",{\"1\":{\"226\":1}}],[\"的实现类<\",{\"1\":{\"199\":3}}],[\"的实现类实例加入到\",{\"1\":{\"199\":1}}],[\"的实现类\",{\"1\":{\"115\":1,\"193\":1}}],[\"的操作\",{\"1\":{\"402\":1}}],[\"的依赖坐标\",{\"1\":{\"399\":1,\"400\":1}}],[\"的依赖如下\",{\"1\":{\"399\":1,\"400\":1}}],[\"的依赖注入的方式来使用\",{\"1\":{\"111\":1}}],[\"的最新版即可\",{\"1\":{\"399\":1,\"400\":1}}],[\"的支持\",{\"1\":{\"397\":1}}],[\"的默认实现为\",{\"1\":{\"390\":1}}],[\"的默认实现类\",{\"1\":{\"236\":1}}],[\"的逻辑执行完成之后才会执行消息体的解析\",{\"1\":{\"384\":1}}],[\"的字节流\",{\"1\":{\"382\":2}}],[\"的对象里\",{\"1\":{\"378\":1}}],[\"的处理服务已经搭建完毕\",{\"1\":{\"371\":1}}],[\"的处理器参数注入\",{\"1\":{\"142\":1}}],[\"的项目提供的\",{\"1\":{\"397\":2}}],[\"的项目引入为\",{\"1\":{\"367\":1,\"368\":1}}],[\"的项目中\",{\"1\":{\"357\":1,\"358\":1}}],[\"的项目\",{\"1\":{\"353\":2,\"399\":1,\"400\":1}}],[\"的项目给了我很大帮助\",{\"1\":{\"10\":1}}],[\"的概念\",{\"1\":{\"338\":2}}],[\"的强大功能实现的\",{\"1\":{\"255\":1}}],[\"的版本以对应版本的\",{\"1\":{\"356\":1}}],[\"的版本通过\",{\"1\":{\"251\":1}}],[\"的版本是必须的\",{\"1\":{\"251\":1}}],[\"的关系\",{\"1\":{\"251\":1,\"411\":1}}],[\"的阈值\",{\"1\":{\"237\":1}}],[\"的配置\",{\"1\":{\"228\":1}}],[\"的第\",{\"1\":{\"404\":1}}],[\"的第3个子包\",{\"1\":{\"225\":1,\"239\":1}}],[\"的第2个子包\",{\"1\":{\"225\":1,\"239\":1}}],[\"的第1个子包\",{\"1\":{\"225\":1,\"239\":1}}],[\"的请求消息分包暂存器\",{\"1\":{\"224\":1}}],[\"的其他类型\",{\"1\":{\"220\":1}}],[\"的开关由配置项\",{\"1\":{\"193\":1,\"371\":1}}],[\"的808协议消息处理服务的搭建\",{\"1\":{\"189\":1}}],[\"的返回类型为\",{\"1\":{\"176\":1}}],[\"的功能\",{\"1\":{\"167\":1,\"168\":1,\"169\":1}}],[\"的方式来实现\",{\"1\":{\"167\":1,\"169\":1}}],[\"的后续内容\",{\"1\":{\"155\":1}}],[\"的回复消息类型为\",{\"1\":{\"148\":1}}],[\"的消息内容的数据类型也不同\",{\"1\":{\"407\":1,\"411\":1}}],[\"的消息类型为\",{\"1\":{\"148\":1}}],[\"的消息头长度为\",{\"1\":{\"30\":2,\"34\":2,\"188\":2}}],[\"的作用和\",{\"1\":{\"406\":1}}],[\"的作用\",{\"1\":{\"139\":1,\"143\":1}}],[\"的每一个元素称之为\",{\"1\":{\"136\":1}}],[\"的转换\",{\"1\":{\"135\":1,\"260\":1}}],[\"的转换器来完成\",{\"1\":{\"125\":1}}],[\"的异常处理可以直接由注解实现\",{\"1\":{\"122\":1}}],[\"的组件的异常处理可以在实现类中自己处理\",{\"1\":{\"122\":1}}],[\"的映射功能呢\",{\"1\":{\"115\":1}}],[\"的内容构造起来有点麻烦\",{\"1\":{\"411\":1}}],[\"的内容不太方便构造\",{\"1\":{\"410\":1}}],[\"的内容\",{\"1\":{\"111\":1}}],[\"的日志级别调整的debug\",{\"1\":{\"225\":1}}],[\"的日志\",{\"1\":{\"92\":2}}],[\"的文档不难看出以下问题\",{\"1\":{\"112\":1}}],[\"的文档\",{\"1\":{\"71\":1}}],[\"的全局异常处理的方式来处理异常\",{\"1\":{\"55\":1}}],[\"的话\",{\"1\":{\"44\":1,\"101\":1,\"136\":1}}],[\"的任意终端\",{\"1\":{\"20\":1}}],[\"的\",{\"1\":{\"20\":1,\"23\":1,\"35\":1,\"39\":1,\"44\":1,\"62\":1,\"75\":1,\"95\":1,\"101\":1,\"107\":1,\"115\":1,\"123\":1,\"124\":1,\"140\":1,\"141\":1,\"156\":1,\"169\":1,\"180\":1,\"181\":1,\"199\":1,\"203\":1,\"211\":1,\"215\":2,\"218\":1,\"230\":1,\"240\":1,\"245\":1,\"251\":3,\"255\":1,\"320\":1,\"326\":2,\"348\":1,\"351\":2,\"364\":1,\"378\":1,\"384\":2,\"397\":1,\"417\":1,\"420\":1}}],[\"的时候\",{\"1\":{\"10\":1}}],[\"感谢\",{\"1\":{\"10\":1}}],[\"h3>\",{\"1\":{\"384\":1}}],[\"http\",{\"1\":{\"211\":1}}],[\"httpservletrequest\",{\"1\":{\"203\":1}}],[\"https\",{\"1\":{\"9\":2,\"10\":4,\"186\":1,\"363\":2}}],[\"hassubpackage=false\",{\"1\":{\"225\":1}}],[\"hashmap<>\",{\"1\":{\"175\":1,\"361\":1}}],[\"handlemsg\",{\"1\":{\"169\":2,\"171\":1,\"219\":1,\"234\":1,\"418\":1,\"421\":1}}],[\"handleresult\",{\"1\":{\"387\":2}}],[\"handlerequest\",{\"1\":{\"387\":2}}],[\"handlerfunction\",{\"1\":{\"218\":3}}],[\"handlerresulthandler\",{\"1\":{\"228\":2}}],[\"handlerresult\",{\"1\":{\"199\":2,\"387\":4}}],[\"handlerinterceptor\",{\"1\":{\"199\":1}}],[\"handlermethodargumentresolver\",{\"1\":{\"142\":2}}],[\"handlers\",{\"0\":{\"53\":1,\"57\":1,\"91\":1},\"1\":{\"88\":1,\"91\":1,\"369\":1}}],[\"handler\",{\"0\":{\"44\":1,\"50\":1,\"54\":1,\"101\":1},\"1\":{\"36\":2,\"39\":1,\"44\":2,\"91\":1,\"95\":1,\"97\":1,\"101\":3,\"193\":1,\"199\":6,\"387\":4}}],[\"hibernate\",{\"1\":{\"150\":1}}],[\"hexstring\",{\"1\":{\"408\":2,\"412\":2}}],[\"hexstringutils\",{\"1\":{\"165\":4,\"243\":1,\"420\":2,\"423\":1,\"424\":1}}],[\"hex\",{\"1\":{\"403\":2}}],[\"heatbeathandler\",{\"1\":{\"177\":3}}],[\"header=headerspec\",{\"1\":{\"225\":1}}],[\"header\",{\"1\":{\"109\":1,\"141\":6,\"155\":3,\"159\":7,\"165\":2,\"197\":1,\"209\":1,\"211\":1,\"247\":1,\"327\":2,\"338\":2,\"375\":1}}],[\"height\",{\"1\":{\"128\":1,\"316\":1}}],[\"hylexus\",{\"1\":{\"27\":2,\"38\":1,\"88\":1,\"91\":1,\"92\":3,\"115\":1,\"164\":2,\"165\":3,\"186\":2,\"191\":2,\"192\":1,\"193\":2,\"196\":1,\"223\":1,\"225\":1,\"263\":1,\"268\":1,\"318\":2,\"357\":1,\"358\":1,\"363\":2,\"369\":1,\"380\":2,\"381\":3,\"387\":3,\"390\":1}}],[\"h264\",{\"1\":{\"10\":1}}],[\"h\",{\"1\":{\"10\":1,\"225\":1}}],[\"hope\",{\"1\":{\"6\":1,\"7\":1,\"11\":1}}],[\"tip\",{\"1\":{\"411\":1}}],[\"timeunit\",{\"1\":{\"148\":1,\"197\":1}}],[\"time\",{\"0\":{\"61\":1},\"1\":{\"97\":3,\"101\":3,\"128\":1,\"251\":2,\"265\":1,\"268\":3,\"272\":2,\"316\":2}}],[\"timeout\",{\"1\":{\"44\":1,\"101\":1,\"148\":3}}],[\"tcp\",{\"1\":{\"179\":1,\"371\":1,\"391\":1}}],[\"testentitymsgbuilder\",{\"1\":{\"423\":1}}],[\"testentity\",{\"1\":{\"423\":3}}],[\"test1\",{\"1\":{\"408\":1}}],[\"testbytebufmsgbuilder\",{\"1\":{\"424\":1}}],[\"testbit\",{\"1\":{\"404\":1}}],[\"testbuildqueryterminalproperties\",{\"1\":{\"165\":1}}],[\"test2019alias\",{\"1\":{\"403\":1}}],[\"test\",{\"1\":{\"165\":3,\"403\":1,\"404\":1,\"408\":1,\"412\":2,\"417\":1,\"420\":1,\"423\":1,\"424\":1}}],[\"terminaltype\",{\"1\":{\"328\":1,\"418\":2}}],[\"terminalregister\",{\"1\":{\"231\":1}}],[\"terminalregistermsghandlerv2013\",{\"1\":{\"234\":1,\"418\":1,\"421\":1}}],[\"terminalregistermsghandlerv2011\",{\"1\":{\"219\":1}}],[\"terminalregistermsgv2011\",{\"1\":{\"216\":1}}],[\"terminalregisterreplymsg\",{\"1\":{\"216\":2,\"231\":3,\"323\":2}}],[\"terminalregisterreplyrespmsg\",{\"1\":{\"210\":1,\"339\":1}}],[\"terminal\",{\"1\":{\"148\":1,\"156\":1,\"159\":1,\"162\":1,\"196\":1,\"197\":1,\"388\":1,\"408\":1,\"412\":1}}],[\"terminalid2013\",{\"1\":{\"408\":1,\"412\":1}}],[\"terminalid=\",{\"1\":{\"225\":1}}],[\"terminalid\",{\"1\":{\"141\":1,\"145\":4,\"148\":3,\"155\":1,\"159\":1,\"162\":3,\"171\":1,\"180\":1,\"196\":5,\"197\":7,\"234\":2,\"241\":2,\"243\":3,\"328\":1,\"376\":1,\"377\":1,\"388\":1,\"391\":5,\"408\":1,\"412\":1,\"418\":2,\"421\":2,\"423\":1,\"424\":1}}],[\"terminalvalidator\",{\"0\":{\"181\":1},\"1\":{\"68\":1,\"164\":1,\"181\":4}}],[\"tags\",{\"1\":{\"388\":1}}],[\"targetclass\",{\"1\":{\"262\":7,\"267\":5}}],[\"target\",{\"1\":{\"252\":3,\"253\":2,\"261\":1,\"266\":1}}],[\"targetmsgdatatype\",{\"1\":{\"148\":3,\"159\":3,\"161\":1}}],[\"table\",{\"1\":{\"150\":1}}],[\"tasks\",{\"0\":{\"85\":1},\"1\":{\"81\":1,\"347\":1}}],[\"tohexstring\",{\"1\":{\"423\":1,\"424\":1}}],[\"tolowercase\",{\"1\":{\"388\":1}}],[\"tolist\",{\"1\":{\"243\":1}}],[\"total\",{\"1\":{\"388\":1}}],[\"totalparamcount\",{\"1\":{\"148\":1}}],[\"tostring\",{\"1\":{\"175\":1,\"361\":1,\"391\":1}}],[\"tobytes\",{\"1\":{\"156\":2,\"171\":1}}],[\"to\",{\"1\":{\"145\":1,\"157\":1,\"171\":1,\"196\":1,\"243\":1,\"262\":1,\"267\":1,\"347\":1}}],[\"todo\",{\"1\":{\"15\":2,\"72\":1,\"147\":1,\"164\":1,\"310\":1}}],[\"try\",{\"1\":{\"145\":1,\"267\":1,\"417\":1,\"420\":1}}],[\"true|false\",{\"1\":{\"193\":1,\"371\":1}}],[\"true\",{\"1\":{\"36\":1,\"46\":1,\"47\":1,\"49\":1,\"51\":1,\"53\":1,\"55\":1,\"57\":1,\"65\":1,\"77\":1,\"78\":1,\"88\":2,\"90\":1,\"91\":1,\"97\":1,\"101\":1,\"115\":1,\"128\":1,\"138\":1,\"148\":2,\"150\":1,\"156\":1,\"161\":1,\"165\":1,\"171\":1,\"181\":2,\"192\":1,\"199\":2,\"231\":1,\"265\":1,\"268\":1,\"272\":1,\"313\":2,\"316\":1,\"337\":1,\"339\":1,\"369\":2,\"384\":2,\"387\":6,\"388\":1,\"407\":2,\"411\":2,\"423\":1}}],[\"ttl\",{\"1\":{\"104\":1,\"105\":2}}],[\"type=none\",{\"1\":{\"242\":1}}],[\"type=redis\",{\"1\":{\"242\":1}}],[\"type=caffeine\",{\"1\":{\"242\":1}}],[\"type\",{\"1\":{\"104\":2,\"105\":3,\"175\":3,\"176\":3,\"224\":5,\"313\":1}}],[\"the\",{\"1\":{\"347\":1}}],[\"theme\",{\"1\":{\"6\":1,\"7\":1,\"11\":1}}],[\"throws\",{\"1\":{\"148\":1,\"163\":2,\"169\":1,\"171\":2,\"197\":1,\"199\":3,\"203\":1,\"377\":1,\"380\":2}}],[\"throw\",{\"1\":{\"145\":1,\"262\":1,\"267\":2}}],[\"throwable\",{\"1\":{\"124\":4,\"199\":4}}],[\"threadpoolexecutor\",{\"1\":{\"59\":1,\"60\":1,\"61\":1,\"62\":1}}],[\"thread\",{\"0\":{\"42\":1,\"43\":1,\"58\":1,\"63\":1,\"84\":1,\"99\":1,\"100\":1},\"1\":{\"36\":1,\"81\":1,\"82\":1,\"97\":2}}],[\"this\",{\"1\":{\"42\":1,\"43\":1,\"99\":1,\"100\":1,\"116\":1,\"128\":1,\"142\":1,\"148\":3,\"156\":3,\"171\":2,\"175\":2,\"186\":3,\"196\":3,\"197\":2,\"243\":3,\"262\":1,\"267\":1,\"316\":2,\"326\":1,\"327\":4,\"337\":1,\"338\":4,\"361\":2,\"388\":2,\"390\":1,\"393\":1,\"407\":3,\"411\":3}}],[\"t\",{\"0\":{\"9\":1,\"10\":1},\"1\":{\"27\":1,\"169\":1,\"211\":1,\"388\":1,\"416\":1,\"419\":1}}],[\"李仁豪\",{\"1\":{\"8\":1}}],[\"以便在消息处理流程的关键步骤\",{\"1\":{\"387\":1}}],[\"以便于在\",{\"1\":{\"143\":1}}],[\"以上\",{\"1\":{\"344\":2}}],[\"以方便使用\",{\"1\":{\"166\":1}}],[\"以度位单位的纬度值\",{\"1\":{\"133\":1}}],[\"以下面这条位置上报报文\",{\"1\":{\"403\":1}}],[\"以下的版本\",{\"1\":{\"351\":1}}],[\"以下的版本中这三个配置项的默认值都是\",{\"1\":{\"101\":1}}],[\"以下为示例性的处理位置消息的\",{\"1\":{\"171\":1}}],[\"以下为示例性的解析位置消息的\",{\"1\":{\"167\":1}}],[\"以下为对应的handler返回\",{\"1\":{\"159\":1}}],[\"以下为终端通用应答的示例代码\",{\"1\":{\"159\":1}}],[\"以下情况不会发送数据给客户端\",{\"1\":{\"157\":1}}],[\"以下是\",{\"1\":{\"116\":1}}],[\"以下各项条目排名不分先后\",{\"1\":{\"6\":1}}],[\"以\",{\"1\":{\"27\":1,\"79\":1,\"115\":1,\"251\":1,\"318\":1}}],[\"以及使用的版本\",{\"1\":{\"4\":1}}],[\"主动下发消息时为空\",{\"1\":{\"338\":2}}],[\"主动下发消息给客户端时的编码问题\",{\"1\":{\"125\":1}}],[\"主要内容如下\",{\"1\":{\"182\":1}}],[\"主题使用的是\",{\"1\":{\"6\":1,\"7\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"构建的\",{\"1\":{\"6\":1,\"7\":1}}],[\"致谢\",{\"0\":{\"6\":1}}],[\"有单词拼写错误\",{\"1\":{\"397\":1}}],[\"有类似的作用\",{\"1\":{\"378\":1}}],[\"有溢出的风险\",{\"1\":{\"274\":1,\"280\":1,\"283\":1,\"293\":1,\"299\":1,\"302\":1}}],[\"有个属性\",{\"1\":{\"237\":1}}],[\"有多少个附加项就要定义多少个字段\",{\"1\":{\"136\":1}}],[\"有得必有失\",{\"1\":{\"136\":1}}],[\"有关\",{\"1\":{\"111\":1}}],[\"有\",{\"1\":{\"101\":1}}],[\"有什么区别\",{\"0\":{\"23\":1},\"1\":{\"18\":1,\"71\":1}}],[\"有钱的捧个钱场\",{\"1\":{\"5\":1}}],[\"有问题群里留言即可\",{\"1\":{\"4\":1}}],[\"项目源码要求的\",{\"1\":{\"353\":1}}],[\"项目模块介绍\",{\"0\":{\"352\":1}}],[\"项目\",{\"1\":{\"348\":1,\"363\":1}}],[\"项目中自带的\",{\"1\":{\"347\":1}}],[\"项目开始测试\",{\"1\":{\"193\":1,\"371\":1}}],[\"项目的发展离不开你的支持\",{\"1\":{\"5\":1}}],[\"项目结构\",{\"0\":{\"1\":1}}],[\"赞助\",{\"0\":{\"5\":1}}],[\"1<\",{\"1\":{\"357\":1,\"358\":1}}],[\"1开始不再需要指定\",{\"1\":{\"326\":3}}],[\"19\",{\"1\":{\"181\":1}}],[\"11100111\",{\"1\":{\"404\":1}}],[\"11110111\",{\"1\":{\"404\":1}}],[\"11+\",{\"1\":{\"397\":1}}],[\"11\",{\"1\":{\"165\":1,\"188\":2,\"328\":2,\"344\":10,\"352\":8,\"353\":1,\"376\":1,\"397\":2,\"408\":1,\"412\":1}}],[\"18\",{\"1\":{\"128\":1,\"167\":1,\"316\":2}}],[\"1m\",{\"1\":{\"105\":1}}],[\"14\",{\"1\":{\"30\":1,\"34\":1,\"188\":1,\"345\":1,\"352\":2,\"356\":1,\"357\":2,\"397\":1}}],[\"13160466666\",{\"1\":{\"165\":1}}],[\"13912344321\",{\"1\":{\"165\":2}}],[\"13717861955\",{\"1\":{\"148\":1}}],[\"13\",{\"1\":{\"30\":2,\"34\":2,\"188\":1}}],[\"10203040535452494e4700000064\",{\"1\":{\"420\":2}}],[\"10203040\",{\"1\":{\"417\":2,\"420\":1}}],[\"1024\",{\"1\":{\"39\":1,\"94\":1,\"95\":1,\"104\":1,\"105\":1,\"236\":1,\"237\":2,\"334\":2,\"376\":1}}],[\"106\",{\"1\":{\"260\":2}}],[\"10^6\",{\"1\":{\"128\":2,\"134\":1,\"272\":1}}],[\"1000000\",{\"1\":{\"262\":1}}],[\"100\",{\"1\":{\"116\":1,\"135\":1,\"148\":1,\"167\":2,\"197\":1,\"313\":5,\"407\":2,\"411\":2,\"420\":1}}],[\"10\",{\"1\":{\"30\":7,\"34\":4,\"188\":4,\"376\":3}}],[\"1078\",{\"0\":{\"10\":1},\"1\":{\"10\":1}}],[\"1072477383\",{\"1\":{\"4\":1}}],[\"16\",{\"1\":{\"30\":7,\"34\":5,\"128\":1,\"167\":1,\"185\":1,\"186\":1,\"188\":5,\"251\":2,\"260\":1,\"263\":1,\"316\":2,\"376\":1}}],[\"16字节\",{\"1\":{\"30\":1,\"188\":1}}],[\"16byte\",{\"1\":{\"29\":1,\"33\":1,\"187\":1}}],[\"1byte\",{\"1\":{\"29\":3,\"33\":3,\"187\":3}}],[\"17字节\",{\"1\":{\"34\":1}}],[\"17\",{\"1\":{\"25\":1,\"34\":4,\"344\":12,\"348\":1,\"349\":1,\"352\":7,\"353\":2,\"397\":3}}],[\"17+\",{\"1\":{\"2\":1,\"397\":1}}],[\"15\",{\"1\":{\"25\":1,\"30\":1,\"34\":5,\"188\":3,\"328\":2,\"376\":2}}],[\"12<\",{\"1\":{\"357\":1}}],[\"12替换\",{\"1\":{\"357\":1}}],[\"12345\",{\"1\":{\"165\":1}}],[\"12345678901234567890\",{\"1\":{\"165\":1}}],[\"12359\",{\"1\":{\"165\":1}}],[\"123\",{\"1\":{\"165\":1,\"234\":1,\"417\":2,\"421\":1}}],[\"128\",{\"1\":{\"81\":2,\"84\":1,\"85\":1,\"420\":1,\"424\":1}}],[\"12字节\",{\"1\":{\"30\":1,\"188\":1}}],[\"12\",{\"1\":{\"25\":1,\"30\":4,\"128\":3,\"151\":1,\"167\":1,\"188\":3,\"191\":2,\"251\":5,\"260\":2,\"263\":2,\"272\":1,\"316\":2,\"397\":1}}],[\"1\",{\"0\":{\"23\":1,\"76\":2,\"130\":1,\"134\":1,\"145\":1,\"250\":2,\"257\":2,\"270\":2,\"384\":2,\"396\":1,\"401\":2,\"405\":2,\"409\":2},\"1\":{\"18\":1,\"23\":2,\"27\":2,\"30\":3,\"34\":3,\"59\":1,\"67\":3,\"71\":2,\"74\":2,\"78\":2,\"84\":2,\"86\":2,\"128\":1,\"130\":2,\"131\":1,\"132\":3,\"135\":1,\"137\":2,\"138\":2,\"143\":1,\"148\":2,\"153\":1,\"154\":4,\"156\":2,\"159\":4,\"161\":1,\"164\":1,\"165\":3,\"167\":2,\"186\":1,\"188\":6,\"191\":1,\"197\":1,\"210\":2,\"225\":1,\"231\":3,\"234\":2,\"239\":2,\"251\":6,\"252\":4,\"253\":2,\"258\":2,\"261\":1,\"262\":3,\"263\":2,\"265\":2,\"266\":1,\"268\":2,\"272\":1,\"274\":6,\"275\":6,\"277\":4,\"278\":4,\"280\":6,\"281\":6,\"283\":6,\"284\":6,\"286\":4,\"287\":4,\"289\":4,\"290\":4,\"293\":6,\"294\":6,\"296\":4,\"297\":4,\"299\":6,\"300\":6,\"302\":6,\"303\":6,\"305\":4,\"306\":4,\"308\":4,\"309\":4,\"313\":8,\"316\":19,\"318\":2,\"326\":8,\"328\":4,\"329\":2,\"330\":1,\"331\":3,\"337\":1,\"339\":3,\"344\":1,\"348\":1,\"351\":3,\"355\":1,\"357\":2,\"358\":2,\"384\":2,\"393\":3,\"397\":3,\"399\":2,\"400\":2,\"401\":2,\"403\":3,\"404\":9,\"405\":2,\"408\":1,\"409\":2,\"411\":4,\"412\":1,\"418\":1,\"421\":2,\"423\":6,\"424\":3}}],[\"请先给\",{\"1\":{\"348\":1,\"349\":1}}],[\"请先读我\",{\"0\":{\"25\":1,\"258\":1,\"272\":1,\"341\":1,\"351\":1,\"355\":1,\"397\":1}}],[\"请移步这里\",{\"1\":{\"168\":1,\"173\":1}}],[\"请移步此处\",{\"1\":{\"111\":1}}],[\"请加以区分\",{\"1\":{\"127\":1}}],[\"请谅解本文用到的\",{\"1\":{\"126\":1}}],[\"请确保\",{\"1\":{\"79\":1,\"348\":1,\"349\":1}}],[\"请打开\",{\"1\":{\"78\":1}}],[\"请求上下文\",{\"1\":{\"387\":4}}],[\"请求整体结构已经解析完毕\",{\"1\":{\"384\":1}}],[\"请求头\",{\"1\":{\"375\":1}}],[\"请求体尚未解码\",{\"1\":{\"387\":1}}],[\"请求体\",{\"1\":{\"324\":1}}],[\"请求体消息实体类\",{\"1\":{\"108\":1,\"169\":1,\"246\":1}}],[\"请求体消息实体类请参考这里\",{\"1\":{\"46\":1}}],[\"请求要求服务端重传指定的子包\",{\"1\":{\"240\":1}}],[\"请求生命周期监听器\",{\"0\":{\"386\":1},\"1\":{\"220\":1}}],[\"请求生存周期监听器\",{\"1\":{\"72\":1}}],[\"请求没有强制指定固定类型的处理器\",{\"1\":{\"213\":1}}],[\"请求处理器的处理结果\",{\"1\":{\"387\":2}}],[\"请求处理器方法参数\",{\"1\":{\"204\":1}}],[\"请求处理流程\",{\"0\":{\"220\":1},\"1\":{\"72\":1}}],[\"请求分包消息暂存器相关配置\",{\"1\":{\"104\":1}}],[\"请求参数解析器\",{\"0\":{\"202\":1},\"1\":{\"72\":1}}],[\"请求报文可以自动映射到使用\",{\"1\":{\"46\":1}}],[\"请求消息实体类中出现的\",{\"1\":{\"413\":1}}],[\"请求消息的业务处理实现方式\",{\"1\":{\"114\":1}}],[\"请求消息的业务处理的实现\",{\"0\":{\"114\":1}}],[\"请求消息分包\",{\"0\":{\"221\":1},\"1\":{\"72\":1}}],[\"请求消息处理器\",{\"0\":{\"212\":1},\"1\":{\"72\":1}}],[\"请求消息映射的实现方式\",{\"1\":{\"113\":1}}],[\"请求消息映射的实现\",{\"0\":{\"113\":1}}],[\"请求消息映射\",{\"0\":{\"149\":1,\"319\":1},\"1\":{\"68\":1,\"72\":1,\"125\":1}}],[\"请求消息体实体类\",{\"1\":{\"46\":1,\"47\":4,\"48\":1,\"115\":1,\"150\":2,\"166\":1}}],[\"请求消息\",{\"1\":{\"27\":1,\"318\":1,\"380\":3,\"381\":1}}],[\"请将报文以\",{\"1\":{\"14\":1}}],[\"请作者喝一杯🍺吧\",{\"1\":{\"5\":1}}],[\"请尽可能地描述清楚自己的问题\",{\"1\":{\"4\":1}}],[\"请忽略\",{\"1\":{\"1\":2}}],[\"推荐使用\",{\"1\":{\"408\":1,\"412\":1}}],[\"推荐发包工具\",{\"1\":{\"194\":3,\"372\":1}}],[\"推荐调试工具\",{\"1\":{\"127\":1}}],[\"推荐\",{\"1\":{\"4\":1,\"14\":1}}],[\"提供了\",{\"1\":{\"387\":1}}],[\"提供了两个\",{\"1\":{\"351\":1}}],[\"提供了一个\",{\"1\":{\"218\":1}}],[\"提供一个转换器\",{\"0\":{\"262\":1,\"267\":1}}],[\"提供的工厂方法来创建实例\",{\"1\":{\"408\":1}}],[\"提供的别名都在\",{\"1\":{\"269\":1}}],[\"提供的别名\",{\"1\":{\"252\":1,\"253\":1}}],[\"提供的\",{\"1\":{\"191\":1,\"255\":1,\"341\":1,\"343\":1,\"351\":3,\"355\":2,\"367\":1,\"368\":1,\"397\":3}}],[\"提供\",{\"1\":{\"162\":1,\"351\":1}}],[\"提供并自动注册\",{\"1\":{\"125\":1}}],[\"提取出来\",{\"1\":{\"130\":1}}],[\"提交\",{\"1\":{\"4\":1}}],[\"提示\",{\"0\":{\"71\":1},\"1\":{\"2\":1,\"6\":1,\"14\":1,\"58\":1,\"67\":3,\"68\":1,\"76\":1,\"80\":1,\"82\":1,\"87\":1,\"93\":1,\"96\":1,\"102\":1,\"106\":1,\"111\":1,\"125\":2,\"126\":1,\"135\":1,\"138\":1,\"144\":1,\"163\":1,\"164\":2,\"174\":1,\"182\":1,\"199\":1,\"213\":1,\"226\":1,\"228\":2,\"236\":1,\"250\":1,\"251\":1,\"263\":1,\"268\":1,\"327\":1,\"328\":1,\"331\":1,\"338\":1,\"341\":1,\"353\":1,\"356\":1,\"361\":1,\"384\":1,\"401\":1,\"405\":1,\"409\":1,\"413\":1}}],[\"generatesession\",{\"1\":{\"391\":1}}],[\"generatesessionid\",{\"1\":{\"391\":1}}],[\"geopoint\",{\"0\":{\"259\":1},\"1\":{\"261\":1,\"263\":3,\"272\":2}}],[\"getdesc\",{\"1\":{\"361\":2}}],[\"getvalue\",{\"1\":{\"243\":1}}],[\"getpackageidlist\",{\"1\":{\"243\":1}}],[\"getfieldtype\",{\"1\":{\"262\":1,\"267\":1}}],[\"getfirstsubpackageflowid\",{\"1\":{\"243\":1}}],[\"getflowid\",{\"1\":{\"141\":1,\"155\":1,\"159\":2,\"171\":1}}],[\"getsomefield\",{\"1\":{\"390\":1}}],[\"getsubpackagemsg\",{\"1\":{\"241\":1,\"243\":1}}],[\"getsupportedversions\",{\"1\":{\"219\":1,\"234\":1}}],[\"getsupportedmsgtypes\",{\"1\":{\"169\":1,\"171\":2,\"219\":1,\"234\":1}}],[\"getserverflowid\",{\"1\":{\"197\":1}}],[\"getid\",{\"1\":{\"180\":1}}],[\"getinstance\",{\"1\":{\"179\":1,\"197\":1,\"391\":2}}],[\"getter\",{\"1\":{\"175\":1,\"186\":1}}],[\"getterminalid\",{\"1\":{\"141\":5,\"155\":1,\"159\":5,\"162\":1,\"171\":1,\"180\":1}}],[\"getchannel\",{\"1\":{\"171\":1}}],[\"getresult\",{\"1\":{\"156\":1}}],[\"getreplymsgid\",{\"1\":{\"156\":1}}],[\"getreplyflowid\",{\"1\":{\"156\":1}}],[\"getruntime\",{\"1\":{\"59\":1,\"84\":1}}],[\"getalarmflag\",{\"1\":{\"403\":1}}],[\"getannotation\",{\"1\":{\"267\":1}}],[\"getauthcode\",{\"1\":{\"155\":1,\"162\":1,\"171\":1}}],[\"getasbytes\",{\"1\":{\"148\":1}}],[\"getmapping\",{\"1\":{\"148\":1,\"251\":1,\"321\":1,\"411\":1}}],[\"getmsgcontent\",{\"1\":{\"412\":1}}],[\"getmsgid\",{\"1\":{\"141\":2,\"156\":1,\"159\":3,\"206\":1,\"208\":1,\"211\":1,\"361\":2}}],[\"getmsgbodylength\",{\"1\":{\"128\":1}}],[\"getbitoperator\",{\"1\":{\"403\":1}}],[\"getbitat\",{\"1\":{\"130\":2}}],[\"getbodybytes\",{\"1\":{\"167\":1}}],[\"getbytes\",{\"1\":{\"145\":1,\"165\":4,\"196\":1}}],[\"get\",{\"1\":{\"145\":1,\"175\":1,\"361\":1,\"391\":1,\"403\":2,\"404\":1}}],[\"getextrainfolength\",{\"1\":{\"137\":1}}],[\"getlength\",{\"1\":{\"137\":1,\"151\":4}}],[\"getlngstartindex\",{\"1\":{\"128\":2}}],[\"getheader\",{\"1\":{\"128\":1,\"141\":2,\"159\":2,\"171\":1}}],[\"getorder\",{\"1\":{\"116\":3,\"200\":1,\"391\":1}}],[\"g\",{\"1\":{\"225\":1}}],[\"gbk\",{\"1\":{\"185\":1,\"186\":1,\"196\":1}}],[\"graffle\",{\"1\":{\"118\":1}}],[\"gradlejdk版本\",{\"1\":{\"348\":1}}],[\"gradle>>\",{\"1\":{\"347\":1}}],[\"gradlew\",{\"1\":{\"347\":5,\"349\":1}}],[\"gradle\",{\"1\":{\"1\":1,\"2\":1,\"191\":1,\"344\":1,\"345\":1,\"346\":2,\"347\":6,\"348\":2}}],[\"gradle用到的构建脚本和checkstyle配置\",{\"1\":{\"1\":1}}],[\"groupid>\",{\"1\":{\"191\":1,\"357\":3,\"358\":3}}],[\"group\",{\"0\":{\"83\":1},\"1\":{\"80\":1,\"81\":1,\"82\":1,\"191\":1}}],[\"gitee\",{\"1\":{\"9\":1,\"10\":2,\"363\":2}}],[\"github\",{\"1\":{\"4\":1,\"9\":1,\"10\":3,\"27\":2,\"38\":1,\"88\":1,\"91\":1,\"92\":3,\"115\":1,\"164\":2,\"165\":3,\"186\":2,\"191\":2,\"192\":1,\"193\":2,\"196\":1,\"225\":1,\"263\":1,\"268\":1,\"318\":2,\"357\":1,\"358\":1,\"363\":2,\"369\":1,\"380\":2,\"381\":3,\"387\":3,\"390\":1}}],[\"64个bit\",{\"1\":{\"404\":1}}],[\"64\",{\"1\":{\"269\":1,\"402\":1,\"404\":1}}],[\"60\",{\"1\":{\"225\":2}}],[\"60s\",{\"1\":{\"61\":1}}],[\"66\",{\"1\":{\"101\":1,\"408\":1,\"412\":1}}],[\"6808\",{\"1\":{\"41\":1,\"97\":1,\"98\":1,\"194\":1,\"371\":1}}],[\"6\",{\"1\":{\"2\":1,\"30\":1,\"128\":1,\"151\":1,\"167\":1,\"188\":1,\"251\":4,\"262\":1,\"265\":2,\"266\":1,\"268\":1,\"272\":2,\"316\":7,\"328\":2,\"345\":2,\"352\":2,\"356\":1,\"357\":5,\"376\":1,\"397\":4,\"418\":1}}],[\"61\",{\"1\":{\"2\":1,\"344\":2,\"352\":1,\"397\":1}}],[\"0b11\",{\"1\":{\"404\":1}}],[\"0b11111111\",{\"1\":{\"404\":1}}],[\"0b00001000\",{\"1\":{\"404\":1}}],[\"0b000\",{\"1\":{\"165\":2}}],[\"0<\",{\"1\":{\"358\":1}}],[\"0替换\",{\"1\":{\"358\":1}}],[\"000\",{\"1\":{\"262\":2}}],[\"00000000010000000000000000001010\",{\"1\":{\"404\":1}}],[\"00000000013912344329\",{\"1\":{\"225\":1}}],[\"0000000000000000000000000000000000000000010000000000000000001010\",{\"1\":{\"404\":1}}],[\"0000\",{\"1\":{\"135\":1,\"167\":2}}],[\"09\",{\"1\":{\"128\":1}}],[\"08\",{\"1\":{\"128\":1}}],[\"0x1e\",{\"1\":{\"408\":1,\"412\":1}}],[\"0x16\",{\"1\":{\"408\":1,\"412\":1}}],[\"0xffff\",{\"1\":{\"393\":1}}],[\"0x8100\",{\"1\":{\"231\":1,\"239\":9,\"339\":1}}],[\"0x8103\",{\"1\":{\"148\":2,\"334\":1,\"335\":1,\"407\":2,\"410\":1,\"411\":2,\"423\":1,\"424\":1}}],[\"0x8003\",{\"1\":{\"226\":2}}],[\"0x8001\",{\"1\":{\"159\":2,\"160\":1,\"334\":1}}],[\"0xe2\",{\"1\":{\"138\":1}}],[\"0xe6\",{\"1\":{\"138\":1}}],[\"0xe5\",{\"1\":{\"138\":1}}],[\"0xe4\",{\"1\":{\"138\":1}}],[\"0xe1\",{\"1\":{\"138\":1}}],[\"0x32\",{\"1\":{\"408\":1,\"412\":1}}],[\"0x31\",{\"1\":{\"138\":1}}],[\"0x30\",{\"1\":{\"138\":1}}],[\"0x0a\",{\"1\":{\"408\":1,\"412\":1}}],[\"0x0704\",{\"1\":{\"211\":1,\"313\":1,\"371\":1}}],[\"0x0100\",{\"1\":{\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"216\":2,\"225\":4,\"231\":1,\"323\":1,\"361\":1,\"371\":1}}],[\"0x0107\",{\"1\":{\"165\":1}}],[\"0x0102\",{\"1\":{\"155\":1,\"156\":1,\"159\":1,\"175\":1,\"193\":1,\"322\":1,\"361\":1,\"371\":1}}],[\"0x0032\",{\"1\":{\"408\":1,\"412\":1}}],[\"0x0030\",{\"1\":{\"197\":1}}],[\"0x0084\",{\"1\":{\"408\":1,\"412\":1}}],[\"0x0081\",{\"1\":{\"408\":1,\"412\":1}}],[\"0x0013\",{\"1\":{\"408\":1,\"412\":1}}],[\"0x0005\",{\"1\":{\"240\":2,\"241\":2,\"243\":1}}],[\"0x0001\",{\"1\":{\"138\":1,\"148\":1,\"197\":1,\"205\":1,\"225\":4,\"322\":1,\"408\":1,\"412\":1}}],[\"0x0029\",{\"1\":{\"148\":1,\"197\":1}}],[\"0x0200\",{\"1\":{\"128\":1,\"132\":1,\"141\":1,\"150\":2,\"159\":1,\"175\":1,\"272\":1,\"316\":1,\"371\":1}}],[\"0x7e\",{\"1\":{\"29\":2,\"33\":2,\"187\":2,\"380\":2,\"381\":1}}],[\"0s\",{\"1\":{\"97\":2,\"101\":2}}],[\"010000000000000000001000\",{\"1\":{\"404\":1}}],[\"010000000000000000001010\",{\"1\":{\"404\":1}}],[\"013912344323\",{\"1\":{\"196\":1,\"197\":1,\"423\":1,\"424\":1}}],[\"01\",{\"1\":{\"25\":1,\"128\":1}}],[\"0文档的时刻即\",{\"1\":{\"25\":1}}],[\"0\",{\"0\":{\"396\":1},\"1\":{\"2\":2,\"20\":2,\"21\":2,\"30\":8,\"34\":8,\"42\":2,\"43\":2,\"82\":1,\"97\":2,\"99\":2,\"100\":2,\"101\":2,\"116\":1,\"128\":4,\"130\":3,\"131\":3,\"132\":3,\"135\":2,\"137\":1,\"143\":1,\"151\":1,\"153\":1,\"156\":1,\"159\":4,\"161\":1,\"164\":1,\"165\":3,\"167\":3,\"171\":2,\"186\":4,\"188\":8,\"191\":2,\"206\":1,\"208\":1,\"210\":2,\"226\":2,\"231\":5,\"234\":3,\"262\":1,\"313\":3,\"316\":9,\"323\":1,\"326\":2,\"328\":1,\"330\":1,\"331\":3,\"334\":1,\"337\":2,\"339\":4,\"344\":1,\"345\":3,\"351\":1,\"352\":1,\"356\":1,\"358\":7,\"376\":1,\"393\":2,\"397\":6,\"399\":1,\"400\":1,\"404\":6,\"412\":1,\"417\":1,\"418\":1,\"420\":1,\"421\":3,\"423\":8,\"424\":7}}],[\"71\",{\"1\":{\"347\":1}}],[\"73\",{\"1\":{\"347\":1}}],[\"7s\",{\"1\":{\"347\":1}}],[\"76\",{\"1\":{\"328\":2}}],[\"75\",{\"1\":{\"328\":2}}],[\"7e8103003801391234432300000500000001040000004200000013137777772e7878782e6666662e7a7a7a2\",{\"1\":{\"408\":1,\"412\":1}}],[\"7e8100600101000000000139123443290002000300032dba7e\",{\"1\":{\"239\":2}}],[\"7e8100600901000000000139123443290001000300026465323031392d2d2dbb7e\",{\"1\":{\"239\":2}}],[\"7e810060090100000000013912344329000000030001007b0041757468436fe07e\",{\"1\":{\"239\":2}}],[\"7e0200402d01000000000139123443210000003000000040000101cd41c2072901b00929029a005a23042821314101040000029b0202004303020309300163897e\",{\"1\":{\"403\":1}}],[\"7e02004086010000000001893094655200e4000000000000000101d907f2073d336c000000000000211124114808010400000026030200003001153101002504000000001404000000011504000000fa160400000000170200001803000000ea10ffffffffffffffffffffffffffffffff02020000ef0400000000f31b017118000000000000000000000000000000000000000000000000567e\",{\"1\":{\"317\":1}}],[\"7e0200004a76890100562600ad000000000000000201dcf7f6074054c1000000000000200128080934300164310100e10400000030e2020000e306005e019a019ae40b01cc000018a20000480264e5045e04019ae601a2637e\",{\"1\":{\"127\":1}}],[\"7e070400e401583860765500040003010049000000000004000301d9f190073ca3c1000c00000000211204082941010400d728ad3001003101092504000000001404000000041504000000001604000000001702000118030000000049000000000004000301d9f190073ca3c1000c00000000211130171352010400d728ad3001003101092504000000001404000000041504000000001604000000001702000118030000000049000000000004000301d9f190073ca3c1000c00000000211130171357010400d728ad300115310109250400000000140400000004150400000000160400000000170200011803000000407e\",{\"1\":{\"314\":1}}],[\"7e0001000501391234432300000000810300f87e\",{\"1\":{\"423\":2,\"424\":2}}],[\"7e00010005013912344323007b0001810300827e\",{\"1\":{\"197\":1}}],[\"7e000540080100000000013912344329000100030002000100023b7e\",{\"1\":{\"243\":1}}],[\"7e00054008010000000001391234432900010000000200010002387e\",{\"1\":{\"243\":1}}],[\"7e010040560100000000013912344321007b000b0000313233353931323335393131323334353637383930313233343536373839303132333435363738393069643132333435363738393031323334353637383930313233343536373801b8ca4a2d3635343332313c7e\",{\"1\":{\"372\":1}}],[\"7e010040560100000000013912344329007b000b0002696439383736353433323174797065303031323334353637383132333435363738383736353433323149443030303031323334353637383132333435363738383736353433323101b8ca4a2d313233343539257e\",{\"1\":{\"239\":1}}],[\"7e0100002f013912344323007b000b0002696431323374797065313233343536373838373635343332314944313233343501b8ca4a2d3132333435332d7e\",{\"1\":{\"234\":1}}],[\"7e01000023013912344321007b000b0002696431323361626364656667684944313233343501b8ca4a2d313233343531317e\",{\"1\":{\"219\":1}}],[\"7e0100600e010000000001391234432900020003000333323101b8ca4a2d313233343539347e\",{\"1\":{\"225\":4}}],[\"7e010060240100000000013912344329000100030002383837363534333231494430303030313233343536373831323334353637383837363534357e\",{\"1\":{\"225\":4}}],[\"7e010060240100000000013912344329000000030001000b00026964393837363534333231747970653030313233343536373831323334353637277e\",{\"1\":{\"225\":4}}],[\"7e0102000676890100562606e144454a544e506d7e\",{\"1\":{\"194\":1}}],[\"7\",{\"1\":{\"2\":2,\"164\":1,\"165\":1,\"268\":1,\"272\":3,\"316\":2,\"328\":2,\"418\":3}}],[\"4个字节\",{\"1\":{\"134\":1}}],[\"45s\",{\"1\":{\"104\":1,\"105\":1}}],[\"45\",{\"1\":{\"25\":1,\"328\":2}}],[\"4\",{\"1\":{\"2\":1,\"30\":5,\"34\":5,\"128\":1,\"130\":2,\"131\":1,\"132\":1,\"143\":1,\"151\":6,\"159\":1,\"167\":5,\"186\":1,\"188\":2,\"231\":1,\"234\":1,\"251\":5,\"260\":3,\"263\":2,\"272\":1,\"316\":5,\"326\":2,\"328\":4,\"331\":1,\"339\":1,\"376\":1,\"417\":1,\"418\":3,\"421\":1}}],[\"软件版本\",{\"0\":{\"2\":1}}],[\"datetimeformatter\",{\"1\":{\"267\":1}}],[\"date\",{\"1\":{\"265\":1,\"267\":1,\"268\":2,\"347\":1}}],[\"data\",{\"1\":{\"128\":1,\"132\":1,\"137\":1,\"138\":1,\"145\":1,\"148\":2,\"150\":1,\"156\":1,\"157\":1,\"165\":1,\"171\":1,\"186\":1,\"196\":1,\"210\":1,\"231\":1,\"260\":1,\"263\":1,\"265\":1,\"268\":1,\"272\":1,\"313\":2,\"316\":2,\"339\":1,\"407\":2,\"411\":2,\"423\":1}}],[\"datatype=\",{\"1\":{\"251\":1}}],[\"datatype\",{\"1\":{\"79\":2,\"128\":11,\"130\":1,\"131\":1,\"132\":1,\"134\":1,\"135\":1,\"137\":4,\"138\":7,\"151\":3,\"210\":1,\"231\":3,\"251\":7,\"252\":3,\"253\":2,\"261\":1,\"262\":1,\"266\":1,\"267\":1,\"272\":2,\"293\":7,\"294\":7,\"296\":5,\"297\":5,\"299\":6,\"300\":6,\"302\":5,\"303\":5,\"305\":3,\"306\":3,\"308\":3,\"309\":3,\"313\":6,\"316\":14,\"326\":1,\"328\":7,\"331\":1,\"335\":1,\"337\":1,\"339\":3,\"407\":5,\"423\":3}}],[\"databind\",{\"1\":{\"79\":1}}],[\"dwod\",{\"1\":{\"251\":1}}],[\"dwordbytesvaluewrapper\",{\"1\":{\"148\":1}}],[\"dword\",{\"0\":{\"282\":1,\"301\":1},\"1\":{\"27\":1,\"128\":7,\"129\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"138\":3,\"148\":1,\"151\":1,\"161\":1,\"185\":1,\"186\":1,\"251\":8,\"252\":2,\"253\":2,\"260\":6,\"261\":1,\"262\":4,\"263\":2,\"272\":2,\"283\":5,\"284\":5,\"302\":5,\"303\":5,\"316\":13,\"326\":1,\"331\":2,\"407\":1,\"408\":1,\"411\":2,\"412\":1,\"417\":2}}],[\"divide\",{\"1\":{\"262\":1}}],[\"direction\",{\"1\":{\"128\":1,\"316\":1}}],[\"dispatch2\",{\"1\":{\"387\":1}}],[\"dispatch\",{\"1\":{\"387\":1}}],[\"dispatch1\",{\"1\":{\"387\":1}}],[\"dispatcher\",{\"1\":{\"91\":1,\"387\":1,\"394\":2}}],[\"disabled\",{\"1\":{\"97\":2,\"101\":2}}],[\"documented\",{\"1\":{\"252\":3,\"253\":2,\"261\":1,\"266\":1}}],[\"docs\",{\"1\":{\"1\":1,\"347\":1}}],[\"dodispatch\",{\"1\":{\"223\":2,\"387\":1}}],[\"doprocess\",{\"1\":{\"171\":2}}],[\"doescapeforsend\",{\"1\":{\"163\":1,\"380\":1,\"382\":1}}],[\"doescapeforreceive\",{\"1\":{\"163\":1,\"380\":1,\"381\":1}}],[\"double\",{\"1\":{\"128\":3,\"134\":1,\"135\":3,\"260\":1,\"262\":2,\"263\":3,\"272\":3}}],[\"d\",{\"1\":{\"63\":1}}],[\"duration\",{\"1\":{\"61\":1}}],[\"decode\",{\"1\":{\"381\":1,\"387\":1,\"403\":1}}],[\"decoder\",{\"1\":{\"88\":1,\"92\":1,\"225\":1,\"369\":1}}],[\"deserialize\",{\"1\":{\"262\":2,\"267\":2}}],[\"description\",{\"1\":{\"322\":1,\"334\":1,\"388\":1}}],[\"desc=\",{\"1\":{\"225\":1}}],[\"desc\",{\"1\":{\"148\":1,\"160\":1,\"175\":4,\"186\":4,\"243\":1,\"252\":6,\"253\":4,\"261\":2,\"266\":2,\"322\":1,\"323\":1,\"334\":1,\"335\":1,\"361\":5,\"397\":1}}],[\"dependency>\",{\"1\":{\"191\":1,\"357\":2,\"358\":2}}],[\"dependencies>\",{\"1\":{\"357\":1,\"358\":1}}],[\"dependencies\",{\"1\":{\"191\":1,\"356\":1}}],[\"democontroller\",{\"1\":{\"196\":2,\"197\":2}}],[\"demo01\",{\"1\":{\"196\":1,\"197\":1}}],[\"demojt808servernettyconfigure\",{\"1\":{\"177\":1}}],[\"demo\",{\"1\":{\"148\":1}}],[\"delimiter\",{\"1\":{\"380\":2,\"381\":1}}],[\"delimiterbasedframedecoder\",{\"1\":{\"39\":1,\"95\":1}}],[\"delegate\",{\"1\":{\"262\":2,\"267\":2}}],[\"delegatehandlermethodargumentresolvers\",{\"1\":{\"142\":4}}],[\"dev\",{\"1\":{\"116\":1}}],[\"detection\",{\"1\":{\"38\":1,\"197\":1,\"205\":1,\"322\":1}}],[\"defaultspringbootbomversion=2\",{\"1\":{\"345\":1}}],[\"defaultspringbootbomversion\",{\"1\":{\"345\":2}}],[\"defaultjavaversion=11\",{\"1\":{\"344\":1}}],[\"defaultjavaversion\",{\"1\":{\"344\":3}}],[\"defaultjt808flowidgeneratorfactory\",{\"1\":{\"393\":1}}],[\"defaultjt808session\",{\"1\":{\"390\":2}}],[\"defaultjt808request\",{\"1\":{\"225\":1,\"381\":2}}],[\"defaultjt808msgbytesprocessor\",{\"1\":{\"380\":1}}],[\"defaultjt808msgencoder\",{\"1\":{\"92\":1,\"236\":2,\"382\":1}}],[\"defaultjt808msgdecoder\",{\"1\":{\"92\":1,\"381\":3}}],[\"defaultvalue\",{\"1\":{\"148\":2,\"196\":1,\"197\":1}}],[\"defaulteventexecutorgroup\",{\"1\":{\"80\":1}}],[\"default\",{\"1\":{\"35\":1,\"75\":1,\"116\":4,\"169\":1,\"196\":1,\"197\":2,\"199\":3,\"237\":4,\"238\":3,\"252\":6,\"253\":6,\"261\":1,\"266\":2,\"376\":1,\"377\":1,\"380\":1,\"382\":1,\"387\":6,\"392\":3,\"393\":3,\"394\":1,\"417\":1,\"420\":1,\"423\":1,\"424\":2}}],[\"debugterminalregistermsgv2013\",{\"1\":{\"210\":3}}],[\"debug\",{\"1\":{\"1\":2,\"171\":1,\"192\":1,\"225\":3,\"236\":2,\"239\":1,\"369\":2}}],[\"dferic\",{\"1\":{\"8\":1}}],[\"currenttimemillis\",{\"1\":{\"391\":1}}],[\"current\",{\"1\":{\"388\":1}}],[\"currentflowid\",{\"1\":{\"377\":2,\"393\":1}}],[\"customerfielddeserializerclass\",{\"1\":{\"261\":1,\"266\":1,\"326\":1}}],[\"customerfieldserializerclass\",{\"1\":{\"253\":4,\"337\":1}}],[\"customerdatatypeconverterclass\",{\"1\":{\"128\":3,\"135\":2,\"151\":1,\"161\":1}}],[\"customizeddemojt808config\",{\"1\":{\"179\":1,\"180\":1}}],[\"customized\",{\"1\":{\"1\":1,\"162\":1,\"163\":1,\"168\":1,\"173\":1,\"176\":1,\"177\":2,\"178\":1,\"180\":1}}],[\"credentials\",{\"1\":{\"347\":3}}],[\"cityid\",{\"1\":{\"328\":1,\"418\":2}}],[\"ctx\",{\"1\":{\"313\":2,\"316\":2,\"326\":1,\"327\":2,\"328\":1}}],[\"ch\",{\"1\":{\"385\":1}}],[\"checksum=0\",{\"1\":{\"225\":1}}],[\"changelog\",{\"1\":{\"347\":1}}],[\"channelhandlercontext\",{\"1\":{\"387\":1}}],[\"channelread\",{\"1\":{\"387\":1}}],[\"channelfuture\",{\"1\":{\"171\":1}}],[\"channel\",{\"1\":{\"169\":2,\"171\":3,\"377\":5,\"387\":4,\"391\":9}}],[\"charset\",{\"1\":{\"165\":8,\"196\":1}}],[\"chain\",{\"1\":{\"128\":1,\"148\":2,\"150\":1,\"156\":1,\"231\":1,\"265\":1,\"268\":1,\"272\":1,\"313\":2,\"316\":1,\"339\":1,\"384\":2,\"407\":2,\"411\":2,\"423\":1}}],[\"c\",{\"1\":{\"225\":1}}],[\"calculatechecksum\",{\"1\":{\"375\":1,\"380\":1,\"381\":1,\"382\":1}}],[\"calculatedchecksum\",{\"1\":{\"211\":1,\"375\":1}}],[\"caridentifier\",{\"1\":{\"328\":1,\"418\":2}}],[\"cannot\",{\"1\":{\"262\":1,\"267\":1}}],[\"cause\",{\"1\":{\"171\":1}}],[\"catch\",{\"1\":{\"145\":1,\"267\":1}}],[\"caffeinejt808responsesubpackagestorage\",{\"1\":{\"242\":1,\"394\":1}}],[\"caffeinejt808requestsubpackagestorage\",{\"1\":{\"224\":1,\"225\":2,\"226\":1,\"394\":1}}],[\"caffeine\",{\"1\":{\"104\":4,\"105\":4,\"224\":2,\"226\":1,\"242\":1}}],[\"closereason\",{\"1\":{\"392\":2}}],[\"clean\",{\"1\":{\"347\":2}}],[\"class<\",{\"1\":{\"253\":2,\"262\":1,\"267\":1}}],[\"class\",{\"1\":{\"123\":1,\"124\":2,\"128\":4,\"132\":2,\"135\":2,\"137\":1,\"138\":1,\"140\":1,\"141\":1,\"142\":1,\"145\":1,\"148\":3,\"150\":1,\"155\":1,\"156\":1,\"159\":2,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":2,\"171\":3,\"172\":1,\"176\":1,\"177\":1,\"179\":2,\"180\":2,\"181\":1,\"186\":18,\"192\":2,\"196\":1,\"197\":2,\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":2,\"211\":2,\"216\":1,\"219\":1,\"231\":2,\"234\":1,\"243\":1,\"251\":2,\"252\":9,\"253\":10,\"260\":1,\"261\":3,\"262\":6,\"263\":1,\"265\":1,\"266\":3,\"267\":5,\"268\":1,\"272\":1,\"313\":3,\"316\":3,\"323\":1,\"326\":1,\"328\":1,\"331\":1,\"335\":1,\"337\":1,\"339\":1,\"344\":4,\"352\":1,\"353\":1,\"362\":1,\"380\":1,\"381\":1,\"382\":1,\"388\":1,\"390\":1,\"391\":2,\"392\":1,\"393\":1,\"394\":1,\"397\":2,\"403\":2,\"404\":1,\"407\":2,\"408\":1,\"411\":2,\"412\":1,\"417\":1,\"418\":1,\"420\":1,\"421\":1,\"423\":2,\"424\":1}}],[\"clientregisterv2019\",{\"1\":{\"323\":1}}],[\"clientservice\",{\"1\":{\"162\":1}}],[\"client\",{\"1\":{\"1\":1,\"141\":2,\"145\":1,\"148\":2,\"155\":1,\"157\":1,\"159\":3,\"165\":1,\"167\":1,\"171\":6,\"172\":1,\"175\":2,\"176\":2,\"196\":1,\"197\":2,\"219\":1,\"234\":2,\"243\":1,\"323\":1,\"361\":2,\"362\":2,\"421\":1,\"423\":1,\"424\":1}}],[\"cpp\",{\"1\":{\"10\":1}}],[\"color=\",{\"1\":{\"384\":1}}],[\"color\",{\"1\":{\"328\":1,\"418\":2}}],[\"collectors\",{\"1\":{\"243\":1}}],[\"collect\",{\"1\":{\"243\":1}}],[\"collection<integer>\",{\"1\":{\"241\":1}}],[\"collection<bytebuf>\",{\"1\":{\"241\":1,\"243\":1}}],[\"collections\",{\"1\":{\"171\":1}}],[\"column\",{\"1\":{\"151\":1}}],[\"code\",{\"1\":{\"171\":3,\"382\":1,\"384\":3,\"393\":1}}],[\"codec\",{\"1\":{\"39\":1,\"92\":2,\"95\":1,\"225\":1,\"381\":1}}],[\"copiedbuffer\",{\"1\":{\"145\":1,\"171\":1}}],[\"consumer<jt808bytewriter>\",{\"1\":{\"419\":2}}],[\"conditionalon\",{\"1\":{\"231\":1,\"253\":4,\"337\":1,\"339\":1}}],[\"concatall\",{\"1\":{\"156\":1}}],[\"concurrent\",{\"1\":{\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"80\":1}}],[\"context\",{\"1\":{\"203\":1,\"262\":3,\"267\":4,\"327\":1}}],[\"contentlength\",{\"1\":{\"316\":3}}],[\"content\",{\"1\":{\"136\":1,\"316\":3}}],[\"controller\",{\"1\":{\"140\":1,\"215\":1,\"320\":1}}],[\"controlleradvice\",{\"1\":{\"123\":1}}],[\"convert2entity\",{\"1\":{\"167\":1}}],[\"convert\",{\"1\":{\"135\":1,\"262\":1,\"267\":1}}],[\"converters\",{\"0\":{\"49\":1}}],[\"configuresocketchannel\",{\"1\":{\"385\":1}}],[\"configureserverbootstrap\",{\"1\":{\"385\":1}}],[\"configure\",{\"1\":{\"347\":1}}],[\"configuremsghandlermapping\",{\"1\":{\"172\":2}}],[\"configuremsgconvertermapping\",{\"1\":{\"167\":2}}],[\"configuration\",{\"1\":{\"162\":1,\"163\":1,\"164\":1,\"167\":1,\"176\":1,\"177\":1,\"179\":1,\"180\":1,\"181\":1,\"362\":1,\"380\":1,\"381\":1,\"382\":1,\"391\":1,\"392\":1,\"393\":1,\"394\":1}}],[\"config\",{\"1\":{\"35\":2,\"38\":1,\"75\":2,\"164\":1,\"165\":1}}],[\"counter\",{\"1\":{\"388\":2}}],[\"count\",{\"0\":{\"42\":1,\"43\":1,\"84\":1,\"99\":1,\"100\":1},\"1\":{\"81\":1,\"97\":2,\"313\":1,\"388\":1,\"393\":5}}],[\"comparing\",{\"1\":{\"391\":1}}],[\"comparator\",{\"1\":{\"391\":1}}],[\"compilelevel\",{\"1\":{\"344\":1,\"352\":1}}],[\"components\",{\"0\":{\"89\":1},\"1\":{\"74\":1,\"88\":1,\"90\":1,\"91\":1,\"369\":1}}],[\"component\",{\"0\":{\"65\":1,\"90\":1},\"1\":{\"36\":1,\"65\":1,\"88\":1,\"90\":1,\"116\":2,\"143\":1,\"145\":1,\"192\":1,\"193\":1,\"197\":1,\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"216\":1,\"219\":1,\"231\":1,\"234\":1,\"243\":1,\"313\":1,\"316\":1,\"320\":1,\"323\":1,\"369\":1,\"371\":1}}],[\"commandwaitingpool\",{\"1\":{\"197\":2}}],[\"commandkey\",{\"1\":{\"197\":4}}],[\"commandfield\",{\"0\":{\"161\":1},\"1\":{\"148\":5,\"159\":3,\"161\":1}}],[\"commandmsg\",{\"1\":{\"148\":4}}],[\"commandsender\",{\"1\":{\"148\":3,\"196\":4,\"197\":5}}],[\"commonsuccessreply\",{\"1\":{\"171\":2}}],[\"commonreplymsgbody\",{\"1\":{\"141\":1,\"155\":1,\"156\":6,\"159\":1,\"171\":1}}],[\"commonhandler\",{\"1\":{\"140\":1,\"141\":1,\"155\":1,\"159\":1,\"197\":1,\"231\":1,\"323\":1}}],[\"common\",{\"1\":{\"1\":1,\"148\":2,\"156\":1,\"197\":2,\"206\":1,\"208\":1,\"423\":1,\"424\":1}}],[\"com\",{\"1\":{\"9\":2,\"10\":4,\"79\":2,\"186\":1,\"363\":2,\"408\":1,\"412\":1}}],[\"corepoolsize\",{\"1\":{\"59\":1,\"60\":1}}],[\"core\",{\"0\":{\"59\":1},\"1\":{\"1\":1,\"79\":1,\"344\":1,\"347\":2,\"352\":1,\"384\":4}}],[\"37\",{\"1\":{\"418\":2}}],[\"36\",{\"1\":{\"418\":2}}],[\"30\",{\"1\":{\"328\":4}}],[\"300\",{\"1\":{\"313\":2,\"407\":1,\"411\":1}}],[\"33\",{\"1\":{\"231\":1,\"239\":4}}],[\"38\",{\"1\":{\"225\":1}}],[\"32\",{\"1\":{\"185\":1,\"186\":1,\"404\":1}}],[\"31258614\",{\"1\":{\"134\":1}}],[\"34\",{\"1\":{\"128\":1,\"186\":1}}],[\"3\",{\"0\":{\"132\":1,\"358\":1,\"368\":1,\"400\":1},\"1\":{\"1\":1,\"101\":2,\"130\":1,\"132\":1,\"148\":1,\"156\":2,\"159\":3,\"188\":3,\"225\":4,\"231\":5,\"234\":4,\"239\":8,\"251\":4,\"260\":2,\"263\":2,\"272\":2,\"313\":2,\"316\":5,\"326\":1,\"328\":2,\"339\":5,\"341\":1,\"343\":2,\"344\":3,\"345\":2,\"351\":4,\"352\":1,\"353\":1,\"355\":1,\"356\":1,\"357\":3,\"358\":6,\"368\":1,\"397\":8,\"400\":1,\"404\":9,\"418\":1,\"421\":4,\"423\":2,\"424\":2}}],[\"x升级到2\",{\"0\":{\"396\":1}}],[\"x项目的区别\",{\"1\":{\"357\":3,\"358\":3}}],[\"xx\",{\"1\":{\"138\":1}}],[\"xxxserializer\",{\"1\":{\"337\":1}}],[\"xxxdeserializer\",{\"1\":{\"326\":1}}],[\"xxx\",{\"1\":{\"76\":1,\"79\":1,\"80\":1,\"82\":1,\"93\":1,\"96\":1,\"277\":5,\"286\":3,\"289\":3,\"296\":5,\"305\":3,\"308\":3,\"323\":1,\"347\":2,\"408\":1,\"412\":1}}],[\"xxxaware\",{\"1\":{\"23\":1}}],[\"x\",{\"0\":{\"23\":2,\"357\":1,\"358\":1,\"367\":1,\"368\":1,\"396\":1,\"399\":1,\"400\":1},\"1\":{\"1\":4,\"2\":1,\"18\":2,\"23\":3,\"67\":6,\"71\":5,\"231\":1,\"234\":1,\"251\":5,\"320\":1,\"339\":1,\"341\":2,\"343\":2,\"344\":4,\"345\":4,\"351\":9,\"353\":2,\"355\":3,\"357\":7,\"358\":4,\"367\":1,\"368\":1,\"374\":1,\"397\":15,\"399\":4,\"400\":4,\"404\":4,\"421\":1}}],[\"x不再依赖\",{\"1\":{\"1\":1}}],[\"└──\",{\"1\":{\"1\":2}}],[\"29\",{\"1\":{\"418\":2}}],[\"24\",{\"1\":{\"397\":1,\"404\":2}}],[\"27\",{\"1\":{\"326\":1}}],[\"25\",{\"1\":{\"239\":2}}],[\"22\",{\"1\":{\"128\":1,\"167\":1,\"251\":3,\"265\":1,\"268\":1,\"272\":2,\"316\":2,\"404\":2}}],[\"28\",{\"1\":{\"128\":1,\"137\":1,\"154\":1,\"251\":2,\"265\":1,\"268\":1,\"316\":5}}],[\"211\",{\"1\":{\"197\":1}}],[\"21\",{\"1\":{\"34\":2,\"403\":2}}],[\"21字节\",{\"1\":{\"34\":1}}],[\"2048\",{\"1\":{\"334\":1}}],[\"20l\",{\"1\":{\"197\":1}}],[\"2020\",{\"1\":{\"128\":1}}],[\"2021\",{\"1\":{\"25\":1}}],[\"200128080934\",{\"1\":{\"128\":1}}],[\"200\",{\"1\":{\"116\":1,\"313\":4,\"407\":2,\"411\":2}}],[\"20\",{\"1\":{\"62\":1,\"128\":1,\"154\":1,\"165\":1,\"167\":1,\"316\":2,\"403\":2,\"418\":2}}],[\"20m内没有发送数据的客户端将被断开\",{\"1\":{\"101\":1}}],[\"20m\",{\"1\":{\"44\":1,\"97\":1,\"101\":2}}],[\"2019\",{\"1\":{\"23\":1,\"25\":2,\"26\":1,\"216\":1,\"225\":1,\"231\":1,\"272\":1,\"312\":1,\"315\":1,\"316\":1,\"322\":1,\"323\":1,\"371\":1,\"376\":4,\"403\":1}}],[\"2013\",{\"1\":{\"23\":1,\"25\":2,\"26\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"216\":1,\"322\":2,\"408\":1,\"412\":1,\"423\":1,\"424\":1}}],[\"2011\",{\"1\":{\"23\":1,\"25\":2,\"26\":1,\"376\":4}}],[\"264官方文档\",{\"1\":{\"10\":1}}],[\"2\",{\"0\":{\"23\":1,\"131\":1,\"135\":1,\"146\":1,\"357\":1,\"367\":1,\"396\":1,\"399\":1},\"1\":{\"1\":4,\"2\":1,\"18\":1,\"20\":1,\"21\":1,\"23\":1,\"25\":1,\"30\":6,\"34\":6,\"60\":1,\"67\":3,\"71\":3,\"82\":2,\"84\":3,\"86\":2,\"101\":2,\"128\":1,\"131\":1,\"132\":1,\"137\":2,\"148\":2,\"153\":1,\"156\":2,\"159\":4,\"161\":1,\"167\":3,\"171\":1,\"186\":1,\"188\":3,\"197\":1,\"210\":1,\"225\":1,\"226\":1,\"231\":4,\"234\":4,\"239\":2,\"251\":3,\"262\":1,\"263\":1,\"265\":1,\"268\":1,\"272\":2,\"274\":3,\"275\":3,\"277\":2,\"278\":2,\"280\":3,\"281\":3,\"283\":3,\"284\":3,\"286\":2,\"287\":2,\"289\":2,\"290\":2,\"293\":3,\"294\":3,\"296\":2,\"297\":2,\"299\":3,\"300\":3,\"302\":3,\"303\":3,\"305\":2,\"306\":2,\"308\":2,\"309\":2,\"313\":7,\"316\":10,\"320\":1,\"326\":7,\"328\":5,\"329\":1,\"330\":1,\"331\":4,\"335\":1,\"337\":1,\"339\":4,\"341\":1,\"344\":2,\"345\":5,\"347\":1,\"348\":1,\"351\":6,\"352\":3,\"353\":1,\"355\":2,\"356\":2,\"357\":13,\"358\":6,\"367\":1,\"374\":1,\"376\":1,\"384\":1,\"397\":18,\"399\":4,\"400\":3,\"401\":1,\"404\":2,\"405\":1,\"409\":1,\"418\":3,\"421\":4,\"423\":3,\"424\":2}}],[\"集成相关的类\",{\"1\":{\"1\":1}}],[\"和第\",{\"1\":{\"403\":1}}],[\"和客户端对应的连接都用一个叫做\",{\"1\":{\"377\":1}}],[\"和上一个问题类似\",{\"1\":{\"251\":1}}],[\"和被\",{\"1\":{\"236\":1}}],[\"和文档中定义的数据类型都在枚举类\",{\"1\":{\"186\":1}}],[\"和其他\",{\"1\":{\"90\":1}}],[\"和\",{\"0\":{\"23\":1},\"1\":{\"1\":1,\"10\":1,\"14\":1,\"18\":1,\"25\":3,\"27\":1,\"71\":1,\"79\":1,\"112\":1,\"116\":2,\"150\":1,\"215\":1,\"223\":1,\"251\":3,\"255\":2,\"256\":3,\"272\":1,\"324\":1,\"327\":1,\"344\":1,\"352\":1,\"355\":1,\"378\":2,\"384\":1,\"397\":2,\"410\":1,\"411\":2,\"413\":1}}],[\"j\",{\"1\":{\"225\":2}}],[\"junit\",{\"1\":{\"165\":1}}],[\"jar文件\",{\"1\":{\"353\":1}}],[\"jar\",{\"1\":{\"353\":1}}],[\"jackson\",{\"1\":{\"79\":4}}],[\"javaweb\",{\"1\":{\"203\":1}}],[\"java线程池\",{\"1\":{\"58\":1}}],[\"java\",{\"1\":{\"27\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"165\":1,\"176\":1,\"252\":5,\"253\":4,\"261\":1,\"266\":1,\"344\":1,\"353\":3,\"402\":1}}],[\"jsr310\",{\"1\":{\"79\":1}}],[\"json\",{\"1\":{\"79\":2}}],[\"js\",{\"1\":{\"10\":1}}],[\"jmuxer\",{\"1\":{\"10\":1}}],[\"jdk版本\",{\"1\":{\"344\":2,\"348\":2,\"352\":1,\"353\":1,\"397\":1}}],[\"jdk版本要求\",{\"0\":{\"344\":1}}],[\"jdk\",{\"0\":{\"353\":1},\"1\":{\"2\":1,\"344\":18,\"348\":1,\"349\":1,\"352\":11,\"397\":8}}],[\"jdk11\",{\"1\":{\"343\":1,\"344\":2}}],[\"jdk11+\",{\"1\":{\"1\":1,\"353\":1}}],[\"jdk17\",{\"0\":{\"343\":1},\"1\":{\"343\":2,\"344\":1}}],[\"jdk17+\",{\"1\":{\"1\":1,\"343\":1,\"348\":1,\"353\":1}}],[\"jtprotocolutils\",{\"1\":{\"417\":2}}],[\"jtprotocolconstant\",{\"1\":{\"165\":2,\"380\":2,\"381\":1}}],[\"jtcommunicationexception\",{\"1\":{\"377\":1}}],[\"jt<\",{\"1\":{\"191\":1,\"357\":1,\"358\":1}}],[\"jtsessionnotfoundexception\",{\"1\":{\"145\":1}}],[\"jtt1078\",{\"1\":{\"10\":1}}],[\"jt1078\",{\"1\":{\"10\":2}}],[\"jt808bytereadertest\",{\"1\":{\"417\":1}}],[\"jt808bytereader\",{\"0\":{\"416\":1},\"1\":{\"416\":2,\"417\":3,\"418\":1}}],[\"jt808bytewritertest\",{\"1\":{\"420\":1}}],[\"jt808bytewriter\",{\"0\":{\"419\":1},\"1\":{\"237\":1,\"376\":1,\"419\":1,\"420\":3,\"421\":1,\"424\":2}}],[\"jt808dispatchchannelhandleradapter\",{\"1\":{\"387\":1}}],[\"jt808dispatcherhandler\",{\"1\":{\"387\":3}}],[\"jt808flowidgeneratorfactory\",{\"1\":{\"393\":5}}],[\"jt808flowidgenerator\",{\"0\":{\"393\":1},\"1\":{\"377\":1,\"393\":2,\"423\":2,\"424\":2}}],[\"jt808fieldserializerexception\",{\"1\":{\"267\":1}}],[\"jt808fieldserializer\",{\"1\":{\"253\":2,\"255\":1,\"256\":1}}],[\"jt808fieldserializer<\",{\"1\":{\"253\":2}}],[\"jt808fielddeserializer\",{\"1\":{\"251\":1,\"255\":1,\"256\":1}}],[\"jt808annotationargumentresolveexception\",{\"1\":{\"262\":1,\"267\":1}}],[\"jt808argumentresolveexception\",{\"1\":{\"203\":1}}],[\"jt808handlermapping\",{\"1\":{\"213\":2}}],[\"jt808handlermethodargumentresolver\",{\"1\":{\"203\":3}}],[\"jt808handlerresulthandler\",{\"1\":{\"228\":3,\"387\":2}}],[\"jt808handlerresult\",{\"1\":{\"199\":1,\"228\":2,\"387\":4}}],[\"jt808handlerinterceptor\",{\"1\":{\"23\":1,\"199\":3}}],[\"jt808commandkey\",{\"1\":{\"197\":4}}],[\"jt808commandsender\",{\"1\":{\"196\":2,\"197\":2}}],[\"jt808configuration\",{\"1\":{\"181\":1}}],[\"jt808config\",{\"1\":{\"162\":1,\"163\":1,\"164\":1,\"167\":1,\"172\":1,\"176\":1,\"177\":1}}],[\"jt808channelhandleradapter\",{\"1\":{\"177\":3}}],[\"jt808msgdecoder\",{\"0\":{\"381\":1},\"1\":{\"381\":6}}],[\"jt808msgescapeexception\",{\"1\":{\"380\":2}}],[\"jt808msgencoder\",{\"0\":{\"382\":1},\"1\":{\"236\":1,\"382\":7}}],[\"jt808msgbytesprocessor\",{\"0\":{\"380\":1},\"1\":{\"375\":1,\"380\":5,\"381\":3,\"382\":3}}],[\"jt808msgbuilder\",{\"1\":{\"165\":3,\"422\":2,\"423\":2,\"424\":1}}],[\"jt808msgbuildertest\",{\"1\":{\"165\":1,\"423\":1,\"424\":1}}],[\"jt808msgtypeparser\",{\"0\":{\"362\":1},\"1\":{\"362\":6,\"381\":3}}],[\"jt808msgtype>\",{\"1\":{\"175\":1}}],[\"jt808msgtype\",{\"1\":{\"167\":1,\"172\":1,\"175\":3,\"176\":1}}],[\"jt808msgheaderbuilder\",{\"1\":{\"165\":2}}],[\"jt808serverexchange\",{\"0\":{\"208\":1,\"378\":1},\"1\":{\"199\":3,\"204\":1,\"208\":2,\"209\":1,\"219\":1,\"234\":1,\"378\":2,\"384\":1,\"387\":8,\"418\":1,\"421\":1}}],[\"jt808serversamplebareapplication\",{\"1\":{\"192\":2}}],[\"jt808servernettyconfigure\",{\"1\":{\"177\":2,\"385\":2}}],[\"jt808serverconfigure\",{\"1\":{\"164\":1}}],[\"jt808serverconfigurationsupport\",{\"1\":{\"162\":1,\"163\":1,\"164\":2,\"167\":1,\"172\":1,\"176\":1,\"177\":2,\"179\":1,\"180\":1,\"181\":1}}],[\"jt808sessioneventlistener\",{\"0\":{\"392\":1},\"1\":{\"392\":5}}],[\"jt808sessionmanagereventlistener\",{\"0\":{\"180\":1},\"1\":{\"180\":2}}],[\"jt808sessionmanager\",{\"0\":{\"179\":1,\"391\":1},\"1\":{\"145\":1,\"179\":4,\"196\":2,\"197\":2,\"243\":2,\"390\":1,\"391\":11,\"392\":2}}],[\"jt808session\",{\"0\":{\"207\":1,\"377\":1,\"390\":1},\"1\":{\"141\":1,\"142\":1,\"180\":2,\"196\":1,\"197\":1,\"204\":1,\"207\":2,\"210\":1,\"211\":1,\"243\":1,\"338\":1,\"377\":4,\"378\":2,\"390\":3,\"391\":1,\"392\":11,\"423\":1,\"424\":1}}],[\"jt808responsebuilder\",{\"1\":{\"419\":1}}],[\"jt808responsebody\",{\"0\":{\"229\":1,\"238\":1,\"333\":1},\"1\":{\"228\":1,\"231\":2,\"236\":1,\"238\":2,\"335\":1,\"339\":1,\"407\":1,\"411\":1,\"421\":1,\"423\":2}}],[\"jt808responsebodyhandlerresulthandler\",{\"1\":{\"228\":1}}],[\"jt808responsesubpackage\",{\"1\":{\"241\":1}}],[\"jt808responsesubpackagestorage\",{\"1\":{\"241\":3,\"242\":2,\"243\":2,\"394\":2}}],[\"jt808responsehandlerresulthandler\",{\"1\":{\"228\":2}}],[\"jt808response\",{\"0\":{\"206\":1,\"232\":1,\"237\":1,\"376\":1},\"1\":{\"204\":1,\"206\":3,\"207\":2,\"208\":1,\"209\":2,\"220\":2,\"228\":1,\"234\":2,\"236\":1,\"237\":3,\"238\":3,\"241\":1,\"376\":2,\"378\":2,\"382\":3,\"418\":1,\"419\":1,\"421\":2}}],[\"jt808respmsgbody\",{\"0\":{\"158\":1},\"1\":{\"148\":1,\"158\":1,\"159\":1}}],[\"jt808requestlifecyclelistener\",{\"1\":{\"387\":3,\"388\":1}}],[\"jt808requestaware\",{\"0\":{\"248\":1},\"1\":{\"248\":1}}],[\"jt808requestmsgdispatcher\",{\"1\":{\"223\":2,\"387\":1,\"394\":1}}],[\"jt808requestmsghandleradvice\",{\"0\":{\"123\":1},\"1\":{\"123\":1,\"124\":1}}],[\"jt808requestmsghandler\",{\"0\":{\"140\":1},\"1\":{\"114\":1,\"140\":2,\"141\":1,\"155\":1,\"159\":1}}],[\"jt808requestmsghandlermapping\",{\"0\":{\"141\":1},\"1\":{\"51\":1,\"141\":2,\"142\":1,\"155\":1,\"157\":1,\"159\":1}}],[\"jt808requestsubpackagestorage\",{\"1\":{\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"394\":2}}],[\"jt808requestbody\",{\"0\":{\"210\":1,\"324\":1},\"1\":{\"210\":2,\"211\":1,\"251\":2,\"260\":1,\"263\":1,\"265\":1,\"268\":1,\"313\":1,\"316\":1,\"328\":1,\"331\":1,\"418\":1}}],[\"jt808requestbody标记的自定义类型\",{\"1\":{\"204\":1}}],[\"jt808requestentity<locationuploadmsgv2019>\",{\"1\":{\"316\":1}}],[\"jt808requestentity<locationbatchuploadmsgv2019>\",{\"1\":{\"313\":1}}],[\"jt808requestentity<terminalregistermsgv2019>\",{\"1\":{\"216\":1,\"231\":1}}],[\"jt808requestentity<t>\",{\"1\":{\"211\":1}}],[\"jt808requestentity<builtinmsg0100v2019>\",{\"1\":{\"323\":1}}],[\"jt808requestentity<builtinmsg0005>\",{\"1\":{\"243\":1}}],[\"jt808requestentity<builtinmsg0704v2013>\",{\"1\":{\"211\":1}}],[\"jt808requestentity<builtinterminalcommonreplymsg>\",{\"1\":{\"197\":1}}],[\"jt808requestentity\",{\"0\":{\"211\":1},\"1\":{\"204\":1}}],[\"jt808requestheaderaware\",{\"0\":{\"247\":1},\"1\":{\"247\":1}}],[\"jt808requestheader\",{\"0\":{\"209\":1},\"1\":{\"204\":1,\"209\":1,\"211\":1,\"247\":2,\"375\":1}}],[\"jt808requesthandlermappinghandlermapping\",{\"1\":{\"213\":1}}],[\"jt808requesthandlermapping\",{\"0\":{\"214\":1,\"321\":1},\"1\":{\"197\":1,\"199\":6,\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"213\":1,\"215\":1,\"216\":2,\"231\":1,\"243\":1,\"313\":1,\"316\":1,\"323\":1}}],[\"jt808requesthandler\",{\"0\":{\"320\":1},\"1\":{\"197\":1,\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"216\":2,\"231\":1,\"243\":1,\"313\":1,\"316\":1,\"320\":1,\"323\":1,\"324\":1,\"387\":2}}],[\"jt808request\",{\"0\":{\"205\":1,\"375\":1},\"1\":{\"203\":2,\"204\":1,\"205\":2,\"206\":1,\"210\":1,\"216\":1,\"220\":2,\"223\":6,\"248\":2,\"327\":2,\"338\":2,\"375\":3,\"376\":1,\"378\":2,\"381\":6,\"387\":4,\"388\":1,\"413\":1,\"416\":1}}],[\"jt808requestfilterchain\",{\"1\":{\"384\":1}}],[\"jt808requestfilter\",{\"0\":{\"384\":1},\"1\":{\"78\":2,\"384\":2}}],[\"jt808reqmsgbody\",{\"0\":{\"150\":1},\"1\":{\"46\":1,\"113\":1,\"115\":1,\"128\":1,\"132\":1,\"150\":1,\"272\":1}}],[\"jt808exceptionhandler\",{\"0\":{\"124\":1},\"1\":{\"124\":1}}],[\"jt808terminalheatbeathandler\",{\"1\":{\"101\":1}}],[\"jt808protocolversiondetectorregistry\",{\"1\":{\"381\":1}}],[\"jt808protocolversion\",{\"1\":{\"38\":1,\"197\":1,\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"219\":1,\"234\":1,\"272\":1,\"376\":5,\"377\":1,\"391\":2,\"408\":1,\"412\":1,\"423\":1,\"424\":1}}],[\"jt808\",{\"1\":{\"9\":2,\"27\":2,\"35\":2,\"36\":1,\"44\":1,\"65\":1,\"74\":1,\"75\":2,\"76\":1,\"77\":1,\"78\":1,\"79\":2,\"80\":1,\"81\":1,\"88\":1,\"90\":1,\"91\":2,\"92\":2,\"93\":1,\"94\":1,\"96\":1,\"97\":1,\"101\":2,\"104\":2,\"105\":3,\"115\":2,\"164\":2,\"192\":1,\"193\":3,\"196\":1,\"224\":5,\"225\":1,\"242\":3,\"263\":1,\"268\":1,\"318\":2,\"369\":1,\"371\":1,\"380\":2,\"381\":3,\"384\":2,\"387\":3,\"388\":1,\"390\":1}}],[\"jt\",{\"0\":{\"9\":1,\"10\":1,\"182\":1,\"426\":1,\"428\":1},\"1\":{\"1\":13,\"27\":3,\"38\":1,\"79\":1,\"88\":2,\"91\":1,\"92\":4,\"118\":1,\"126\":1,\"138\":1,\"139\":1,\"143\":1,\"144\":1,\"148\":1,\"162\":1,\"163\":1,\"165\":4,\"168\":1,\"173\":1,\"176\":1,\"177\":2,\"178\":1,\"180\":1,\"186\":2,\"189\":1,\"191\":2,\"194\":1,\"196\":1,\"225\":2,\"236\":2,\"263\":1,\"268\":1,\"318\":2,\"341\":2,\"343\":1,\"344\":7,\"345\":1,\"347\":12,\"351\":3,\"352\":5,\"355\":4,\"356\":2,\"357\":6,\"358\":6,\"363\":2,\"364\":1,\"367\":1,\"368\":1,\"369\":2,\"373\":1,\"380\":2,\"381\":3,\"387\":3,\"388\":1,\"390\":1,\"397\":7,\"399\":2,\"400\":2,\"416\":1,\"419\":1}}],[\"valid\",{\"1\":{\"171\":2}}],[\"validateterminal\",{\"1\":{\"181\":1}}],[\"validateauthcode\",{\"1\":{\"171\":1}}],[\"validate\",{\"1\":{\"162\":1}}],[\"valueof\",{\"1\":{\"262\":1,\"391\":1}}],[\"values\",{\"1\":{\"175\":2,\"361\":2}}],[\"value\",{\"1\":{\"159\":1,\"237\":1,\"361\":3,\"412\":1}}],[\"voidrespmsgbody\",{\"1\":{\"157\":1}}],[\"void\",{\"1\":{\"109\":1,\"110\":1,\"111\":1,\"124\":1,\"142\":1,\"145\":1,\"157\":1,\"165\":2,\"167\":1,\"169\":1,\"171\":2,\"172\":1,\"180\":1,\"192\":1,\"196\":1,\"197\":1,\"199\":2,\"205\":1,\"223\":1,\"241\":1,\"243\":1,\"247\":1,\"248\":1,\"377\":1,\"384\":1,\"385\":2,\"390\":1,\"392\":3,\"403\":2,\"404\":1,\"408\":1,\"412\":1,\"417\":1,\"420\":1,\"423\":1,\"424\":1}}],[\"version=version\",{\"1\":{\"225\":1}}],[\"versions\",{\"1\":{\"197\":1,\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"216\":2,\"231\":1,\"316\":1,\"322\":1,\"323\":1}}],[\"version>\",{\"1\":{\"191\":1,\"357\":2,\"358\":2}}],[\"version\",{\"0\":{\"38\":1},\"1\":{\"191\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"216\":2,\"231\":1,\"234\":2,\"272\":2,\"316\":1,\"322\":3,\"323\":1,\"348\":1,\"349\":1,\"353\":3,\"357\":3,\"358\":3,\"376\":9,\"388\":2,\"391\":4,\"397\":5,\"408\":2,\"412\":2,\"421\":2,\"423\":2,\"424\":2}}],[\"v1\",{\"0\":{\"35\":1,\"66\":1,\"427\":1}}],[\"v\",{\"1\":{\"26\":3}}],[\"video\",{\"1\":{\"10\":1}}],[\"v2019\",{\"0\":{\"32\":1},\"1\":{\"20\":1,\"231\":1,\"313\":1,\"316\":1,\"323\":1}}],[\"v2013\",{\"0\":{\"31\":1},\"1\":{\"20\":1,\"25\":2,\"234\":1}}],[\"v2011\",{\"0\":{\"28\":1},\"1\":{\"20\":1,\"25\":1,\"31\":1,\"219\":1}}],[\"v2\",{\"0\":{\"76\":1,\"250\":1,\"257\":1,\"270\":1,\"384\":1,\"401\":1,\"405\":1,\"409\":1,\"429\":1},\"1\":{\"1\":1,\"27\":1,\"74\":1,\"78\":1,\"84\":2,\"86\":2,\"258\":1,\"313\":1,\"316\":1,\"318\":1,\"411\":2}}],[\"v3\",{\"1\":{\"1\":1}}],[\"vuepress\",{\"1\":{\"2\":1,\"6\":2,\"7\":2,\"11\":2}}],[\"vue\",{\"1\":{\"1\":1}}],[\"by\",{\"1\":{\"388\":1}}],[\"bytearraycontainer\",{\"0\":{\"405\":1},\"1\":{\"274\":1,\"275\":1,\"277\":1,\"278\":1,\"280\":1,\"281\":1,\"283\":1,\"284\":1,\"286\":1,\"287\":1,\"289\":1,\"290\":1,\"293\":1,\"294\":1,\"296\":1,\"297\":1,\"299\":1,\"300\":1,\"302\":1,\"303\":1,\"305\":1,\"306\":1,\"308\":1,\"309\":1,\"316\":1,\"405\":1,\"406\":2,\"407\":3,\"408\":6,\"411\":3,\"413\":1}}],[\"bytecount\",{\"1\":{\"186\":4}}],[\"bytecountofcontentlength\",{\"1\":{\"138\":1,\"154\":2}}],[\"bytecountofmsgid\",{\"1\":{\"138\":1,\"154\":2}}],[\"bytecountmethod\",{\"1\":{\"137\":2,\"151\":2,\"154\":1}}],[\"bytesprocessor\",{\"1\":{\"381\":2}}],[\"bytes2bcdstring\",{\"1\":{\"167\":1}}],[\"bytes2hexstring\",{\"1\":{\"165\":3}}],[\"bytesvaluewrapper\",{\"1\":{\"148\":2}}],[\"bytescountofcontentlength\",{\"1\":{\"148\":2}}],[\"bytesencoder\",{\"1\":{\"111\":5,\"163\":3}}],[\"bytesencoderaware\",{\"0\":{\"111\":1},\"1\":{\"111\":1}}],[\"bytes\",{\"0\":{\"276\":1,\"295\":1},\"1\":{\"27\":1,\"130\":1,\"135\":1,\"137\":1,\"138\":1,\"151\":2,\"156\":1,\"163\":2,\"165\":2,\"167\":9,\"171\":2,\"186\":1,\"277\":5,\"278\":5,\"296\":5,\"297\":5,\"316\":2,\"326\":1,\"407\":1,\"408\":1,\"411\":1,\"412\":1}}],[\"byte\",{\"0\":{\"273\":1,\"292\":1},\"1\":{\"23\":1,\"27\":1,\"30\":7,\"34\":8,\"115\":1,\"130\":1,\"135\":3,\"136\":2,\"137\":3,\"138\":5,\"148\":2,\"151\":2,\"152\":1,\"153\":1,\"156\":5,\"159\":4,\"163\":4,\"165\":5,\"166\":1,\"167\":1,\"169\":1,\"171\":8,\"185\":2,\"186\":4,\"188\":7,\"210\":1,\"211\":2,\"231\":7,\"234\":4,\"251\":8,\"260\":2,\"263\":2,\"265\":1,\"268\":1,\"274\":9,\"275\":9,\"277\":1,\"278\":1,\"293\":9,\"294\":9,\"296\":2,\"297\":2,\"313\":6,\"316\":14,\"323\":1,\"328\":6,\"329\":1,\"331\":1,\"337\":1,\"339\":6,\"375\":2,\"376\":5,\"380\":1,\"406\":1,\"407\":4,\"408\":3,\"410\":2,\"411\":7,\"412\":3,\"418\":4,\"421\":4,\"423\":2,\"424\":1}}],[\"bytebufjt808msgbuilder\",{\"0\":{\"424\":1},\"1\":{\"419\":1,\"424\":1}}],[\"bytebufcontainerfieldserializer\",{\"1\":{\"413\":1}}],[\"bytebufcontainer\",{\"0\":{\"409\":1},\"1\":{\"274\":1,\"275\":1,\"277\":1,\"278\":1,\"280\":1,\"281\":1,\"283\":1,\"284\":1,\"286\":1,\"287\":1,\"289\":1,\"290\":1,\"293\":1,\"294\":1,\"296\":1,\"297\":1,\"299\":1,\"300\":1,\"302\":1,\"303\":1,\"305\":1,\"306\":1,\"308\":1,\"309\":1,\"316\":1,\"406\":2,\"407\":2,\"409\":1,\"411\":5,\"412\":11,\"413\":5}}],[\"bytebuftostring\",{\"1\":{\"243\":1,\"420\":2,\"423\":1,\"424\":1}}],[\"bytebufallocator\",{\"1\":{\"196\":1,\"197\":2,\"380\":1,\"382\":1,\"394\":1,\"417\":1,\"420\":1,\"424\":1}}],[\"bytebuf\",{\"1\":{\"23\":1,\"196\":1,\"211\":1,\"251\":2,\"262\":3,\"267\":3,\"277\":1,\"278\":1,\"296\":1,\"297\":1,\"375\":3,\"376\":1,\"377\":3,\"380\":11,\"381\":5,\"382\":3,\"387\":4,\"406\":1,\"407\":2,\"410\":2,\"411\":4,\"416\":1,\"417\":3,\"419\":1,\"420\":4,\"423\":1,\"424\":4}}],[\"binarystring\",{\"1\":{\"404\":6}}],[\"bigdecimal\",{\"1\":{\"262\":3,\"263\":3,\"272\":1}}],[\"bitoperatortest\",{\"1\":{\"404\":1}}],[\"bitoperator\",{\"0\":{\"401\":1},\"1\":{\"274\":1,\"275\":1,\"280\":1,\"281\":1,\"283\":1,\"284\":1,\"293\":1,\"294\":1,\"299\":1,\"300\":1,\"302\":1,\"303\":1,\"401\":1,\"402\":2,\"403\":3,\"404\":8}}],[\"bit0to1\",{\"1\":{\"132\":1}}],[\"bit1\",{\"1\":{\"132\":1}}],[\"bitatrange\",{\"1\":{\"132\":1}}],[\"bitat\",{\"1\":{\"132\":4}}],[\"bitindex\",{\"1\":{\"128\":3,\"131\":3,\"132\":4,\"153\":1,\"316\":3,\"330\":1,\"331\":3}}],[\"bit\",{\"1\":{\"30\":4,\"34\":5,\"130\":1,\"188\":4,\"269\":1,\"334\":1,\"402\":1,\"403\":3,\"404\":6}}],[\"beforeresponse\",{\"1\":{\"387\":1}}],[\"beforeencode\",{\"1\":{\"387\":1}}],[\"beforehandle\",{\"1\":{\"387\":1}}],[\"beforedispatch\",{\"1\":{\"387\":2,\"388\":1}}],[\"beforedecode\",{\"1\":{\"387\":1}}],[\"bean\",{\"1\":{\"362\":1,\"380\":2,\"381\":1,\"382\":2,\"385\":1,\"391\":2,\"392\":3,\"393\":2,\"394\":3}}],[\"be\",{\"1\":{\"145\":1,\"157\":1,\"196\":1,\"347\":1}}],[\"beta\",{\"1\":{\"2\":1}}],[\"buffer\",{\"1\":{\"196\":2,\"197\":2,\"417\":1,\"420\":1,\"424\":1}}],[\"bug\",{\"1\":{\"67\":3,\"71\":1,\"101\":1}}],[\"built\",{\"0\":{\"89\":1},\"1\":{\"74\":1,\"88\":1,\"90\":1,\"91\":1,\"369\":1}}],[\"builtinmsg8103alias\",{\"1\":{\"411\":1,\"412\":7}}],[\"builtinmsg8103test\",{\"1\":{\"408\":1,\"412\":1}}],[\"builtinmsg8103\",{\"1\":{\"407\":1,\"408\":7}}],[\"builtinmsg8100\",{\"1\":{\"219\":1}}],[\"builtinmsg0200test\",{\"1\":{\"403\":1}}],[\"builtinmsg0200v2013\",{\"1\":{\"331\":1}}],[\"builtinmsg0200v2013alias\",{\"1\":{\"260\":1,\"263\":1,\"265\":1,\"268\":1}}],[\"builtinmsg0200v2019alias\",{\"1\":{\"251\":1,\"403\":3}}],[\"builtinmsg0200v2019\",{\"1\":{\"251\":1}}],[\"builtinmsg0100v2019\",{\"1\":{\"323\":1,\"328\":1}}],[\"builtinmsg0005\",{\"1\":{\"243\":2}}],[\"builtinmsg0704\",{\"1\":{\"211\":1}}],[\"builtinmsgxxxalias\",{\"1\":{\"27\":1,\"318\":1}}],[\"builtinmsgxxx\",{\"1\":{\"27\":1,\"318\":1}}],[\"builtinservercommonreplymsg\",{\"1\":{\"211\":2,\"313\":2,\"316\":2}}],[\"builtincommonhandler\",{\"1\":{\"211\":1}}],[\"builtincomponent\",{\"1\":{\"171\":1,\"265\":1,\"268\":1,\"313\":1}}],[\"builtinterminalcommonreplymsg\",{\"1\":{\"197\":1}}],[\"builtinauthcodevalidatorfordebugging\",{\"1\":{\"193\":1}}],[\"builtinauthmsghandler\",{\"1\":{\"193\":1}}],[\"builtinjt808msgtype\",{\"1\":{\"141\":2,\"155\":1,\"156\":1,\"159\":2,\"165\":2,\"171\":5,\"176\":1,\"197\":2,\"206\":1,\"208\":1,\"219\":1,\"234\":2,\"362\":1,\"408\":1,\"412\":1,\"421\":1,\"423\":1,\"424\":1}}],[\"builtindefaultexceptionhandler\",{\"1\":{\"123\":1,\"124\":3}}],[\"builtin\",{\"0\":{\"47\":1,\"49\":1,\"53\":1,\"57\":1},\"1\":{\"27\":2,\"91\":1,\"115\":1,\"116\":1,\"318\":2}}],[\"buildsession\",{\"1\":{\"391\":2}}],[\"builder\",{\"1\":{\"165\":6,\"388\":1,\"408\":2,\"412\":2,\"423\":3,\"424\":3}}],[\"build\",{\"1\":{\"1\":1,\"165\":9,\"234\":1,\"347\":5,\"421\":1,\"423\":1,\"424\":1}}],[\"blocking\",{\"0\":{\"62\":1}}],[\"blob\",{\"1\":{\"10\":1}}],[\"bat\",{\"1\":{\"347\":1}}],[\"basic\",{\"1\":{\"151\":1}}],[\"basicfield解析\",{\"0\":{\"137\":1}}],[\"basicfield\",{\"0\":{\"151\":1},\"1\":{\"128\":11,\"130\":1,\"131\":1,\"132\":1,\"134\":1,\"135\":1,\"137\":4,\"151\":2,\"186\":1}}],[\"basereqrespmsgtest\",{\"1\":{\"403\":1,\"408\":1,\"412\":1}}],[\"based\",{\"1\":{\"116\":1}}],[\"base\",{\"0\":{\"48\":1,\"52\":1,\"56\":1}}],[\"bare\",{\"1\":{\"1\":2,\"189\":1,\"194\":1,\"364\":1,\"373\":1}}],[\"bodyasreader\",{\"1\":{\"416\":1,\"418\":1}}],[\"body\",{\"1\":{\"165\":2,\"167\":10,\"169\":1,\"171\":7,\"197\":4,\"211\":3,\"216\":3,\"223\":1,\"231\":1,\"234\":1,\"243\":4,\"313\":1,\"316\":1,\"323\":3,\"375\":1,\"376\":1,\"387\":1,\"419\":2,\"421\":1,\"423\":1,\"424\":1}}],[\"boolean\",{\"1\":{\"46\":1,\"47\":1,\"49\":1,\"51\":1,\"53\":1,\"55\":1,\"57\":1,\"65\":1,\"90\":1,\"91\":1,\"116\":1,\"128\":2,\"131\":2,\"132\":2,\"162\":1,\"171\":2,\"181\":2,\"199\":1,\"203\":1,\"316\":2,\"331\":2,\"377\":1,\"387\":6,\"388\":1}}],[\"boot<\",{\"1\":{\"357\":2,\"358\":2}}],[\"boot版本\",{\"1\":{\"352\":1,\"356\":3,\"397\":2}}],[\"boot版本要求\",{\"0\":{\"345\":1}}],[\"boot3\",{\"1\":{\"1\":1}}],[\"boot2<\",{\"1\":{\"357\":1}}],[\"boot2\",{\"1\":{\"1\":1,\"341\":1,\"344\":1,\"347\":2,\"351\":1,\"352\":1,\"355\":2,\"357\":3,\"367\":1,\"397\":4,\"399\":3}}],[\"boot\",{\"0\":{\"354\":1,\"357\":1,\"358\":1,\"367\":1,\"368\":1,\"399\":1,\"400\":1},\"1\":{\"1\":8,\"164\":1,\"190\":2,\"191\":3,\"193\":1,\"341\":5,\"343\":3,\"344\":9,\"345\":7,\"347\":6,\"351\":11,\"352\":4,\"353\":2,\"355\":6,\"356\":4,\"357\":16,\"358\":16,\"365\":2,\"367\":2,\"368\":2,\"371\":1,\"397\":22,\"399\":3,\"400\":3}}],[\"bossthreadcount\",{\"1\":{\"42\":1,\"99\":1}}],[\"bossgroup=new\",{\"1\":{\"99\":1}}],[\"bossgroup\",{\"1\":{\"42\":1}}],[\"boss\",{\"0\":{\"42\":1,\"99\":1},\"1\":{\"97\":1}}],[\"bcdstring\",{\"1\":{\"417\":2}}],[\"bcdfielddeserializer\",{\"1\":{\"267\":2}}],[\"bcddatetime\",{\"0\":{\"264\":1},\"1\":{\"266\":1,\"267\":2,\"268\":2,\"272\":2,\"316\":1}}],[\"bcdops\",{\"1\":{\"167\":1}}],[\"bcd\",{\"0\":{\"285\":1,\"304\":1},\"1\":{\"27\":1,\"30\":1,\"34\":1,\"128\":2,\"185\":1,\"186\":1,\"188\":1,\"251\":4,\"252\":2,\"265\":4,\"266\":1,\"267\":4,\"268\":2,\"272\":3,\"286\":3,\"287\":3,\"305\":3,\"306\":3,\"316\":3,\"376\":4,\"417\":1}}],[\"s\",{\"1\":{\"225\":1}}],[\"savesubpackage\",{\"1\":{\"223\":2,\"241\":1}}],[\"samplemsghandler\",{\"1\":{\"171\":1}}],[\"samplecontroller\",{\"1\":{\"148\":1}}],[\"sample\",{\"1\":{\"1\":6,\"126\":1,\"138\":1,\"139\":1,\"143\":1,\"144\":1,\"148\":1,\"162\":1,\"163\":1,\"168\":1,\"173\":1,\"176\":1,\"177\":2,\"178\":1,\"180\":1,\"189\":1,\"194\":1,\"364\":1,\"373\":1}}],[\"samples\",{\"1\":{\"1\":1,\"126\":1,\"138\":1,\"139\":1,\"143\":1,\"144\":1,\"148\":1,\"162\":1,\"163\":1,\"168\":1,\"173\":1,\"176\":1,\"177\":2,\"178\":1,\"180\":1,\"189\":1,\"194\":1,\"347\":1,\"363\":3,\"364\":1,\"373\":1}}],[\"since\",{\"1\":{\"384\":1}}],[\"singleton\",{\"1\":{\"171\":1}}],[\"simpledateformat\",{\"1\":{\"267\":1}}],[\"simplejt808requesthandler<jt808response>\",{\"1\":{\"234\":1,\"418\":1,\"421\":1}}],[\"simplejt808requesthandler<builtinmsg8100>\",{\"1\":{\"219\":1}}],[\"simplejt808requesthandlerhandlermapping\",{\"1\":{\"213\":1}}],[\"simplejt808requesthandler\",{\"0\":{\"217\":1},\"1\":{\"199\":6,\"213\":1,\"218\":1,\"219\":1,\"387\":2}}],[\"size\",{\"0\":{\"59\":1,\"60\":1,\"62\":1},\"1\":{\"62\":1,\"104\":1,\"105\":1,\"148\":1,\"197\":1,\"237\":5,\"238\":2,\"376\":1,\"408\":1,\"412\":1}}],[\"sync\",{\"1\":{\"171\":1}}],[\"system\",{\"1\":{\"165\":3,\"391\":1}}],[\"symphonia\",{\"1\":{\"10\":1}}],[\"short\",{\"1\":{\"152\":1,\"153\":1,\"167\":3,\"186\":4,\"274\":2,\"275\":2,\"280\":2,\"281\":2,\"293\":2,\"294\":2,\"299\":2,\"300\":2,\"329\":1}}],[\"shouldbereplacedby\",{\"1\":{\"116\":1}}],[\"sorted\",{\"1\":{\"391\":1}}],[\"socketchannel\",{\"1\":{\"385\":1}}],[\"sommethodname\",{\"1\":{\"326\":2}}],[\"somemethod\",{\"1\":{\"327\":2,\"338\":2}}],[\"somefield\",{\"1\":{\"327\":2,\"338\":2,\"390\":5}}],[\"somefieldvalue\",{\"1\":{\"326\":1}}],[\"somerequesthandler\",{\"1\":{\"216\":1}}],[\"some\",{\"1\":{\"196\":1,\"322\":1,\"334\":1}}],[\"somecontroller\",{\"1\":{\"145\":1}}],[\"someclass\",{\"1\":{\"138\":1}}],[\"sourcefieldname\",{\"1\":{\"128\":3,\"131\":3,\"153\":1,\"316\":3,\"330\":1,\"331\":3}}],[\"sokit\",{\"1\":{\"14\":3}}],[\"slicedfrom解析\",{\"0\":{\"131\":1}}],[\"slicedfrom\",{\"0\":{\"153\":1,\"329\":1},\"1\":{\"128\":3,\"131\":3,\"316\":3,\"331\":3}}],[\"slf4j\",{\"1\":{\"123\":1,\"124\":1,\"141\":1,\"148\":1,\"155\":1,\"159\":1,\"171\":3,\"180\":1,\"206\":1,\"207\":1,\"216\":1,\"219\":1,\"234\":1,\"243\":1,\"313\":1,\"316\":1}}],[\"super\",{\"1\":{\"167\":1,\"172\":1}}],[\"supplyjt808sessionmanagereventlistener\",{\"1\":{\"180\":1}}],[\"supplyjt808sessionmanager\",{\"1\":{\"179\":1}}],[\"supplymsgtypeparser\",{\"1\":{\"176\":1}}],[\"supplybytesencoder\",{\"1\":{\"163\":1}}],[\"supplyauthcodevalidator\",{\"1\":{\"162\":1}}],[\"suppresswarnings\",{\"1\":{\"148\":1}}],[\"supportsparameter\",{\"1\":{\"203\":1}}],[\"support\",{\"1\":{\"1\":1,\"91\":1,\"92\":2,\"115\":1,\"164\":1,\"225\":1,\"263\":1,\"268\":1,\"344\":1,\"347\":2,\"352\":1,\"381\":1,\"387\":2}}],[\"successful\",{\"1\":{\"347\":1}}],[\"success\",{\"1\":{\"141\":1,\"155\":1,\"156\":3,\"159\":1,\"162\":3,\"171\":2,\"211\":1,\"313\":1,\"316\":1}}],[\"subpackagemsg\",{\"1\":{\"243\":2}}],[\"subpackagemsglist\",{\"1\":{\"243\":2}}],[\"subpackage\",{\"1\":{\"223\":2,\"241\":2}}],[\"subseq\",{\"1\":{\"135\":3}}],[\"sub\",{\"0\":{\"102\":1,\"104\":1,\"105\":1},\"1\":{\"74\":2,\"104\":2,\"105\":3,\"224\":5,\"242\":3}}],[\"servlet\",{\"1\":{\"203\":1}}],[\"servermsgid\",{\"1\":{\"423\":1}}],[\"serverflowid\",{\"1\":{\"423\":1}}],[\"serverbootstrap\",{\"1\":{\"385\":2}}],[\"serverwebexchange\",{\"1\":{\"378\":1}}],[\"servercommonreplymsgbody\",{\"1\":{\"159\":3}}],[\"server\",{\"0\":{\"40\":1,\"96\":1},\"1\":{\"1\":8,\"9\":1,\"10\":1,\"35\":2,\"36\":1,\"44\":1,\"74\":1,\"75\":2,\"96\":1,\"97\":1,\"101\":2,\"126\":1,\"138\":1,\"139\":1,\"143\":1,\"144\":1,\"148\":1,\"156\":1,\"162\":1,\"163\":1,\"168\":1,\"173\":1,\"176\":1,\"177\":2,\"178\":1,\"180\":1,\"189\":1,\"191\":2,\"194\":1,\"206\":1,\"208\":1,\"218\":1,\"341\":2,\"343\":1,\"344\":7,\"345\":1,\"347\":8,\"351\":3,\"352\":5,\"355\":4,\"356\":1,\"357\":4,\"358\":4,\"364\":1,\"367\":1,\"368\":1,\"373\":1,\"378\":1,\"384\":1,\"388\":1,\"397\":7,\"399\":2,\"400\":2,\"408\":1,\"412\":1}}],[\"see\",{\"1\":{\"186\":1,\"223\":1,\"238\":2,\"375\":1,\"377\":1,\"381\":2,\"382\":2,\"384\":2,\"387\":6,\"393\":1}}],[\"seconds\",{\"1\":{\"148\":1,\"197\":1}}],[\"sent\",{\"1\":{\"145\":1,\"157\":1,\"196\":1}}],[\"send2client\",{\"1\":{\"171\":2}}],[\"sendcommandandwaitingforreply\",{\"1\":{\"148\":1,\"197\":1}}],[\"sendmsgbysession\",{\"1\":{\"196\":1}}],[\"sendmsg\",{\"1\":{\"148\":1,\"197\":1}}],[\"sendmsgtoclient\",{\"1\":{\"145\":1,\"196\":2,\"243\":1,\"377\":1}}],[\"send\",{\"1\":{\"148\":1,\"171\":1,\"196\":1,\"243\":1}}],[\"senddatatoclient\",{\"1\":{\"145\":1}}],[\"session事件监听器\",{\"1\":{\"392\":3}}],[\"sessionclosereason\",{\"1\":{\"392\":1}}],[\"sessionid\",{\"1\":{\"180\":1,\"377\":1}}],[\"sessioninfo\",{\"1\":{\"145\":3}}],[\"sessionadd\",{\"1\":{\"180\":1}}],[\"sessionargumentresolver\",{\"1\":{\"142\":1}}],[\"sessionmanager\",{\"1\":{\"145\":2,\"196\":5,\"197\":5,\"243\":5,\"391\":3}}],[\"session\",{\"1\":{\"141\":3,\"145\":1,\"159\":4,\"162\":2,\"169\":3,\"171\":12,\"180\":4,\"196\":2,\"197\":2,\"207\":1,\"210\":1,\"211\":1,\"234\":1,\"243\":2,\"338\":1,\"378\":1,\"390\":1,\"391\":8,\"392\":6,\"421\":1}}],[\"session相关配置\",{\"1\":{\"164\":1}}],[\"session相关\",{\"0\":{\"178\":1,\"389\":1},\"1\":{\"68\":1,\"72\":1}}],[\"setparamcount\",{\"1\":{\"408\":1,\"412\":1}}],[\"setparamitemlist\",{\"1\":{\"408\":1,\"412\":1}}],[\"setparamlist\",{\"1\":{\"148\":1,\"197\":1}}],[\"setheader\",{\"1\":{\"247\":1}}],[\"setheight\",{\"1\":{\"167\":1}}],[\"setauthcode\",{\"1\":{\"210\":1,\"231\":1,\"323\":1}}],[\"setflowid\",{\"1\":{\"210\":1,\"231\":1,\"323\":1}}],[\"set\",{\"1\":{\"197\":1,\"219\":1,\"234\":1,\"404\":7,\"408\":1,\"412\":1}}],[\"set<jt808protocolversion>\",{\"1\":{\"219\":1,\"234\":1}}],[\"set<class<\",{\"1\":{\"186\":2}}],[\"set<msgtype>\",{\"1\":{\"169\":1,\"171\":2,\"219\":1,\"234\":1}}],[\"setdirection\",{\"1\":{\"167\":1}}],[\"setservermsgid\",{\"1\":{\"423\":1}}],[\"setserverflowid\",{\"1\":{\"423\":1}}],[\"setsomefield\",{\"1\":{\"390\":1,\"391\":1}}],[\"setscale\",{\"1\":{\"262\":1}}],[\"sets\",{\"1\":{\"169\":1}}],[\"setspeed\",{\"1\":{\"167\":1}}],[\"setstatus\",{\"1\":{\"167\":1}}],[\"setlng\",{\"1\":{\"167\":1}}],[\"setlat\",{\"1\":{\"167\":1}}],[\"setwarningflag\",{\"1\":{\"167\":1}}],[\"setrequest\",{\"1\":{\"248\":1}}],[\"setrequestmsgmetadata\",{\"1\":{\"110\":1}}],[\"setrequestmsgheader\",{\"1\":{\"109\":1}}],[\"setreplymsgid\",{\"1\":{\"156\":1}}],[\"setreplyflowid\",{\"1\":{\"156\":1}}],[\"setresult\",{\"1\":{\"156\":1,\"210\":1,\"231\":1,\"323\":1,\"423\":1}}],[\"settime\",{\"1\":{\"167\":1}}],[\"settings\",{\"1\":{\"148\":1,\"347\":1}}],[\"settotalparamcount\",{\"1\":{\"148\":1,\"197\":1}}],[\"setbytesencoder\",{\"1\":{\"111\":1}}],[\"scan\",{\"0\":{\"45\":1,\"50\":1,\"54\":1},\"1\":{\"36\":3,\"115\":1}}],[\"script\",{\"1\":{\"1\":1,\"347\":1}}],[\"step\",{\"1\":{\"423\":1,\"424\":1}}],[\"stream\",{\"1\":{\"243\":2,\"391\":1}}],[\"string\",{\"0\":{\"288\":1,\"307\":1},\"1\":{\"27\":1,\"48\":1,\"52\":1,\"56\":1,\"63\":1,\"86\":1,\"128\":1,\"145\":1,\"148\":1,\"162\":2,\"165\":1,\"171\":3,\"175\":2,\"185\":1,\"186\":6,\"192\":1,\"196\":1,\"197\":2,\"231\":3,\"234\":1,\"241\":1,\"251\":3,\"252\":5,\"253\":4,\"261\":1,\"262\":1,\"265\":2,\"266\":2,\"267\":3,\"268\":2,\"272\":2,\"277\":1,\"278\":1,\"286\":1,\"287\":1,\"289\":4,\"290\":4,\"296\":1,\"297\":1,\"305\":1,\"306\":1,\"308\":4,\"309\":4,\"316\":1,\"328\":9,\"339\":3,\"361\":5,\"376\":1,\"377\":2,\"390\":3,\"391\":2,\"403\":1,\"408\":2,\"412\":2,\"418\":1,\"420\":1,\"421\":1}}],[\"storageconfig\",{\"1\":{\"394\":2}}],[\"storage\",{\"0\":{\"104\":1,\"105\":1},\"1\":{\"74\":2,\"104\":2,\"105\":3,\"224\":5,\"242\":4}}],[\"start\",{\"1\":{\"162\":1,\"163\":2,\"262\":2,\"267\":2}}],[\"startbitindex\",{\"1\":{\"153\":1,\"330\":1}}],[\"startindexexpression\",{\"1\":{\"326\":1,\"327\":1,\"328\":1,\"331\":1}}],[\"startindexmethod\",{\"1\":{\"128\":1,\"151\":1,\"326\":1,\"328\":1,\"331\":1}}],[\"startindexmethod使用示例\",{\"1\":{\"128\":1}}],[\"startindex\",{\"1\":{\"128\":10,\"130\":1,\"131\":1,\"132\":2,\"134\":1,\"135\":1,\"137\":4,\"151\":3,\"154\":1,\"251\":6,\"272\":3,\"313\":1,\"316\":1,\"326\":3,\"328\":1,\"331\":1}}],[\"starter<\",{\"1\":{\"357\":2,\"358\":3}}],[\"starter\",{\"1\":{\"1\":2,\"191\":1,\"341\":3,\"343\":1,\"344\":4,\"345\":1,\"347\":4,\"351\":8,\"352\":2,\"355\":5,\"356\":1,\"357\":5,\"358\":4,\"367\":1,\"368\":1,\"397\":10,\"399\":3,\"400\":3}}],[\"static\",{\"1\":{\"132\":1,\"142\":1,\"148\":1,\"156\":2,\"165\":1,\"175\":2,\"192\":1,\"210\":1,\"313\":1,\"316\":1,\"361\":2,\"391\":2,\"407\":1,\"411\":1,\"423\":2,\"424\":1}}],[\"statistics\",{\"0\":{\"65\":1,\"90\":1},\"1\":{\"36\":1,\"65\":1,\"88\":1,\"90\":1,\"192\":1,\"193\":1,\"369\":1,\"371\":1}}],[\"statusinfo\",{\"1\":{\"132\":2}}],[\"status的第3位\",{\"1\":{\"130\":1}}],[\"status的第0位\",{\"1\":{\"130\":1}}],[\"statusbytes1\",{\"1\":{\"151\":1}}],[\"statusbytes\",{\"1\":{\"130\":3,\"151\":1}}],[\"status字段是由消息体中第4~7个字节表示的\",{\"1\":{\"129\":1}}],[\"status\",{\"1\":{\"128\":7,\"130\":3,\"131\":7,\"132\":1,\"316\":7,\"331\":7}}],[\"stater<\",{\"1\":{\"191\":1}}],[\"stater\",{\"1\":{\"191\":1,\"351\":2,\"397\":4,\"399\":3,\"400\":3}}],[\"state\",{\"0\":{\"44\":1,\"101\":1},\"1\":{\"44\":1,\"97\":1,\"101\":2}}],[\"splitpropertyvalueintonestedbeanfield\",{\"1\":{\"132\":1,\"152\":1}}],[\"splittablefield\",{\"0\":{\"152\":1},\"1\":{\"132\":6}}],[\"splittablefield解析\",{\"0\":{\"132\":1}}],[\"speed\",{\"1\":{\"128\":1,\"316\":1}}],[\"spec\",{\"1\":{\"27\":2,\"196\":1,\"318\":2,\"381\":1,\"387\":1,\"390\":1}}],[\"spel元数据如下\",{\"1\":{\"327\":1}}],[\"spel\",{\"0\":{\"327\":1,\"338\":1},\"1\":{\"23\":1,\"326\":2,\"327\":2,\"328\":1,\"337\":1,\"338\":1}}],[\"springframework\",{\"1\":{\"211\":1,\"218\":1,\"357\":2,\"358\":2,\"378\":1,\"384\":5}}],[\"springapplication\",{\"1\":{\"192\":1}}],[\"springbootapplication\",{\"1\":{\"192\":1}}],[\"springmvc\",{\"1\":{\"140\":1,\"141\":1,\"142\":1,\"199\":2}}],[\"spring\",{\"0\":{\"345\":1,\"354\":1,\"357\":1,\"358\":1,\"367\":1,\"368\":1,\"399\":1,\"400\":1},\"1\":{\"1\":10,\"12\":2,\"23\":1,\"35\":1,\"55\":1,\"75\":1,\"107\":2,\"111\":1,\"123\":1,\"124\":1,\"190\":3,\"191\":3,\"193\":1,\"199\":1,\"200\":1,\"203\":1,\"211\":1,\"215\":2,\"218\":1,\"219\":1,\"230\":1,\"245\":2,\"251\":1,\"255\":1,\"320\":3,\"341\":5,\"343\":3,\"344\":9,\"345\":7,\"347\":8,\"351\":11,\"352\":5,\"353\":2,\"355\":6,\"356\":8,\"357\":14,\"358\":14,\"362\":1,\"365\":3,\"367\":2,\"368\":2,\"371\":1,\"378\":1,\"384\":1,\"391\":1,\"394\":1,\"397\":24,\"399\":3,\"400\":3,\"411\":1}}],[\"smallchi\",{\"1\":{\"9\":1,\"10\":2}}],[\"├──\",{\"1\":{\"1\":13}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
